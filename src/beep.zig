pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = c_longdouble;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
pub const __mbstate_t = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const __builtin_va_list = [*c]u8;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: ?*const fn (?*anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) void),
    __arg: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    __next: [*c]struct___darwin_pthread_handler_rec = @import("std").mem.zeroes([*c]struct___darwin_pthread_handler_rec),
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [40]u8 = @import("std").mem.zeroes([40]u8),
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [192]u8 = @import("std").mem.zeroes([192]u8),
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __cleanup_stack: [*c]struct___darwin_pthread_handler_rec = @import("std").mem.zeroes([*c]struct___darwin_pthread_handler_rec),
    __opaque: [8176]u8 = @import("std").mem.zeroes([8176]u8),
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = [*c]struct__opaque_pthread_t;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub extern fn _Block_copy(aBlock: ?*const anyopaque) ?*anyopaque;
pub extern fn _Block_release(aBlock: ?*const anyopaque) void;
pub extern fn _Block_object_assign(?*anyopaque, ?*const anyopaque, c_int) void;
pub extern fn _Block_object_dispose(?*const anyopaque, c_int) void;
pub extern var _NSConcreteGlobalBlock: [32]?*anyopaque;
pub extern var _NSConcreteStackBlock: [32]?*anyopaque;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub fn _OSSwapInt16(arg__data: __uint16_t) callconv(.c) __uint16_t {
    var _data = arg__data;
    _ = &_data;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate((@as(c_int, @bitCast(@as(c_uint, _data))) << @intCast(8)) | (@as(c_int, @bitCast(@as(c_uint, _data))) >> @intCast(8))))));
}
pub fn _OSSwapInt32(arg__data: __uint32_t) callconv(.c) __uint32_t {
    var _data = arg__data;
    _ = &_data;
    _data = __builtin_bswap32(_data);
    return _data;
}
pub fn _OSSwapInt64(arg__data: __uint64_t) callconv(.c) __uint64_t {
    var _data = arg__data;
    _ = &_data;
    return __builtin_bswap64(_data);
}
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_quad_t = u_int64_t;
pub const quad_t = i64;
pub const qaddr_t = [*c]quad_t;
pub const caddr_t = [*c]u8;
pub const daddr_t = i32;
pub const dev_t = __darwin_dev_t;
pub const fixpt_t = u_int32_t;
pub const blkcnt_t = __darwin_blkcnt_t;
pub const blksize_t = __darwin_blksize_t;
pub const gid_t = __darwin_gid_t;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const ino_t = __darwin_ino_t;
pub const ino64_t = __darwin_ino64_t;
pub const key_t = __int32_t;
pub const mode_t = __darwin_mode_t;
pub const nlink_t = __uint16_t;
pub const id_t = __darwin_id_t;
pub const pid_t = __darwin_pid_t;
pub const off_t = __darwin_off_t;
pub const segsz_t = i32;
pub const swblk_t = i32;
pub const uid_t = __darwin_uid_t;
pub const clock_t = __darwin_clock_t;
pub const time_t = __darwin_time_t;
pub const useconds_t = __darwin_useconds_t;
pub const suseconds_t = __darwin_suseconds_t;
pub const rsize_t = __darwin_size_t;
pub const errno_t = c_int;
pub const struct_fd_set = extern struct {
    fds_bits: [32]__int32_t = @import("std").mem.zeroes([32]__int32_t),
};
pub const fd_set = struct_fd_set;
pub extern fn __darwin_check_fd_set_overflow(c_int, ?*const anyopaque, c_int) c_int;
pub inline fn __darwin_check_fd_set(arg__a: c_int, arg__b: ?*const anyopaque) c_int {
    var _a = arg__a;
    _ = &_a;
    var _b = arg__b;
    _ = &_b;
    if (@as(usize, @intCast(@intFromPtr(&__darwin_check_fd_set_overflow))) != @as(usize, @bitCast(@as(c_long, @as(c_int, 0))))) {
        return __darwin_check_fd_set_overflow(_a, _b, @as(c_int, 0));
    } else {
        return 1;
    }
    return 0;
}
pub inline fn __darwin_fd_isset(arg__fd: c_int, arg__p: [*c]const struct_fd_set) c_int {
    var _fd = arg__fd;
    _ = &_fd;
    var _p = arg__p;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        return _p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))] & @as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
    }
    return 0;
}
pub inline fn __darwin_fd_set(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    _ = &_fd;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))];
            ref.* |= @as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
            break :blk ref.*;
        };
    }
}
pub inline fn __darwin_fd_clr(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    _ = &_fd;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))];
            ref.* &= ~@as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
            break :blk ref.*;
        };
    }
}
pub const fd_mask = __int32_t;
pub const pthread_attr_t = __darwin_pthread_attr_t;
pub const pthread_cond_t = __darwin_pthread_cond_t;
pub const pthread_condattr_t = __darwin_pthread_condattr_t;
pub const pthread_mutex_t = __darwin_pthread_mutex_t;
pub const pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub const pthread_once_t = __darwin_pthread_once_t;
pub const pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub const pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub const pthread_t = __darwin_pthread_t;
pub const pthread_key_t = __darwin_pthread_key_t;
pub const fsblkcnt_t = __darwin_fsblkcnt_t;
pub const fsfilcnt_t = __darwin_fsfilcnt_t;
pub const UInt8 = u8;
pub const SInt8 = i8;
pub const UInt16 = c_ushort;
pub const SInt16 = c_short;
pub const UInt32 = c_uint;
pub const SInt32 = c_int;
pub const struct_wide = extern struct {
    lo: UInt32 = @import("std").mem.zeroes(UInt32),
    hi: SInt32 = @import("std").mem.zeroes(SInt32),
};
pub const wide = struct_wide;
pub const struct_UnsignedWide = extern struct {
    lo: UInt32 = @import("std").mem.zeroes(UInt32),
    hi: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const UnsignedWide = struct_UnsignedWide;
pub const SInt64 = c_longlong;
pub const UInt64 = c_ulonglong;
pub const Fixed = SInt32;
pub const FixedPtr = [*c]Fixed;
pub const Fract = SInt32;
pub const FractPtr = [*c]Fract;
pub const UnsignedFixed = UInt32;
pub const UnsignedFixedPtr = [*c]UnsignedFixed;
pub const ShortFixed = c_short;
pub const ShortFixedPtr = [*c]ShortFixed;
pub const Float32 = f32;
pub const Float64 = f64;
pub const struct_Float80 = extern struct {
    exp: SInt16 = @import("std").mem.zeroes(SInt16),
    man: [4]UInt16 = @import("std").mem.zeroes([4]UInt16),
};
pub const Float80 = struct_Float80;
pub const struct_Float96 = extern struct {
    exp: [2]SInt16 = @import("std").mem.zeroes([2]SInt16),
    man: [4]UInt16 = @import("std").mem.zeroes([4]UInt16),
};
pub const Float96 = struct_Float96;
pub const struct_Float32Point = extern struct {
    x: Float32 = @import("std").mem.zeroes(Float32),
    y: Float32 = @import("std").mem.zeroes(Float32),
};
pub const Float32Point = struct_Float32Point;
pub const Ptr = [*c]u8;
pub const Handle = [*c]Ptr;
pub const Size = c_long;
pub const OSErr = SInt16;
pub const OSStatus = SInt32;
pub const LogicalAddress = ?*anyopaque;
pub const ConstLogicalAddress = ?*const anyopaque;
pub const PhysicalAddress = ?*anyopaque;
pub const BytePtr = [*c]UInt8;
pub const ByteCount = c_ulong;
pub const ByteOffset = c_ulong;
pub const Duration = SInt32;
pub const AbsoluteTime = UnsignedWide;
pub const OptionBits = UInt32;
pub const ItemCount = c_ulong;
pub const PBVersion = UInt32;
pub const ScriptCode = SInt16;
pub const LangCode = SInt16;
pub const RegionCode = SInt16;
pub const FourCharCode = UInt32;
pub const OSType = FourCharCode;
pub const ResType = FourCharCode;
pub const OSTypePtr = [*c]OSType;
pub const ResTypePtr = [*c]ResType;
pub const Boolean = u8;
pub const ProcPtr = ?*const fn () callconv(.c) c_long;
pub const Register68kProcPtr = ?*const fn () callconv(.c) void;
pub const UniversalProcPtr = ProcPtr;
pub const ProcHandle = [*c]ProcPtr;
pub const UniversalProcHandle = [*c]UniversalProcPtr;
pub const PRefCon = ?*anyopaque;
pub const URefCon = ?*anyopaque;
pub const SRefCon = ?*anyopaque;
pub const noErr: c_int = 0;
const enum_unnamed_1 = c_uint;
pub const kNilOptions: c_int = 0;
const enum_unnamed_2 = c_uint;
pub const kVariableLengthArray: c_int = 1;
const enum_unnamed_3 = c_uint;
pub const kUnknownType: c_int = 1061109567;
const enum_unnamed_4 = c_uint;
pub const UnicodeScalarValue = UInt32;
pub const UTF32Char = UInt32;
pub const UniChar = UInt16;
pub const UTF16Char = UInt16;
pub const UTF8Char = UInt8;
pub const UniCharPtr = [*c]UniChar;
pub const UniCharCount = c_ulong;
pub const UniCharCountPtr = [*c]UniCharCount;
pub const Str255 = [256]u8;
pub const Str63 = [64]u8;
pub const Str32 = [33]u8;
pub const Str31 = [32]u8;
pub const Str27 = [28]u8;
pub const Str15 = [16]u8;
pub const Str32Field = [34]u8;
pub const StrFileName = Str63;
pub const StringPtr = [*c]u8;
pub const StringHandle = [*c]StringPtr;
pub const ConstStringPtr = [*c]const u8;
pub const ConstStr255Param = [*c]const u8;
pub const ConstStr63Param = [*c]const u8;
pub const ConstStr32Param = [*c]const u8;
pub const ConstStr31Param = [*c]const u8;
pub const ConstStr27Param = [*c]const u8;
pub const ConstStr15Param = [*c]const u8;
pub const ConstStrFileNameParam = ConstStr63Param;
pub const struct_ProcessSerialNumber = extern struct {
    highLongOfPSN: UInt32 = @import("std").mem.zeroes(UInt32),
    lowLongOfPSN: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const ProcessSerialNumber = struct_ProcessSerialNumber;
pub const ProcessSerialNumberPtr = [*c]ProcessSerialNumber;
pub const struct_Point = extern struct {
    v: c_short = @import("std").mem.zeroes(c_short),
    h: c_short = @import("std").mem.zeroes(c_short),
};
pub const Point = struct_Point;
pub const PointPtr = [*c]Point;
pub const struct_Rect = extern struct {
    top: c_short = @import("std").mem.zeroes(c_short),
    left: c_short = @import("std").mem.zeroes(c_short),
    bottom: c_short = @import("std").mem.zeroes(c_short),
    right: c_short = @import("std").mem.zeroes(c_short),
};
pub const Rect = struct_Rect;
pub const RectPtr = [*c]Rect;
pub const struct_FixedPoint = extern struct {
    x: Fixed = @import("std").mem.zeroes(Fixed),
    y: Fixed = @import("std").mem.zeroes(Fixed),
};
pub const FixedPoint = struct_FixedPoint;
pub const struct_FixedRect = extern struct {
    left: Fixed = @import("std").mem.zeroes(Fixed),
    top: Fixed = @import("std").mem.zeroes(Fixed),
    right: Fixed = @import("std").mem.zeroes(Fixed),
    bottom: Fixed = @import("std").mem.zeroes(Fixed),
};
pub const FixedRect = struct_FixedRect;
pub const CharParameter = c_short;
pub const normal: c_int = 0;
pub const bold: c_int = 1;
pub const italic: c_int = 2;
pub const underline: c_int = 4;
pub const outline: c_int = 8;
pub const shadow: c_int = 16;
pub const condense: c_int = 32;
pub const extend: c_int = 64;
const enum_unnamed_5 = c_uint;
pub const Style = u8;
pub const StyleParameter = c_short;
pub const StyleField = Style;
pub const TimeValue = SInt32;
pub const TimeScale = SInt32;
pub const CompTimeValue = wide;
pub const TimeValue64 = SInt64;
pub const struct_TimeBaseRecord = opaque {};
pub const TimeBase = ?*struct_TimeBaseRecord;
pub const struct_TimeRecord = extern struct {
    value: CompTimeValue = @import("std").mem.zeroes(CompTimeValue),
    scale: TimeScale = @import("std").mem.zeroes(TimeScale),
    base: TimeBase = @import("std").mem.zeroes(TimeBase),
};
pub const TimeRecord = struct_TimeRecord;
pub const struct_NumVersion = extern struct {
    nonRelRev: UInt8 = @import("std").mem.zeroes(UInt8),
    stage: UInt8 = @import("std").mem.zeroes(UInt8),
    minorAndBugRev: UInt8 = @import("std").mem.zeroes(UInt8),
    majorRev: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub const NumVersion = struct_NumVersion;
pub const developStage: c_int = 32;
pub const alphaStage: c_int = 64;
pub const betaStage: c_int = 96;
pub const finalStage: c_int = 128;
const enum_unnamed_6 = c_uint;
pub const union_NumVersionVariant = extern union {
    parts: NumVersion,
    whole: UInt32,
};
pub const NumVersionVariant = union_NumVersionVariant;
pub const NumVersionVariantPtr = [*c]NumVersionVariant;
pub const NumVersionVariantHandle = [*c]NumVersionVariantPtr;
pub const struct_VersRec = extern struct {
    numericVersion: NumVersion = @import("std").mem.zeroes(NumVersion),
    countryCode: c_short = @import("std").mem.zeroes(c_short),
    shortVersion: Str255 = @import("std").mem.zeroes(Str255),
    reserved: Str255 = @import("std").mem.zeroes(Str255),
};
pub const VersRec = struct_VersRec;
pub const VersRecPtr = [*c]VersRec;
pub const VersRecHndl = [*c]VersRecPtr;
pub const Byte = UInt8;
pub const SignedByte = SInt8;
pub const WidePtr = [*c]wide;
pub const UnsignedWidePtr = [*c]UnsignedWide;
pub const extended80 = Float80;
pub const extended96 = Float96;
pub const VHSelect = SInt8;
pub extern fn Debugger() void;
pub extern fn DebugStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreak() void;
pub extern fn SysBreakStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreakFunc(debuggerMsg: ConstStr255Param) void;
pub const CFAllocatorTypeID = c_ulonglong;
pub extern var kCFCoreFoundationVersionNumber: f64;
pub const CFTypeID = c_ulong;
pub const CFOptionFlags = c_ulong;
pub const CFHashCode = c_ulong;
pub const CFIndex = c_long;
pub const CFTypeRef = ?*const anyopaque;
pub const struct___CFString = opaque {};
pub const CFStringRef = ?*const struct___CFString;
pub const CFMutableStringRef = ?*struct___CFString;
pub const CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult = CFIndex;
pub const kCFCompareLessThan: c_int = -1;
pub const kCFCompareEqualTo: c_int = 0;
pub const kCFCompareGreaterThan: c_int = 1;
const enum_unnamed_7 = c_int;
pub const CFComparatorFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.c) CFComparisonResult;
pub const kCFNotFound: CFIndex = @as(CFIndex, @bitCast(@as(c_long, -@as(c_int, 1))));
pub const CFRange = extern struct {
    location: CFIndex = @import("std").mem.zeroes(CFIndex),
    length: CFIndex = @import("std").mem.zeroes(CFIndex),
};
pub inline fn CFRangeMake(arg_loc: CFIndex, arg_len: CFIndex) CFRange {
    var loc = arg_loc;
    _ = &loc;
    var len = arg_len;
    _ = &len;
    var range: CFRange = undefined;
    _ = &range;
    range.location = loc;
    range.length = len;
    return range;
}
pub extern fn __CFRangeMake(loc: CFIndex, len: CFIndex) CFRange;
pub const struct___CFNull = opaque {};
pub const CFNullRef = ?*const struct___CFNull;
pub extern fn CFNullGetTypeID() CFTypeID;
pub extern const kCFNull: CFNullRef;
pub const struct___CFAllocator = opaque {};
pub const CFAllocatorRef = ?*const struct___CFAllocator;
pub extern const kCFAllocatorDefault: CFAllocatorRef;
pub extern const kCFAllocatorSystemDefault: CFAllocatorRef;
pub extern const kCFAllocatorMalloc: CFAllocatorRef;
pub extern const kCFAllocatorMallocZone: CFAllocatorRef;
pub extern const kCFAllocatorNull: CFAllocatorRef;
pub extern const kCFAllocatorUseContext: CFAllocatorRef;
pub const CFAllocatorRetainCallBack = ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFAllocatorReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.c) void;
pub const CFAllocatorCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFAllocatorAllocateCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.c) ?*anyopaque;
pub const CFAllocatorReallocateCallBack = ?*const fn (?*anyopaque, CFIndex, CFOptionFlags, ?*anyopaque) callconv(.c) ?*anyopaque;
pub const CFAllocatorDeallocateCallBack = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const CFAllocatorPreferredSizeCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.c) CFIndex;
pub const CFAllocatorContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFAllocatorRetainCallBack = @import("std").mem.zeroes(CFAllocatorRetainCallBack),
    release: CFAllocatorReleaseCallBack = @import("std").mem.zeroes(CFAllocatorReleaseCallBack),
    copyDescription: CFAllocatorCopyDescriptionCallBack = @import("std").mem.zeroes(CFAllocatorCopyDescriptionCallBack),
    allocate: CFAllocatorAllocateCallBack = @import("std").mem.zeroes(CFAllocatorAllocateCallBack),
    reallocate: CFAllocatorReallocateCallBack = @import("std").mem.zeroes(CFAllocatorReallocateCallBack),
    deallocate: CFAllocatorDeallocateCallBack = @import("std").mem.zeroes(CFAllocatorDeallocateCallBack),
    preferredSize: CFAllocatorPreferredSizeCallBack = @import("std").mem.zeroes(CFAllocatorPreferredSizeCallBack),
};
pub extern fn CFAllocatorGetTypeID() CFTypeID;
pub extern fn CFAllocatorSetDefault(allocator: CFAllocatorRef) void;
pub extern fn CFAllocatorGetDefault() CFAllocatorRef;
pub extern fn CFAllocatorCreate(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) CFAllocatorRef;
pub extern fn CFAllocatorAllocateTyped(allocator: CFAllocatorRef, size: CFIndex, descriptor: CFAllocatorTypeID, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorReallocateTyped(allocator: CFAllocatorRef, ptr: ?*anyopaque, newsize: CFIndex, descriptor: CFAllocatorTypeID, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorAllocateBytes(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorReallocateBytes(allocator: CFAllocatorRef, ptr: ?*anyopaque, newsize: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorReallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque, newsize: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque) void;
pub extern fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) CFIndex;
pub extern fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) void;
pub extern fn CFGetTypeID(cf: CFTypeRef) CFTypeID;
pub extern fn CFCopyTypeIDDescription(type_id: CFTypeID) CFStringRef;
pub extern fn CFRetain(cf: CFTypeRef) CFTypeRef;
pub extern fn CFRelease(cf: CFTypeRef) void;
pub extern fn CFAutorelease(arg: CFTypeRef) CFTypeRef;
pub extern fn CFGetRetainCount(cf: CFTypeRef) CFIndex;
pub extern fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) Boolean;
pub extern fn CFHash(cf: CFTypeRef) CFHashCode;
pub extern fn CFCopyDescription(cf: CFTypeRef) CFStringRef;
pub extern fn CFGetAllocator(cf: CFTypeRef) CFAllocatorRef;
pub extern fn CFMakeCollectable(cf: CFTypeRef) CFTypeRef;
pub const ptrauth_key_asia: c_int = 0;
pub const ptrauth_key_asib: c_int = 1;
pub const ptrauth_key_asda: c_int = 2;
pub const ptrauth_key_asdb: c_int = 3;
pub const ptrauth_key_process_independent_code: c_int = 0;
pub const ptrauth_key_process_dependent_code: c_int = 1;
pub const ptrauth_key_process_independent_data: c_int = 2;
pub const ptrauth_key_process_dependent_data: c_int = 3;
pub const ptrauth_key_return_address: c_int = 1;
pub const ptrauth_key_function_pointer: c_int = 0;
pub const ptrauth_key_cxx_vtable_pointer: c_int = 2;
pub const ptrauth_key_init_fini_pointer: c_int = 0;
pub const ptrauth_key = c_uint;
pub const ptrauth_extra_data_t = c_ulong;
pub const ptrauth_generic_signature_t = c_ulong;
pub const kAudio_NoError: c_int = 0;
pub const kAudio_UnimplementedError: c_int = -4;
pub const kAudio_FileNotFoundError: c_int = -43;
pub const kAudio_FilePermissionError: c_int = -54;
pub const kAudio_TooManyFilesOpenError: c_int = -42;
pub const kAudio_BadFilePathError: c_int = 561017960;
pub const kAudio_ParamError: c_int = -50;
pub const kAudio_MemFullError: c_int = -108;
const enum_unnamed_8 = c_int;
pub const struct_AudioValueRange = extern struct {
    mMinimum: Float64 = @import("std").mem.zeroes(Float64),
    mMaximum: Float64 = @import("std").mem.zeroes(Float64),
};
pub const AudioValueRange = struct_AudioValueRange;
pub const struct_AudioValueTranslation = extern struct {
    mInputData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mInputDataSize: UInt32 = @import("std").mem.zeroes(UInt32),
    mOutputData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mOutputDataSize: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioValueTranslation = struct_AudioValueTranslation;
pub const struct_AudioBuffer = extern struct {
    mNumberChannels: UInt32 = @import("std").mem.zeroes(UInt32),
    mDataByteSize: UInt32 = @import("std").mem.zeroes(UInt32),
    mData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const AudioBuffer = struct_AudioBuffer;
pub const struct_AudioBufferList = extern struct {
    mNumberBuffers: UInt32 = @import("std").mem.zeroes(UInt32),
    mBuffers: [1]AudioBuffer = @import("std").mem.zeroes([1]AudioBuffer),
};
pub const AudioBufferList = struct_AudioBufferList;
pub const AudioSampleType = Float32;
pub const AudioUnitSampleType = Float32;
pub const AudioFormatID = UInt32;
pub const AudioFormatFlags = UInt32;
pub const struct_AudioStreamBasicDescription = extern struct {
    mSampleRate: Float64 = @import("std").mem.zeroes(Float64),
    mFormatID: AudioFormatID = @import("std").mem.zeroes(AudioFormatID),
    mFormatFlags: AudioFormatFlags = @import("std").mem.zeroes(AudioFormatFlags),
    mBytesPerPacket: UInt32 = @import("std").mem.zeroes(UInt32),
    mFramesPerPacket: UInt32 = @import("std").mem.zeroes(UInt32),
    mBytesPerFrame: UInt32 = @import("std").mem.zeroes(UInt32),
    mChannelsPerFrame: UInt32 = @import("std").mem.zeroes(UInt32),
    mBitsPerChannel: UInt32 = @import("std").mem.zeroes(UInt32),
    mReserved: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioStreamBasicDescription = struct_AudioStreamBasicDescription;
pub const kAudioStreamAnyRate: Float64 = 0.0;
pub const kAudioFormatLinearPCM: c_int = 1819304813;
pub const kAudioFormatAC3: c_int = 1633889587;
pub const kAudioFormat60958AC3: c_int = 1667326771;
pub const kAudioFormatAppleIMA4: c_int = 1768775988;
pub const kAudioFormatMPEG4AAC: c_int = 1633772320;
pub const kAudioFormatMPEG4CELP: c_int = 1667591280;
pub const kAudioFormatMPEG4HVXC: c_int = 1752594531;
pub const kAudioFormatMPEG4TwinVQ: c_int = 1953986161;
pub const kAudioFormatMACE3: c_int = 1296122675;
pub const kAudioFormatMACE6: c_int = 1296122678;
pub const kAudioFormatULaw: c_int = 1970037111;
pub const kAudioFormatALaw: c_int = 1634492791;
pub const kAudioFormatQDesign: c_int = 1363430723;
pub const kAudioFormatQDesign2: c_int = 1363430706;
pub const kAudioFormatQUALCOMM: c_int = 1365470320;
pub const kAudioFormatMPEGLayer1: c_int = 778924081;
pub const kAudioFormatMPEGLayer2: c_int = 778924082;
pub const kAudioFormatMPEGLayer3: c_int = 778924083;
pub const kAudioFormatTimeCode: c_int = 1953066341;
pub const kAudioFormatMIDIStream: c_int = 1835623529;
pub const kAudioFormatParameterValueStream: c_int = 1634760307;
pub const kAudioFormatAppleLossless: c_int = 1634492771;
pub const kAudioFormatMPEG4AAC_HE: c_int = 1633772392;
pub const kAudioFormatMPEG4AAC_LD: c_int = 1633772396;
pub const kAudioFormatMPEG4AAC_ELD: c_int = 1633772389;
pub const kAudioFormatMPEG4AAC_ELD_SBR: c_int = 1633772390;
pub const kAudioFormatMPEG4AAC_ELD_V2: c_int = 1633772391;
pub const kAudioFormatMPEG4AAC_HE_V2: c_int = 1633772400;
pub const kAudioFormatMPEG4AAC_Spatial: c_int = 1633772403;
pub const kAudioFormatMPEGD_USAC: c_int = 1970495843;
pub const kAudioFormatAMR: c_int = 1935764850;
pub const kAudioFormatAMR_WB: c_int = 1935767394;
pub const kAudioFormatAudible: c_int = 1096107074;
pub const kAudioFormatiLBC: c_int = 1768710755;
pub const kAudioFormatDVIIntelIMA: c_int = 1836253201;
pub const kAudioFormatMicrosoftGSM: c_int = 1836253233;
pub const kAudioFormatAES3: c_int = 1634038579;
pub const kAudioFormatEnhancedAC3: c_int = 1700998451;
pub const kAudioFormatFLAC: c_int = 1718378851;
pub const kAudioFormatOpus: c_int = 1869641075;
pub const kAudioFormatAPAC: c_int = 1634754915;
const enum_unnamed_9 = c_uint;
pub const kAudioFormatFlagIsFloat: c_uint = 1;
pub const kAudioFormatFlagIsBigEndian: c_uint = 2;
pub const kAudioFormatFlagIsSignedInteger: c_uint = 4;
pub const kAudioFormatFlagIsPacked: c_uint = 8;
pub const kAudioFormatFlagIsAlignedHigh: c_uint = 16;
pub const kAudioFormatFlagIsNonInterleaved: c_uint = 32;
pub const kAudioFormatFlagIsNonMixable: c_uint = 64;
pub const kAudioFormatFlagsAreAllClear: c_uint = 2147483648;
pub const kLinearPCMFormatFlagIsFloat: c_uint = 1;
pub const kLinearPCMFormatFlagIsBigEndian: c_uint = 2;
pub const kLinearPCMFormatFlagIsSignedInteger: c_uint = 4;
pub const kLinearPCMFormatFlagIsPacked: c_uint = 8;
pub const kLinearPCMFormatFlagIsAlignedHigh: c_uint = 16;
pub const kLinearPCMFormatFlagIsNonInterleaved: c_uint = 32;
pub const kLinearPCMFormatFlagIsNonMixable: c_uint = 64;
pub const kLinearPCMFormatFlagsSampleFractionShift: c_uint = 7;
pub const kLinearPCMFormatFlagsSampleFractionMask: c_uint = 8064;
pub const kLinearPCMFormatFlagsAreAllClear: c_uint = 2147483648;
pub const kAppleLosslessFormatFlag_16BitSourceData: c_uint = 1;
pub const kAppleLosslessFormatFlag_20BitSourceData: c_uint = 2;
pub const kAppleLosslessFormatFlag_24BitSourceData: c_uint = 3;
pub const kAppleLosslessFormatFlag_32BitSourceData: c_uint = 4;
const enum_unnamed_10 = c_uint;
pub const kAudioFormatFlagsNativeEndian: c_int = 0;
pub const kAudioFormatFlagsCanonical: c_int = 9;
pub const kAudioFormatFlagsAudioUnitCanonical: c_int = 41;
pub const kAudioFormatFlagsNativeFloatPacked: c_int = 9;
const enum_unnamed_11 = c_uint;
pub const struct_AudioStreamPacketDescription = extern struct {
    mStartOffset: SInt64 = @import("std").mem.zeroes(SInt64),
    mVariableFramesInPacket: UInt32 = @import("std").mem.zeroes(UInt32),
    mDataByteSize: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioStreamPacketDescription = struct_AudioStreamPacketDescription;
pub const SMPTETimeType = UInt32;
pub const kSMPTETimeType24: c_int = 0;
pub const kSMPTETimeType25: c_int = 1;
pub const kSMPTETimeType30Drop: c_int = 2;
pub const kSMPTETimeType30: c_int = 3;
pub const kSMPTETimeType2997: c_int = 4;
pub const kSMPTETimeType2997Drop: c_int = 5;
pub const kSMPTETimeType60: c_int = 6;
pub const kSMPTETimeType5994: c_int = 7;
pub const kSMPTETimeType60Drop: c_int = 8;
pub const kSMPTETimeType5994Drop: c_int = 9;
pub const kSMPTETimeType50: c_int = 10;
pub const kSMPTETimeType2398: c_int = 11;
const enum_unnamed_12 = c_uint;
pub const SMPTETimeFlags = UInt32;
pub const kSMPTETimeUnknown: c_int = 0;
pub const kSMPTETimeValid: c_int = 1;
pub const kSMPTETimeRunning: c_int = 2;
const enum_unnamed_13 = c_uint;
pub const struct_SMPTETime = extern struct {
    mSubframes: SInt16 = @import("std").mem.zeroes(SInt16),
    mSubframeDivisor: SInt16 = @import("std").mem.zeroes(SInt16),
    mCounter: UInt32 = @import("std").mem.zeroes(UInt32),
    mType: SMPTETimeType = @import("std").mem.zeroes(SMPTETimeType),
    mFlags: SMPTETimeFlags = @import("std").mem.zeroes(SMPTETimeFlags),
    mHours: SInt16 = @import("std").mem.zeroes(SInt16),
    mMinutes: SInt16 = @import("std").mem.zeroes(SInt16),
    mSeconds: SInt16 = @import("std").mem.zeroes(SInt16),
    mFrames: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const SMPTETime = struct_SMPTETime;
pub const AudioTimeStampFlags = UInt32;
pub const kAudioTimeStampNothingValid: c_int = 0;
pub const kAudioTimeStampSampleTimeValid: c_int = 1;
pub const kAudioTimeStampHostTimeValid: c_int = 2;
pub const kAudioTimeStampRateScalarValid: c_int = 4;
pub const kAudioTimeStampWordClockTimeValid: c_int = 8;
pub const kAudioTimeStampSMPTETimeValid: c_int = 16;
pub const kAudioTimeStampSampleHostTimeValid: c_int = 3;
const enum_unnamed_14 = c_uint;
pub const struct_AudioTimeStamp = extern struct {
    mSampleTime: Float64 = @import("std").mem.zeroes(Float64),
    mHostTime: UInt64 = @import("std").mem.zeroes(UInt64),
    mRateScalar: Float64 = @import("std").mem.zeroes(Float64),
    mWordClockTime: UInt64 = @import("std").mem.zeroes(UInt64),
    mSMPTETime: SMPTETime = @import("std").mem.zeroes(SMPTETime),
    mFlags: AudioTimeStampFlags = @import("std").mem.zeroes(AudioTimeStampFlags),
    mReserved: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioTimeStamp = struct_AudioTimeStamp;
pub const struct_AudioClassDescription = extern struct {
    mType: OSType = @import("std").mem.zeroes(OSType),
    mSubType: OSType = @import("std").mem.zeroes(OSType),
    mManufacturer: OSType = @import("std").mem.zeroes(OSType),
};
pub const AudioClassDescription = struct_AudioClassDescription;
pub const AudioChannelLabel = UInt32;
pub const AudioChannelLayoutTag = UInt32;
pub const kAudioChannelLabel_Unknown: c_uint = 4294967295;
pub const kAudioChannelLabel_Unused: c_uint = 0;
pub const kAudioChannelLabel_UseCoordinates: c_uint = 100;
pub const kAudioChannelLabel_Left: c_uint = 1;
pub const kAudioChannelLabel_Right: c_uint = 2;
pub const kAudioChannelLabel_Center: c_uint = 3;
pub const kAudioChannelLabel_LFEScreen: c_uint = 4;
pub const kAudioChannelLabel_LeftSurround: c_uint = 5;
pub const kAudioChannelLabel_RightSurround: c_uint = 6;
pub const kAudioChannelLabel_LeftCenter: c_uint = 7;
pub const kAudioChannelLabel_RightCenter: c_uint = 8;
pub const kAudioChannelLabel_CenterSurround: c_uint = 9;
pub const kAudioChannelLabel_LeftSurroundDirect: c_uint = 10;
pub const kAudioChannelLabel_RightSurroundDirect: c_uint = 11;
pub const kAudioChannelLabel_TopCenterSurround: c_uint = 12;
pub const kAudioChannelLabel_VerticalHeightLeft: c_uint = 13;
pub const kAudioChannelLabel_VerticalHeightCenter: c_uint = 14;
pub const kAudioChannelLabel_VerticalHeightRight: c_uint = 15;
pub const kAudioChannelLabel_TopBackLeft: c_uint = 16;
pub const kAudioChannelLabel_TopBackCenter: c_uint = 17;
pub const kAudioChannelLabel_TopBackRight: c_uint = 18;
pub const kAudioChannelLabel_RearSurroundLeft: c_uint = 33;
pub const kAudioChannelLabel_RearSurroundRight: c_uint = 34;
pub const kAudioChannelLabel_LeftWide: c_uint = 35;
pub const kAudioChannelLabel_RightWide: c_uint = 36;
pub const kAudioChannelLabel_LFE2: c_uint = 37;
pub const kAudioChannelLabel_LeftTotal: c_uint = 38;
pub const kAudioChannelLabel_RightTotal: c_uint = 39;
pub const kAudioChannelLabel_HearingImpaired: c_uint = 40;
pub const kAudioChannelLabel_Narration: c_uint = 41;
pub const kAudioChannelLabel_Mono: c_uint = 42;
pub const kAudioChannelLabel_DialogCentricMix: c_uint = 43;
pub const kAudioChannelLabel_CenterSurroundDirect: c_uint = 44;
pub const kAudioChannelLabel_Haptic: c_uint = 45;
pub const kAudioChannelLabel_LeftTopFront: c_uint = 13;
pub const kAudioChannelLabel_CenterTopFront: c_uint = 14;
pub const kAudioChannelLabel_RightTopFront: c_uint = 15;
pub const kAudioChannelLabel_LeftTopMiddle: c_uint = 49;
pub const kAudioChannelLabel_CenterTopMiddle: c_uint = 12;
pub const kAudioChannelLabel_RightTopMiddle: c_uint = 51;
pub const kAudioChannelLabel_LeftTopRear: c_uint = 52;
pub const kAudioChannelLabel_CenterTopRear: c_uint = 53;
pub const kAudioChannelLabel_RightTopRear: c_uint = 54;
pub const kAudioChannelLabel_LeftSideSurround: c_uint = 55;
pub const kAudioChannelLabel_RightSideSurround: c_uint = 56;
pub const kAudioChannelLabel_LeftBottom: c_uint = 57;
pub const kAudioChannelLabel_RightBottom: c_uint = 58;
pub const kAudioChannelLabel_CenterBottom: c_uint = 59;
pub const kAudioChannelLabel_LeftTopSurround: c_uint = 60;
pub const kAudioChannelLabel_RightTopSurround: c_uint = 61;
pub const kAudioChannelLabel_LFE3: c_uint = 62;
pub const kAudioChannelLabel_LeftBackSurround: c_uint = 63;
pub const kAudioChannelLabel_RightBackSurround: c_uint = 64;
pub const kAudioChannelLabel_LeftEdgeOfScreen: c_uint = 65;
pub const kAudioChannelLabel_RightEdgeOfScreen: c_uint = 66;
pub const kAudioChannelLabel_Ambisonic_W: c_uint = 200;
pub const kAudioChannelLabel_Ambisonic_X: c_uint = 201;
pub const kAudioChannelLabel_Ambisonic_Y: c_uint = 202;
pub const kAudioChannelLabel_Ambisonic_Z: c_uint = 203;
pub const kAudioChannelLabel_MS_Mid: c_uint = 204;
pub const kAudioChannelLabel_MS_Side: c_uint = 205;
pub const kAudioChannelLabel_XY_X: c_uint = 206;
pub const kAudioChannelLabel_XY_Y: c_uint = 207;
pub const kAudioChannelLabel_BinauralLeft: c_uint = 208;
pub const kAudioChannelLabel_BinauralRight: c_uint = 209;
pub const kAudioChannelLabel_HeadphonesLeft: c_uint = 301;
pub const kAudioChannelLabel_HeadphonesRight: c_uint = 302;
pub const kAudioChannelLabel_ClickTrack: c_uint = 304;
pub const kAudioChannelLabel_ForeignLanguage: c_uint = 305;
pub const kAudioChannelLabel_Discrete: c_uint = 400;
pub const kAudioChannelLabel_Discrete_0: c_uint = 65536;
pub const kAudioChannelLabel_Discrete_1: c_uint = 65537;
pub const kAudioChannelLabel_Discrete_2: c_uint = 65538;
pub const kAudioChannelLabel_Discrete_3: c_uint = 65539;
pub const kAudioChannelLabel_Discrete_4: c_uint = 65540;
pub const kAudioChannelLabel_Discrete_5: c_uint = 65541;
pub const kAudioChannelLabel_Discrete_6: c_uint = 65542;
pub const kAudioChannelLabel_Discrete_7: c_uint = 65543;
pub const kAudioChannelLabel_Discrete_8: c_uint = 65544;
pub const kAudioChannelLabel_Discrete_9: c_uint = 65545;
pub const kAudioChannelLabel_Discrete_10: c_uint = 65546;
pub const kAudioChannelLabel_Discrete_11: c_uint = 65547;
pub const kAudioChannelLabel_Discrete_12: c_uint = 65548;
pub const kAudioChannelLabel_Discrete_13: c_uint = 65549;
pub const kAudioChannelLabel_Discrete_14: c_uint = 65550;
pub const kAudioChannelLabel_Discrete_15: c_uint = 65551;
pub const kAudioChannelLabel_Discrete_65535: c_uint = 131071;
pub const kAudioChannelLabel_HOA_ACN: c_uint = 500;
pub const kAudioChannelLabel_HOA_ACN_0: c_uint = 131072;
pub const kAudioChannelLabel_HOA_ACN_1: c_uint = 131073;
pub const kAudioChannelLabel_HOA_ACN_2: c_uint = 131074;
pub const kAudioChannelLabel_HOA_ACN_3: c_uint = 131075;
pub const kAudioChannelLabel_HOA_ACN_4: c_uint = 131076;
pub const kAudioChannelLabel_HOA_ACN_5: c_uint = 131077;
pub const kAudioChannelLabel_HOA_ACN_6: c_uint = 131078;
pub const kAudioChannelLabel_HOA_ACN_7: c_uint = 131079;
pub const kAudioChannelLabel_HOA_ACN_8: c_uint = 131080;
pub const kAudioChannelLabel_HOA_ACN_9: c_uint = 131081;
pub const kAudioChannelLabel_HOA_ACN_10: c_uint = 131082;
pub const kAudioChannelLabel_HOA_ACN_11: c_uint = 131083;
pub const kAudioChannelLabel_HOA_ACN_12: c_uint = 131084;
pub const kAudioChannelLabel_HOA_ACN_13: c_uint = 131085;
pub const kAudioChannelLabel_HOA_ACN_14: c_uint = 131086;
pub const kAudioChannelLabel_HOA_ACN_15: c_uint = 131087;
pub const kAudioChannelLabel_HOA_ACN_65024: c_uint = 196096;
pub const kAudioChannelLabel_HOA_SN3D: c_uint = 131072;
pub const kAudioChannelLabel_HOA_N3D: c_uint = 196608;
pub const kAudioChannelLabel_Object: c_uint = 262144;
pub const kAudioChannelLabel_BeginReserved: c_uint = 4026531840;
pub const kAudioChannelLabel_EndReserved: c_uint = 4294967294;
const enum_unnamed_15 = c_uint;
pub const AudioChannelBitmap = UInt32;
pub const kAudioChannelBit_Left: c_int = 1;
pub const kAudioChannelBit_Right: c_int = 2;
pub const kAudioChannelBit_Center: c_int = 4;
pub const kAudioChannelBit_LFEScreen: c_int = 8;
pub const kAudioChannelBit_LeftSurround: c_int = 16;
pub const kAudioChannelBit_RightSurround: c_int = 32;
pub const kAudioChannelBit_LeftCenter: c_int = 64;
pub const kAudioChannelBit_RightCenter: c_int = 128;
pub const kAudioChannelBit_CenterSurround: c_int = 256;
pub const kAudioChannelBit_LeftSurroundDirect: c_int = 512;
pub const kAudioChannelBit_RightSurroundDirect: c_int = 1024;
pub const kAudioChannelBit_TopCenterSurround: c_int = 2048;
pub const kAudioChannelBit_VerticalHeightLeft: c_int = 4096;
pub const kAudioChannelBit_VerticalHeightCenter: c_int = 8192;
pub const kAudioChannelBit_VerticalHeightRight: c_int = 16384;
pub const kAudioChannelBit_TopBackLeft: c_int = 32768;
pub const kAudioChannelBit_TopBackCenter: c_int = 65536;
pub const kAudioChannelBit_TopBackRight: c_int = 131072;
pub const kAudioChannelBit_LeftTopFront: c_int = 4096;
pub const kAudioChannelBit_CenterTopFront: c_int = 8192;
pub const kAudioChannelBit_RightTopFront: c_int = 16384;
pub const kAudioChannelBit_LeftTopMiddle: c_int = 2097152;
pub const kAudioChannelBit_CenterTopMiddle: c_int = 2048;
pub const kAudioChannelBit_RightTopMiddle: c_int = 8388608;
pub const kAudioChannelBit_LeftTopRear: c_int = 16777216;
pub const kAudioChannelBit_CenterTopRear: c_int = 33554432;
pub const kAudioChannelBit_RightTopRear: c_int = 67108864;
const enum_unnamed_16 = c_uint;
pub const AudioChannelFlags = UInt32;
pub const kAudioChannelFlags_AllOff: c_int = 0;
pub const kAudioChannelFlags_RectangularCoordinates: c_int = 1;
pub const kAudioChannelFlags_SphericalCoordinates: c_int = 2;
pub const kAudioChannelFlags_Meters: c_int = 4;
const enum_unnamed_17 = c_uint;
pub const AudioChannelCoordinateIndex = UInt32;
pub const kAudioChannelCoordinates_LeftRight: c_int = 0;
pub const kAudioChannelCoordinates_BackFront: c_int = 1;
pub const kAudioChannelCoordinates_DownUp: c_int = 2;
pub const kAudioChannelCoordinates_Azimuth: c_int = 0;
pub const kAudioChannelCoordinates_Elevation: c_int = 1;
pub const kAudioChannelCoordinates_Distance: c_int = 2;
const enum_unnamed_18 = c_uint;
pub const kAudioChannelLayoutTag_UseChannelDescriptions: c_uint = 0;
pub const kAudioChannelLayoutTag_UseChannelBitmap: c_uint = 65536;
pub const kAudioChannelLayoutTag_Mono: c_uint = 6553601;
pub const kAudioChannelLayoutTag_Stereo: c_uint = 6619138;
pub const kAudioChannelLayoutTag_StereoHeadphones: c_uint = 6684674;
pub const kAudioChannelLayoutTag_MatrixStereo: c_uint = 6750210;
pub const kAudioChannelLayoutTag_MidSide: c_uint = 6815746;
pub const kAudioChannelLayoutTag_XY: c_uint = 6881282;
pub const kAudioChannelLayoutTag_Binaural: c_uint = 6946818;
pub const kAudioChannelLayoutTag_Ambisonic_B_Format: c_uint = 7012356;
pub const kAudioChannelLayoutTag_Quadraphonic: c_uint = 7077892;
pub const kAudioChannelLayoutTag_Pentagonal: c_uint = 7143429;
pub const kAudioChannelLayoutTag_Hexagonal: c_uint = 7208966;
pub const kAudioChannelLayoutTag_Octagonal: c_uint = 7274504;
pub const kAudioChannelLayoutTag_Cube: c_uint = 7340040;
pub const kAudioChannelLayoutTag_MPEG_1_0: c_uint = 6553601;
pub const kAudioChannelLayoutTag_MPEG_2_0: c_uint = 6619138;
pub const kAudioChannelLayoutTag_MPEG_3_0_A: c_uint = 7405571;
pub const kAudioChannelLayoutTag_MPEG_3_0_B: c_uint = 7471107;
pub const kAudioChannelLayoutTag_MPEG_4_0_A: c_uint = 7536644;
pub const kAudioChannelLayoutTag_MPEG_4_0_B: c_uint = 7602180;
pub const kAudioChannelLayoutTag_MPEG_5_0_A: c_uint = 7667717;
pub const kAudioChannelLayoutTag_MPEG_5_0_B: c_uint = 7733253;
pub const kAudioChannelLayoutTag_MPEG_5_0_C: c_uint = 7798789;
pub const kAudioChannelLayoutTag_MPEG_5_0_D: c_uint = 7864325;
pub const kAudioChannelLayoutTag_MPEG_5_1_A: c_uint = 7929862;
pub const kAudioChannelLayoutTag_MPEG_5_1_B: c_uint = 7995398;
pub const kAudioChannelLayoutTag_MPEG_5_1_C: c_uint = 8060934;
pub const kAudioChannelLayoutTag_MPEG_5_1_D: c_uint = 8126470;
pub const kAudioChannelLayoutTag_MPEG_6_1_A: c_uint = 8192007;
pub const kAudioChannelLayoutTag_MPEG_7_1_A: c_uint = 8257544;
pub const kAudioChannelLayoutTag_MPEG_7_1_B: c_uint = 8323080;
pub const kAudioChannelLayoutTag_MPEG_7_1_C: c_uint = 8388616;
pub const kAudioChannelLayoutTag_Emagic_Default_7_1: c_uint = 8454152;
pub const kAudioChannelLayoutTag_SMPTE_DTV: c_uint = 8519688;
pub const kAudioChannelLayoutTag_ITU_1_0: c_uint = 6553601;
pub const kAudioChannelLayoutTag_ITU_2_0: c_uint = 6619138;
pub const kAudioChannelLayoutTag_ITU_2_1: c_uint = 8585219;
pub const kAudioChannelLayoutTag_ITU_2_2: c_uint = 8650756;
pub const kAudioChannelLayoutTag_ITU_3_0: c_uint = 7405571;
pub const kAudioChannelLayoutTag_ITU_3_1: c_uint = 7536644;
pub const kAudioChannelLayoutTag_ITU_3_2: c_uint = 7667717;
pub const kAudioChannelLayoutTag_ITU_3_2_1: c_uint = 7929862;
pub const kAudioChannelLayoutTag_ITU_3_4_1: c_uint = 8388616;
pub const kAudioChannelLayoutTag_DVD_0: c_uint = 6553601;
pub const kAudioChannelLayoutTag_DVD_1: c_uint = 6619138;
pub const kAudioChannelLayoutTag_DVD_2: c_uint = 8585219;
pub const kAudioChannelLayoutTag_DVD_3: c_uint = 8650756;
pub const kAudioChannelLayoutTag_DVD_4: c_uint = 8716291;
pub const kAudioChannelLayoutTag_DVD_5: c_uint = 8781828;
pub const kAudioChannelLayoutTag_DVD_6: c_uint = 8847365;
pub const kAudioChannelLayoutTag_DVD_7: c_uint = 7405571;
pub const kAudioChannelLayoutTag_DVD_8: c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_9: c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_10: c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_11: c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_12: c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_13: c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_14: c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_15: c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_16: c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_17: c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_18: c_uint = 9043973;
pub const kAudioChannelLayoutTag_DVD_19: c_uint = 7733253;
pub const kAudioChannelLayoutTag_DVD_20: c_uint = 7995398;
pub const kAudioChannelLayoutTag_AudioUnit_4: c_uint = 7077892;
pub const kAudioChannelLayoutTag_AudioUnit_5: c_uint = 7143429;
pub const kAudioChannelLayoutTag_AudioUnit_6: c_uint = 7208966;
pub const kAudioChannelLayoutTag_AudioUnit_8: c_uint = 7274504;
pub const kAudioChannelLayoutTag_AudioUnit_5_0: c_uint = 7733253;
pub const kAudioChannelLayoutTag_AudioUnit_6_0: c_uint = 9109510;
pub const kAudioChannelLayoutTag_AudioUnit_7_0: c_uint = 9175047;
pub const kAudioChannelLayoutTag_AudioUnit_7_0_Front: c_uint = 9699335;
pub const kAudioChannelLayoutTag_AudioUnit_5_1: c_uint = 7929862;
pub const kAudioChannelLayoutTag_AudioUnit_6_1: c_uint = 8192007;
pub const kAudioChannelLayoutTag_AudioUnit_7_1: c_uint = 8388616;
pub const kAudioChannelLayoutTag_AudioUnit_7_1_Front: c_uint = 8257544;
pub const kAudioChannelLayoutTag_AAC_3_0: c_uint = 7471107;
pub const kAudioChannelLayoutTag_AAC_Quadraphonic: c_uint = 7077892;
pub const kAudioChannelLayoutTag_AAC_4_0: c_uint = 7602180;
pub const kAudioChannelLayoutTag_AAC_5_0: c_uint = 7864325;
pub const kAudioChannelLayoutTag_AAC_5_1: c_uint = 8126470;
pub const kAudioChannelLayoutTag_AAC_6_0: c_uint = 9240582;
pub const kAudioChannelLayoutTag_AAC_6_1: c_uint = 9306119;
pub const kAudioChannelLayoutTag_AAC_7_0: c_uint = 9371655;
pub const kAudioChannelLayoutTag_AAC_7_1: c_uint = 8323080;
pub const kAudioChannelLayoutTag_AAC_7_1_B: c_uint = 11993096;
pub const kAudioChannelLayoutTag_AAC_7_1_C: c_uint = 12058632;
pub const kAudioChannelLayoutTag_AAC_Octagonal: c_uint = 9437192;
pub const kAudioChannelLayoutTag_TMH_10_2_std: c_uint = 9502736;
pub const kAudioChannelLayoutTag_TMH_10_2_full: c_uint = 9568277;
pub const kAudioChannelLayoutTag_AC3_1_0_1: c_uint = 9764866;
pub const kAudioChannelLayoutTag_AC3_3_0: c_uint = 9830403;
pub const kAudioChannelLayoutTag_AC3_3_1: c_uint = 9895940;
pub const kAudioChannelLayoutTag_AC3_3_0_1: c_uint = 9961476;
pub const kAudioChannelLayoutTag_AC3_2_1_1: c_uint = 10027012;
pub const kAudioChannelLayoutTag_AC3_3_1_1: c_uint = 10092549;
pub const kAudioChannelLayoutTag_EAC_6_0_A: c_uint = 10158086;
pub const kAudioChannelLayoutTag_EAC_7_0_A: c_uint = 10223623;
pub const kAudioChannelLayoutTag_EAC3_6_1_A: c_uint = 10289159;
pub const kAudioChannelLayoutTag_EAC3_6_1_B: c_uint = 10354695;
pub const kAudioChannelLayoutTag_EAC3_6_1_C: c_uint = 10420231;
pub const kAudioChannelLayoutTag_EAC3_7_1_A: c_uint = 10485768;
pub const kAudioChannelLayoutTag_EAC3_7_1_B: c_uint = 10551304;
pub const kAudioChannelLayoutTag_EAC3_7_1_C: c_uint = 10616840;
pub const kAudioChannelLayoutTag_EAC3_7_1_D: c_uint = 10682376;
pub const kAudioChannelLayoutTag_EAC3_7_1_E: c_uint = 10747912;
pub const kAudioChannelLayoutTag_EAC3_7_1_F: c_uint = 10813448;
pub const kAudioChannelLayoutTag_EAC3_7_1_G: c_uint = 10878984;
pub const kAudioChannelLayoutTag_EAC3_7_1_H: c_uint = 10944520;
pub const kAudioChannelLayoutTag_DTS_3_1: c_uint = 11010052;
pub const kAudioChannelLayoutTag_DTS_4_1: c_uint = 11075589;
pub const kAudioChannelLayoutTag_DTS_6_0_A: c_uint = 11141126;
pub const kAudioChannelLayoutTag_DTS_6_0_B: c_uint = 11206662;
pub const kAudioChannelLayoutTag_DTS_6_0_C: c_uint = 11272198;
pub const kAudioChannelLayoutTag_DTS_6_1_A: c_uint = 11337735;
pub const kAudioChannelLayoutTag_DTS_6_1_B: c_uint = 11403271;
pub const kAudioChannelLayoutTag_DTS_6_1_C: c_uint = 11468807;
pub const kAudioChannelLayoutTag_DTS_7_0: c_uint = 11534343;
pub const kAudioChannelLayoutTag_DTS_7_1: c_uint = 11599880;
pub const kAudioChannelLayoutTag_DTS_8_0_A: c_uint = 11665416;
pub const kAudioChannelLayoutTag_DTS_8_0_B: c_uint = 11730952;
pub const kAudioChannelLayoutTag_DTS_8_1_A: c_uint = 11796489;
pub const kAudioChannelLayoutTag_DTS_8_1_B: c_uint = 11862025;
pub const kAudioChannelLayoutTag_DTS_6_1_D: c_uint = 11927559;
pub const kAudioChannelLayoutTag_WAVE_2_1: c_uint = 8716291;
pub const kAudioChannelLayoutTag_WAVE_3_0: c_uint = 7405571;
pub const kAudioChannelLayoutTag_WAVE_4_0_A: c_uint = 8650756;
pub const kAudioChannelLayoutTag_WAVE_4_0_B: c_uint = 12124164;
pub const kAudioChannelLayoutTag_WAVE_5_0_A: c_uint = 7667717;
pub const kAudioChannelLayoutTag_WAVE_5_0_B: c_uint = 12189701;
pub const kAudioChannelLayoutTag_WAVE_5_1_A: c_uint = 7929862;
pub const kAudioChannelLayoutTag_WAVE_5_1_B: c_uint = 12255238;
pub const kAudioChannelLayoutTag_WAVE_6_1: c_uint = 12320775;
pub const kAudioChannelLayoutTag_WAVE_7_1: c_uint = 12386312;
pub const kAudioChannelLayoutTag_HOA_ACN_SN3D: c_uint = 12451840;
pub const kAudioChannelLayoutTag_HOA_ACN_N3D: c_uint = 12517376;
pub const kAudioChannelLayoutTag_Atmos_5_1_2: c_uint = 12713992;
pub const kAudioChannelLayoutTag_Atmos_5_1_4: c_uint = 12779530;
pub const kAudioChannelLayoutTag_Atmos_7_1_2: c_uint = 12845066;
pub const kAudioChannelLayoutTag_Atmos_7_1_4: c_uint = 12582924;
pub const kAudioChannelLayoutTag_Atmos_9_1_6: c_uint = 12648464;
pub const kAudioChannelLayoutTag_Logic_Mono: c_uint = 6553601;
pub const kAudioChannelLayoutTag_Logic_Stereo: c_uint = 6619138;
pub const kAudioChannelLayoutTag_Logic_Quadraphonic: c_uint = 7077892;
pub const kAudioChannelLayoutTag_Logic_4_0_A: c_uint = 7536644;
pub const kAudioChannelLayoutTag_Logic_4_0_B: c_uint = 7602180;
pub const kAudioChannelLayoutTag_Logic_4_0_C: c_uint = 12910596;
pub const kAudioChannelLayoutTag_Logic_5_0_A: c_uint = 7667717;
pub const kAudioChannelLayoutTag_Logic_5_0_B: c_uint = 7733253;
pub const kAudioChannelLayoutTag_Logic_5_0_C: c_uint = 7798789;
pub const kAudioChannelLayoutTag_Logic_5_0_D: c_uint = 7864325;
pub const kAudioChannelLayoutTag_Logic_5_1_A: c_uint = 7929862;
pub const kAudioChannelLayoutTag_Logic_5_1_B: c_uint = 7995398;
pub const kAudioChannelLayoutTag_Logic_5_1_C: c_uint = 8060934;
pub const kAudioChannelLayoutTag_Logic_5_1_D: c_uint = 8126470;
pub const kAudioChannelLayoutTag_Logic_6_0_A: c_uint = 9240582;
pub const kAudioChannelLayoutTag_Logic_6_0_B: c_uint = 12976134;
pub const kAudioChannelLayoutTag_Logic_6_0_C: c_uint = 9109510;
pub const kAudioChannelLayoutTag_Logic_6_1_A: c_uint = 9306119;
pub const kAudioChannelLayoutTag_Logic_6_1_B: c_uint = 13041671;
pub const kAudioChannelLayoutTag_Logic_6_1_C: c_uint = 8192007;
pub const kAudioChannelLayoutTag_Logic_6_1_D: c_uint = 13107207;
pub const kAudioChannelLayoutTag_Logic_7_1_A: c_uint = 8388616;
pub const kAudioChannelLayoutTag_Logic_7_1_B: c_uint = 13172744;
pub const kAudioChannelLayoutTag_Logic_7_1_C: c_uint = 8388616;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_A: c_uint = 8257544;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_B: c_uint = 8323080;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_C: c_uint = 8454152;
pub const kAudioChannelLayoutTag_Logic_Atmos_5_1_2: c_uint = 12713992;
pub const kAudioChannelLayoutTag_Logic_Atmos_5_1_4: c_uint = 12779530;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_2: c_uint = 12845066;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_4_A: c_uint = 12582924;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_4_B: c_uint = 13238284;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_6: c_uint = 13303822;
pub const kAudioChannelLayoutTag_DiscreteInOrder: c_uint = 9633792;
pub const kAudioChannelLayoutTag_CICP_1: c_uint = 6553601;
pub const kAudioChannelLayoutTag_CICP_2: c_uint = 6619138;
pub const kAudioChannelLayoutTag_CICP_3: c_uint = 7405571;
pub const kAudioChannelLayoutTag_CICP_4: c_uint = 7536644;
pub const kAudioChannelLayoutTag_CICP_5: c_uint = 7667717;
pub const kAudioChannelLayoutTag_CICP_6: c_uint = 7929862;
pub const kAudioChannelLayoutTag_CICP_7: c_uint = 8323080;
pub const kAudioChannelLayoutTag_CICP_9: c_uint = 8585219;
pub const kAudioChannelLayoutTag_CICP_10: c_uint = 8650756;
pub const kAudioChannelLayoutTag_CICP_11: c_uint = 8192007;
pub const kAudioChannelLayoutTag_CICP_12: c_uint = 8388616;
pub const kAudioChannelLayoutTag_CICP_13: c_uint = 13369368;
pub const kAudioChannelLayoutTag_CICP_14: c_uint = 13434888;
pub const kAudioChannelLayoutTag_CICP_15: c_uint = 13500428;
pub const kAudioChannelLayoutTag_CICP_16: c_uint = 13565962;
pub const kAudioChannelLayoutTag_CICP_17: c_uint = 13631500;
pub const kAudioChannelLayoutTag_CICP_18: c_uint = 13697038;
pub const kAudioChannelLayoutTag_CICP_19: c_uint = 13762572;
pub const kAudioChannelLayoutTag_CICP_20: c_uint = 13828110;
pub const kAudioChannelLayoutTag_Ogg_3_0: c_uint = 9830403;
pub const kAudioChannelLayoutTag_Ogg_4_0: c_uint = 12124164;
pub const kAudioChannelLayoutTag_Ogg_5_0: c_uint = 13893637;
pub const kAudioChannelLayoutTag_Ogg_5_1: c_uint = 13959174;
pub const kAudioChannelLayoutTag_Ogg_6_1: c_uint = 14024711;
pub const kAudioChannelLayoutTag_Ogg_7_1: c_uint = 14090248;
pub const kAudioChannelLayoutTag_MPEG_5_0_E: c_uint = 14155781;
pub const kAudioChannelLayoutTag_MPEG_5_1_E: c_uint = 14221318;
pub const kAudioChannelLayoutTag_MPEG_6_1_B: c_uint = 14286855;
pub const kAudioChannelLayoutTag_MPEG_7_1_D: c_uint = 14352392;
pub const kAudioChannelLayoutTag_BeginReserved: c_uint = 4026531840;
pub const kAudioChannelLayoutTag_EndReserved: c_uint = 4294901759;
pub const kAudioChannelLayoutTag_Unknown: c_uint = 4294901760;
const enum_unnamed_19 = c_uint;
pub const struct_AudioChannelDescription = extern struct {
    mChannelLabel: AudioChannelLabel = @import("std").mem.zeroes(AudioChannelLabel),
    mChannelFlags: AudioChannelFlags = @import("std").mem.zeroes(AudioChannelFlags),
    mCoordinates: [3]Float32 = @import("std").mem.zeroes([3]Float32),
};
pub const AudioChannelDescription = struct_AudioChannelDescription;
pub const struct_AudioChannelLayout = extern struct {
    mChannelLayoutTag: AudioChannelLayoutTag = @import("std").mem.zeroes(AudioChannelLayoutTag),
    mChannelBitmap: AudioChannelBitmap = @import("std").mem.zeroes(AudioChannelBitmap),
    mNumberChannelDescriptions: UInt32 = @import("std").mem.zeroes(UInt32),
    mChannelDescriptions: [1]AudioChannelDescription = @import("std").mem.zeroes([1]AudioChannelDescription),
};
pub const AudioChannelLayout = struct_AudioChannelLayout;
pub inline fn AudioChannelLayoutTag_GetNumberOfChannels(arg_inLayoutTag: AudioChannelLayoutTag) UInt32 {
    var inLayoutTag = arg_inLayoutTag;
    _ = &inLayoutTag;
    return @as(UInt32, @bitCast(inLayoutTag & @as(AudioChannelLayoutTag, @bitCast(@as(c_int, 65535)))));
}
pub const struct_AudioFormatListItem = extern struct {
    mASBD: AudioStreamBasicDescription = @import("std").mem.zeroes(AudioStreamBasicDescription),
    mChannelLayoutTag: AudioChannelLayoutTag = @import("std").mem.zeroes(AudioChannelLayoutTag),
};
pub const AudioFormatListItem = struct_AudioFormatListItem;
pub const MPEG4ObjectID = c_long;
pub const kMPEG4Object_AAC_Main: c_int = 1;
pub const kMPEG4Object_AAC_LC: c_int = 2;
pub const kMPEG4Object_AAC_SSR: c_int = 3;
pub const kMPEG4Object_AAC_LTP: c_int = 4;
pub const kMPEG4Object_AAC_SBR: c_int = 5;
pub const kMPEG4Object_AAC_Scalable: c_int = 6;
pub const kMPEG4Object_TwinVQ: c_int = 7;
pub const kMPEG4Object_CELP: c_int = 8;
pub const kMPEG4Object_HVXC: c_int = 9;
const enum_unnamed_20 = c_uint;
pub const AVAudioInteger = c_long;
pub const AVAudioUInteger = c_ulong;
pub const AudioSessionID = u32;
pub const AVAudioSessionErrorCode = AVAudioInteger;
pub const AVAudioSessionErrorCodeNone: c_int = 0;
pub const AVAudioSessionErrorCodeMediaServicesFailed: c_int = 1836282486;
pub const AVAudioSessionErrorCodeIsBusy: c_int = 560030580;
pub const AVAudioSessionErrorCodeIncompatibleCategory: c_int = 560161140;
pub const AVAudioSessionErrorCodeCannotInterruptOthers: c_int = 560557684;
pub const AVAudioSessionErrorCodeMissingEntitlement: c_int = 1701737535;
pub const AVAudioSessionErrorCodeSiriIsRecording: c_int = 1936290409;
pub const AVAudioSessionErrorCodeCannotStartPlaying: c_int = 561015905;
pub const AVAudioSessionErrorCodeCannotStartRecording: c_int = 561145187;
pub const AVAudioSessionErrorCodeBadParam: c_int = -50;
pub const AVAudioSessionErrorCodeInsufficientPriority: c_int = 561017449;
pub const AVAudioSessionErrorCodeResourceNotAvailable: c_int = 561145203;
pub const AVAudioSessionErrorCodeUnspecified: c_int = 2003329396;
pub const AVAudioSessionErrorCodeExpiredSession: c_int = 561210739;
pub const AVAudioSessionErrorCodeSessionNotActive: c_int = 1768841571;
const enum_unnamed_21 = c_int;
pub const AVAudioSessionErrorInsufficientPriority: c_int = 561017449;
const enum_unnamed_22 = c_uint;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __builtin_va_list;
pub extern fn __assert_rtn([*c]const u8, [*c]const u8, c_int, [*c]const u8) noreturn;
pub const __darwin_nl_item = c_int;
pub const __darwin_wctrans_t = c_int;
pub const __darwin_wctype_t = __uint32_t;
pub const ct_rune_t = __darwin_ct_rune_t;
pub const rune_t = __darwin_rune_t;
pub const wint_t = __darwin_wint_t;
pub const _RuneEntry = extern struct {
    __min: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __max: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __map: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __types: [*c]__uint32_t = @import("std").mem.zeroes([*c]__uint32_t),
};
pub const _RuneRange = extern struct {
    __nranges: c_int = @import("std").mem.zeroes(c_int),
    __ranges: [*c]_RuneEntry = @import("std").mem.zeroes([*c]_RuneEntry),
};
pub const _RuneCharClass = extern struct {
    __name: [14]u8 = @import("std").mem.zeroes([14]u8),
    __mask: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const _RuneLocale = extern struct {
    __magic: [8]u8 = @import("std").mem.zeroes([8]u8),
    __encoding: [32]u8 = @import("std").mem.zeroes([32]u8),
    __sgetrune: ?*const fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.c) __darwin_rune_t = @import("std").mem.zeroes(?*const fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.c) __darwin_rune_t),
    __sputrune: ?*const fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.c) c_int),
    __invalid_rune: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __runetype: [256]__uint32_t = @import("std").mem.zeroes([256]__uint32_t),
    __maplower: [256]__darwin_rune_t = @import("std").mem.zeroes([256]__darwin_rune_t),
    __mapupper: [256]__darwin_rune_t = @import("std").mem.zeroes([256]__darwin_rune_t),
    __runetype_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __maplower_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __mapupper_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __variable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    __variable_len: c_int = @import("std").mem.zeroes(c_int),
    __ncharclasses: c_int = @import("std").mem.zeroes(c_int),
    __charclasses: [*c]_RuneCharClass = @import("std").mem.zeroes([*c]_RuneCharClass),
};
pub extern var _DefaultRuneLocale: _RuneLocale;
pub extern var _CurrentRuneLocale: [*c]_RuneLocale;
pub extern fn ___runetype(__darwin_ct_rune_t) c_ulong;
pub extern fn ___tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn ___toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn isascii(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return @intFromBool((_c & ~@as(c_int, 127)) == @as(c_int, 0));
}
pub extern fn __maskrune(__darwin_ct_rune_t, c_ulong) c_int;
pub fn __istype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    var _f = arg__f;
    _ = &_f;
    return if (isascii(_c) != 0) @intFromBool(!!((@as(c_ulong, @bitCast(@as(c_ulong, _DefaultRuneLocale.__runetype[@as(c_uint, @intCast(_c))]))) & _f) != 0)) else @intFromBool(!!(__maskrune(_c, _f) != 0));
}
pub fn __isctype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.c) __darwin_ct_rune_t {
    var _c = arg__c;
    _ = &_c;
    var _f = arg__f;
    _ = &_f;
    return if ((_c < @as(c_int, 0)) or (_c >= (@as(c_int, 1) << @intCast(8)))) @as(c_int, 0) else @intFromBool(!!((@as(c_ulong, @bitCast(@as(c_ulong, _DefaultRuneLocale.__runetype[@as(c_uint, @intCast(_c))]))) & _f) != 0));
}
pub extern fn __toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn __tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn __wcwidth(arg__c: __darwin_ct_rune_t) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    var _x: c_uint = undefined;
    _ = &_x;
    if (_c == @as(c_int, 0)) return @as(c_int, 0);
    _x = @as(c_uint, @bitCast(__maskrune(_c, @as(c_ulong, @bitCast(@as(c_long, 3758096384) | @as(c_long, 262144))))));
    if ((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 3758096384)) != @as(c_long, @bitCast(@as(c_long, @as(c_int, 0))))) return @as(c_int, @bitCast(@as(c_int, @truncate((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 3758096384)) >> @intCast(30)))));
    return if ((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 262144)) != @as(c_long, @bitCast(@as(c_long, @as(c_int, 0))))) @as(c_int, 1) else -@as(c_int, 1);
}
pub fn isalnum(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 256) | @as(c_long, 1024))));
}
pub fn isalpha(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 256))));
}
pub fn isblank(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 131072))));
}
pub fn iscntrl(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 512))));
}
pub fn isdigit(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __isctype(_c, @as(c_ulong, @bitCast(@as(c_long, 1024))));
}
pub fn isgraph(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 2048))));
}
pub fn islower(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 4096))));
}
pub fn isprint(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 262144))));
}
pub fn ispunct(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 8192))));
}
pub fn isspace(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 16384))));
}
pub fn isupper(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 32768))));
}
pub fn isxdigit(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __isctype(_c, @as(c_ulong, @bitCast(@as(c_long, 65536))));
}
pub fn toascii(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return _c & @as(c_int, 127);
}
pub fn tolower(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __tolower(_c);
}
pub fn toupper(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __toupper(_c);
}
pub fn digittoint(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __maskrune(_c, @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 15)))));
}
pub fn ishexnumber(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 65536))));
}
pub fn isideogram(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 524288))));
}
pub fn isnumber(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 1024))));
}
pub fn isphonogram(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 2097152))));
}
pub fn isrune(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 4294967280))));
}
pub fn isspecial(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 1048576))));
}
pub extern fn __error() [*c]c_int;
pub const struct_lconv = extern struct {
    decimal_point: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    thousands_sep: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    grouping: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    int_curr_symbol: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    currency_symbol: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_decimal_point: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_thousands_sep: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_grouping: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    positive_sign: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    negative_sign: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    int_frac_digits: u8 = @import("std").mem.zeroes(u8),
    frac_digits: u8 = @import("std").mem.zeroes(u8),
    p_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    p_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    n_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    n_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    p_sign_posn: u8 = @import("std").mem.zeroes(u8),
    n_sign_posn: u8 = @import("std").mem.zeroes(u8),
    int_p_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    int_n_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    int_p_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    int_n_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    int_p_sign_posn: u8 = @import("std").mem.zeroes(u8),
    int_n_sign_posn: u8 = @import("std").mem.zeroes(u8),
};
pub const struct__xlocale = opaque {};
pub const locale_t = ?*struct__xlocale;
pub extern fn duplocale(locale_t) locale_t;
pub extern fn freelocale(locale_t) c_int;
pub extern fn localeconv() [*c]struct_lconv;
pub extern fn newlocale(c_int, [*c]const u8, locale_t) locale_t;
pub extern fn uselocale(locale_t) locale_t;
pub extern fn setlocale(c_int, [*c]const u8) [*c]u8;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __math_errhandling() c_int;
pub extern fn __fpclassifyf(f32) c_int;
pub extern fn __fpclassifyd(f64) c_int;
pub extern fn __fpclassifyl(c_longdouble) c_int;
pub inline fn __inline_isfinitef(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__x == __x) and (__builtin_fabsf(__x) != __builtin_inff()));
}
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:200:49: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:199:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinited(arg___x: f64) c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:203:26: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:202:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinitel(arg___x: c_longdouble) c_int;
pub inline fn __inline_isinff(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__builtin_fabsf(__x) == __builtin_inff());
}
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:209:35: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:208:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfd(arg___x: f64) c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:212:12: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:211:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfl(arg___x: c_longdouble) c_int;
pub inline fn __inline_isnanf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnand(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnanl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnormalf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__inline_isfinitef(__x) != 0) and (__builtin_fabsf(__x) >= 0.000000000000000000000000000000000000011754943508222875));
}
pub inline fn __inline_isnormald(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__inline_isfinited(__x) != 0) and (__builtin_fabs(__x) >= 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014));
}
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:256:39: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:255:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isnormall(arg___x: c_longdouble) c_int;
pub inline fn __inline_signbitf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_23 = extern union {
        __f: f32,
        __u: c_uint,
    };
    _ = &union_unnamed_23;
    var __u: union_unnamed_23 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(__u.__u >> @intCast(31)));
}
pub inline fn __inline_signbitd(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_24 = extern union {
        __f: f64,
        __u: c_ulonglong,
    };
    _ = &union_unnamed_24;
    var __u: union_unnamed_24 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(@as(c_uint, @truncate(__u.__u >> @intCast(63)))));
}
pub inline fn __inline_signbitl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_25 = extern union {
        __f: c_longdouble,
        __u: c_ulonglong,
    };
    _ = &union_unnamed_25;
    var __u: union_unnamed_25 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(@as(c_uint, @truncate(__u.__u >> @intCast(63)))));
}
pub extern fn acosf(f32) f32;
pub extern fn acos(f64) f64;
pub extern fn acosl(c_longdouble) c_longdouble;
pub extern fn asinf(f32) f32;
pub extern fn asin(f64) f64;
pub extern fn asinl(c_longdouble) c_longdouble;
pub extern fn atanf(f32) f32;
pub extern fn atan(f64) f64;
pub extern fn atanl(c_longdouble) c_longdouble;
pub extern fn atan2f(f32, f32) f32;
pub extern fn atan2(f64, f64) f64;
pub extern fn atan2l(c_longdouble, c_longdouble) c_longdouble;
pub extern fn cosf(f32) f32;
pub extern fn cos(f64) f64;
pub extern fn cosl(c_longdouble) c_longdouble;
pub extern fn sinf(f32) f32;
pub extern fn sin(f64) f64;
pub extern fn sinl(c_longdouble) c_longdouble;
pub extern fn tanf(f32) f32;
pub extern fn tan(f64) f64;
pub extern fn tanl(c_longdouble) c_longdouble;
pub extern fn acoshf(f32) f32;
pub extern fn acosh(f64) f64;
pub extern fn acoshl(c_longdouble) c_longdouble;
pub extern fn asinhf(f32) f32;
pub extern fn asinh(f64) f64;
pub extern fn asinhl(c_longdouble) c_longdouble;
pub extern fn atanhf(f32) f32;
pub extern fn atanh(f64) f64;
pub extern fn atanhl(c_longdouble) c_longdouble;
pub extern fn coshf(f32) f32;
pub extern fn cosh(f64) f64;
pub extern fn coshl(c_longdouble) c_longdouble;
pub extern fn sinhf(f32) f32;
pub extern fn sinh(f64) f64;
pub extern fn sinhl(c_longdouble) c_longdouble;
pub extern fn tanhf(f32) f32;
pub extern fn tanh(f64) f64;
pub extern fn tanhl(c_longdouble) c_longdouble;
pub extern fn expf(f32) f32;
pub extern fn exp(f64) f64;
pub extern fn expl(c_longdouble) c_longdouble;
pub extern fn exp2f(f32) f32;
pub extern fn exp2(f64) f64;
pub extern fn exp2l(c_longdouble) c_longdouble;
pub extern fn expm1f(f32) f32;
pub extern fn expm1(f64) f64;
pub extern fn expm1l(c_longdouble) c_longdouble;
pub extern fn logf(f32) f32;
pub extern fn log(f64) f64;
pub extern fn logl(c_longdouble) c_longdouble;
pub extern fn log10f(f32) f32;
pub extern fn log10(f64) f64;
pub extern fn log10l(c_longdouble) c_longdouble;
pub extern fn log2f(f32) f32;
pub extern fn log2(f64) f64;
pub extern fn log2l(c_longdouble) c_longdouble;
pub extern fn log1pf(f32) f32;
pub extern fn log1p(f64) f64;
pub extern fn log1pl(c_longdouble) c_longdouble;
pub extern fn logbf(f32) f32;
pub extern fn logb(f64) f64;
pub extern fn logbl(c_longdouble) c_longdouble;
pub extern fn modff(f32, [*c]f32) f32;
pub extern fn modf(f64, [*c]f64) f64;
pub extern fn modfl(c_longdouble, [*c]c_longdouble) c_longdouble;
pub extern fn ldexpf(f32, c_int) f32;
pub extern fn ldexp(f64, c_int) f64;
pub extern fn ldexpl(c_longdouble, c_int) c_longdouble;
pub extern fn frexpf(f32, [*c]c_int) f32;
pub extern fn frexp(f64, [*c]c_int) f64;
pub extern fn frexpl(c_longdouble, [*c]c_int) c_longdouble;
pub extern fn ilogbf(f32) c_int;
pub extern fn ilogb(f64) c_int;
pub extern fn ilogbl(c_longdouble) c_int;
pub extern fn scalbnf(f32, c_int) f32;
pub extern fn scalbn(f64, c_int) f64;
pub extern fn scalbnl(c_longdouble, c_int) c_longdouble;
pub extern fn scalblnf(f32, c_long) f32;
pub extern fn scalbln(f64, c_long) f64;
pub extern fn scalblnl(c_longdouble, c_long) c_longdouble;
pub extern fn fabsf(f32) f32;
pub extern fn fabs(f64) f64;
pub extern fn fabsl(c_longdouble) c_longdouble;
pub extern fn cbrtf(f32) f32;
pub extern fn cbrt(f64) f64;
pub extern fn cbrtl(c_longdouble) c_longdouble;
pub extern fn hypotf(f32, f32) f32;
pub extern fn hypot(f64, f64) f64;
pub extern fn hypotl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn powf(f32, f32) f32;
pub extern fn pow(f64, f64) f64;
pub extern fn powl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sqrtf(f32) f32;
pub extern fn sqrt(f64) f64;
pub extern fn sqrtl(c_longdouble) c_longdouble;
pub extern fn erff(f32) f32;
pub extern fn erf(f64) f64;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn erfcf(f32) f32;
pub extern fn erfc(f64) f64;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn lgammaf(f32) f32;
pub extern fn lgamma(f64) f64;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern fn tgammaf(f32) f32;
pub extern fn tgamma(f64) f64;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn ceilf(f32) f32;
pub extern fn ceil(f64) f64;
pub extern fn ceill(c_longdouble) c_longdouble;
pub extern fn floorf(f32) f32;
pub extern fn floor(f64) f64;
pub extern fn floorl(c_longdouble) c_longdouble;
pub extern fn nearbyintf(f32) f32;
pub extern fn nearbyint(f64) f64;
pub extern fn nearbyintl(c_longdouble) c_longdouble;
pub extern fn rintf(f32) f32;
pub extern fn rint(f64) f64;
pub extern fn rintl(c_longdouble) c_longdouble;
pub extern fn lrintf(f32) c_long;
pub extern fn lrint(f64) c_long;
pub extern fn lrintl(c_longdouble) c_long;
pub extern fn roundf(f32) f32;
pub extern fn round(f64) f64;
pub extern fn roundl(c_longdouble) c_longdouble;
pub extern fn lroundf(f32) c_long;
pub extern fn lround(f64) c_long;
pub extern fn lroundl(c_longdouble) c_long;
pub extern fn llrintf(f32) c_longlong;
pub extern fn llrint(f64) c_longlong;
pub extern fn llrintl(c_longdouble) c_longlong;
pub extern fn llroundf(f32) c_longlong;
pub extern fn llround(f64) c_longlong;
pub extern fn llroundl(c_longdouble) c_longlong;
pub extern fn truncf(f32) f32;
pub extern fn trunc(f64) f64;
pub extern fn truncl(c_longdouble) c_longdouble;
pub extern fn fmodf(f32, f32) f32;
pub extern fn fmod(f64, f64) f64;
pub extern fn fmodl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remainderf(f32, f32) f32;
pub extern fn remainder(f64, f64) f64;
pub extern fn remainderl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remquof(f32, f32, [*c]c_int) f32;
pub extern fn remquo(f64, f64, [*c]c_int) f64;
pub extern fn remquol(c_longdouble, c_longdouble, [*c]c_int) c_longdouble;
pub extern fn copysignf(f32, f32) f32;
pub extern fn copysign(f64, f64) f64;
pub extern fn copysignl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nanf([*c]const u8) f32;
pub extern fn nan([*c]const u8) f64;
pub extern fn nanl([*c]const u8) c_longdouble;
pub extern fn nextafterf(f32, f32) f32;
pub extern fn nextafter(f64, f64) f64;
pub extern fn nextafterl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nexttoward(f64, c_longdouble) f64;
pub extern fn nexttowardf(f32, c_longdouble) f32;
pub extern fn nexttowardl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fdimf(f32, f32) f32;
pub extern fn fdim(f64, f64) f64;
pub extern fn fdiml(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaxf(f32, f32) f32;
pub extern fn fmax(f64, f64) f64;
pub extern fn fmaxl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fminf(f32, f32) f32;
pub extern fn fmin(f64, f64) f64;
pub extern fn fminl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaf(f32, f32, f32) f32;
pub extern fn fma(f64, f64, f64) f64;
pub extern fn fmal(c_longdouble, c_longdouble, c_longdouble) c_longdouble;
pub extern fn __exp10f(f32) f32;
pub extern fn __exp10(f64) f64;
pub const struct___float2 = extern struct {
    __sinval: f32 = @import("std").mem.zeroes(f32),
    __cosval: f32 = @import("std").mem.zeroes(f32),
};
pub inline fn __sincosf(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___float2 = __sincosf_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub const struct___double2 = extern struct {
    __sinval: f64 = @import("std").mem.zeroes(f64),
    __cosval: f64 = @import("std").mem.zeroes(f64),
};
pub inline fn __sincos(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___double2 = __sincos_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __cospif(f32) f32;
pub extern fn __cospi(f64) f64;
pub extern fn __sinpif(f32) f32;
pub extern fn __sinpi(f64) f64;
pub extern fn __tanpif(f32) f32;
pub extern fn __tanpi(f64) f64;
pub extern fn __fabsf16(f16) f16;
pub extern fn __hypotf16(f16, f16) f16;
pub extern fn __sqrtf16(f16) f16;
pub extern fn __ceilf16(f16) f16;
pub extern fn __floorf16(f16) f16;
pub extern fn __rintf16(f16) f16;
pub extern fn __roundf16(f16) f16;
pub extern fn __truncf16(f16) f16;
pub extern fn __copysignf16(f16, f16) f16;
pub extern fn __nextafterf16(f16, f16) f16;
pub extern fn __fmaxf16(f16, f16) f16;
pub extern fn __fminf16(f16, f16) f16;
pub extern fn __fmaf16(f16, f16, f16) f16;
pub inline fn __sincospif(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___float2 = __sincospif_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub inline fn __sincospi(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___double2 = __sincospi_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __sincosf_stret(f32) struct___float2;
pub extern fn __sincos_stret(f64) struct___double2;
pub extern fn __sincospif_stret(f32) struct___float2;
pub extern fn __sincospi_stret(f64) struct___double2;
pub extern fn j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn scalb(f64, f64) f64;
pub extern var signgam: c_int;
pub const struct_exception = extern struct {
    type: c_int = @import("std").mem.zeroes(c_int),
    name: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    arg1: f64 = @import("std").mem.zeroes(f64),
    arg2: f64 = @import("std").mem.zeroes(f64),
    retval: f64 = @import("std").mem.zeroes(f64),
};
pub const jmp_buf = [48]c_int;
pub const sigjmp_buf = [49]c_int;
pub extern fn setjmp([*c]c_int) c_int;
pub extern fn longjmp([*c]c_int, c_int) noreturn;
pub extern fn _setjmp([*c]c_int) c_int;
pub extern fn _longjmp([*c]c_int, c_int) noreturn;
pub extern fn sigsetjmp([*c]c_int, c_int) c_int;
pub extern fn siglongjmp([*c]c_int, c_int) noreturn;
pub extern fn longjmperror() void;
pub const sig_atomic_t = c_int;
pub const struct___darwin_arm_exception_state = extern struct {
    __exception: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __far: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_exception_state64 = extern struct {
    __far: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __esr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __exception: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_exception_state64_v2 = extern struct {
    __far: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __esr: __uint64_t = @import("std").mem.zeroes(__uint64_t),
};
pub const struct___darwin_arm_thread_state = extern struct {
    __r: [13]__uint32_t = @import("std").mem.zeroes([13]__uint32_t),
    __sp: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __lr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __pc: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __cpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_thread_state64 = extern struct {
    __x: [29]__uint64_t = @import("std").mem.zeroes([29]__uint64_t),
    __fp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __lr: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __sp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __pc: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __cpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __pad: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_vfp_state = extern struct {
    __r: [64]__uint32_t = @import("std").mem.zeroes([64]__uint32_t),
    __fpscr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const __uint128_t = u128;
pub const struct___darwin_arm_neon_state64 = extern struct {
    __v: [32]__uint128_t = @import("std").mem.zeroes([32]__uint128_t),
    __fpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fpcr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_neon_state = extern struct {
    __v: [16]__uint128_t = @import("std").mem.zeroes([16]__uint128_t),
    __fpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fpcr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___arm_pagein_state = extern struct {
    __pagein_error: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct___darwin_arm_sme_state = extern struct {
    __svcr: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __tpidr2_el0: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __svl_b: __uint16_t = @import("std").mem.zeroes(__uint16_t),
};
pub const struct___darwin_arm_sve_z_state = extern struct {
    __z: [16][256]u8 = @import("std").mem.zeroes([16][256]u8),
};
pub const struct___darwin_arm_sve_p_state = extern struct {
    __p: [16][32]u8 = @import("std").mem.zeroes([16][32]u8),
};
pub const struct___darwin_arm_sme_za_state = extern struct {
    __za: [4096]u8 = @import("std").mem.zeroes([4096]u8),
};
pub const struct___darwin_arm_sme2_state = extern struct {
    __zt0: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const struct___arm_legacy_debug_state = extern struct {
    __bvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __bcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
};
pub const struct___darwin_arm_debug_state32 = extern struct {
    __bvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __bcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __mdscr_el1: __uint64_t = @import("std").mem.zeroes(__uint64_t),
};
pub const struct___darwin_arm_debug_state64 = extern struct {
    __bvr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __bcr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __wvr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __wcr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __mdscr_el1: __uint64_t = @import("std").mem.zeroes(__uint64_t),
};
pub const struct___darwin_arm_cpmu_state64 = extern struct {
    __ctrs: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
};
pub const struct___darwin_mcontext32 = extern struct {
    __es: struct___darwin_arm_exception_state = @import("std").mem.zeroes(struct___darwin_arm_exception_state),
    __ss: struct___darwin_arm_thread_state = @import("std").mem.zeroes(struct___darwin_arm_thread_state),
    __fs: struct___darwin_arm_vfp_state = @import("std").mem.zeroes(struct___darwin_arm_vfp_state),
};
pub const struct___darwin_mcontext64 = extern struct {
    __es: struct___darwin_arm_exception_state64 = @import("std").mem.zeroes(struct___darwin_arm_exception_state64),
    __ss: struct___darwin_arm_thread_state64 = @import("std").mem.zeroes(struct___darwin_arm_thread_state64),
    __ns: struct___darwin_arm_neon_state64 = @import("std").mem.zeroes(struct___darwin_arm_neon_state64),
};
pub const mcontext_t = [*c]struct___darwin_mcontext64;
pub const struct___darwin_sigaltstack = extern struct {
    ss_sp: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ss_size: __darwin_size_t = @import("std").mem.zeroes(__darwin_size_t),
    ss_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const stack_t = struct___darwin_sigaltstack;
pub const struct___darwin_ucontext = extern struct {
    uc_onstack: c_int = @import("std").mem.zeroes(c_int),
    uc_sigmask: __darwin_sigset_t = @import("std").mem.zeroes(__darwin_sigset_t),
    uc_stack: struct___darwin_sigaltstack = @import("std").mem.zeroes(struct___darwin_sigaltstack),
    uc_link: [*c]struct___darwin_ucontext = @import("std").mem.zeroes([*c]struct___darwin_ucontext),
    uc_mcsize: __darwin_size_t = @import("std").mem.zeroes(__darwin_size_t),
    uc_mcontext: [*c]struct___darwin_mcontext64 = @import("std").mem.zeroes([*c]struct___darwin_mcontext64),
};
pub const ucontext_t = struct___darwin_ucontext;
pub const sigset_t = __darwin_sigset_t;
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*anyopaque,
};
pub const struct_sigevent = extern struct {
    sigev_notify: c_int = @import("std").mem.zeroes(c_int),
    sigev_signo: c_int = @import("std").mem.zeroes(c_int),
    sigev_value: union_sigval = @import("std").mem.zeroes(union_sigval),
    sigev_notify_function: ?*const fn (union_sigval) callconv(.c) void = @import("std").mem.zeroes(?*const fn (union_sigval) callconv(.c) void),
    sigev_notify_attributes: [*c]pthread_attr_t = @import("std").mem.zeroes([*c]pthread_attr_t),
};
pub const struct___siginfo = extern struct {
    si_signo: c_int = @import("std").mem.zeroes(c_int),
    si_errno: c_int = @import("std").mem.zeroes(c_int),
    si_code: c_int = @import("std").mem.zeroes(c_int),
    si_pid: pid_t = @import("std").mem.zeroes(pid_t),
    si_uid: uid_t = @import("std").mem.zeroes(uid_t),
    si_status: c_int = @import("std").mem.zeroes(c_int),
    si_addr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    si_value: union_sigval = @import("std").mem.zeroes(union_sigval),
    si_band: c_long = @import("std").mem.zeroes(c_long),
    __pad: [7]c_ulong = @import("std").mem.zeroes([7]c_ulong),
};
pub const siginfo_t = struct___siginfo;
pub const union___sigaction_u = extern union {
    __sa_handler: ?*const fn (c_int) callconv(.c) void,
    __sa_sigaction: ?*const fn (c_int, [*c]struct___siginfo, ?*anyopaque) callconv(.c) void,
};
pub const struct___sigaction = extern struct {
    __sigaction_u: union___sigaction_u = @import("std").mem.zeroes(union___sigaction_u),
    sa_tramp: ?*const fn (?*anyopaque, c_int, c_int, [*c]siginfo_t, ?*anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, c_int, c_int, [*c]siginfo_t, ?*anyopaque) callconv(.c) void),
    sa_mask: sigset_t = @import("std").mem.zeroes(sigset_t),
    sa_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_sigaction = extern struct {
    __sigaction_u: union___sigaction_u = @import("std").mem.zeroes(union___sigaction_u),
    sa_mask: sigset_t = @import("std").mem.zeroes(sigset_t),
    sa_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const sig_t = ?*const fn (c_int) callconv(.c) void;
pub const struct_sigvec = extern struct {
    sv_handler: ?*const fn (c_int) callconv(.c) void = @import("std").mem.zeroes(?*const fn (c_int) callconv(.c) void),
    sv_mask: c_int = @import("std").mem.zeroes(c_int),
    sv_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_sigstack = extern struct {
    ss_sp: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    ss_onstack: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn signal(c_int, ?*const fn (c_int) callconv(.c) void) ?*const fn (c_int) callconv(.c) void;
pub extern const sys_signame: [32][*c]const u8;
pub extern const sys_siglist: [32][*c]const u8;
pub extern fn raise(c_int) c_int;
pub extern fn bsd_signal(c_int, ?*const fn (c_int) callconv(.c) void) ?*const fn (c_int) callconv(.c) void;
pub extern fn kill(pid_t, c_int) c_int;
pub extern fn killpg(pid_t, c_int) c_int;
pub extern fn pthread_kill(pthread_t, c_int) c_int;
pub extern fn pthread_sigmask(c_int, [*c]const sigset_t, [*c]sigset_t) c_int;
pub extern fn sigaction(c_int, noalias [*c]const struct_sigaction, noalias [*c]struct_sigaction) c_int;
pub extern fn sigaddset([*c]sigset_t, c_int) c_int;
pub extern fn sigaltstack(noalias [*c]const stack_t, noalias [*c]stack_t) c_int;
pub extern fn sigdelset([*c]sigset_t, c_int) c_int;
pub extern fn sigemptyset([*c]sigset_t) c_int;
pub extern fn sigfillset([*c]sigset_t) c_int;
pub extern fn sighold(c_int) c_int;
pub extern fn sigignore(c_int) c_int;
pub extern fn siginterrupt(c_int, c_int) c_int;
pub extern fn sigismember([*c]const sigset_t, c_int) c_int;
pub extern fn sigpause(c_int) c_int;
pub extern fn sigpending([*c]sigset_t) c_int;
pub extern fn sigprocmask(c_int, noalias [*c]const sigset_t, noalias [*c]sigset_t) c_int;
pub extern fn sigrelse(c_int) c_int;
pub extern fn sigset(c_int, ?*const fn (c_int) callconv(.c) void) ?*const fn (c_int) callconv(.c) void;
pub extern fn sigsuspend([*c]const sigset_t) c_int;
pub extern fn sigwait(noalias [*c]const sigset_t, noalias [*c]c_int) c_int;
pub extern fn psignal(c_int, [*c]const u8) void;
pub extern fn sigblock(c_int) c_int;
pub extern fn sigsetmask(c_int) c_int;
pub extern fn sigvec(c_int, [*c]struct_sigvec, [*c]struct_sigvec) c_int;
pub inline fn __sigbits(arg___signo: c_int) c_int {
    var __signo = arg___signo;
    _ = &__signo;
    return if (__signo > @as(c_int, 32)) @as(c_int, 0) else @as(c_int, 1) << @intCast(__signo - @as(c_int, 1));
}
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn renamex_np([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn renameatx_np(c_int, [*c]const u8, c_int, [*c]const u8, c_uint) c_int;
pub extern fn printf([*c]const u8, ...) c_int;
pub const fpos_t = __darwin_off_t;
pub const struct___sbuf = extern struct {
    _base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _size: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct___sFILEX = opaque {};
pub const struct___sFILE = extern struct {
    _p: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _r: c_int = @import("std").mem.zeroes(c_int),
    _w: c_int = @import("std").mem.zeroes(c_int),
    _flags: c_short = @import("std").mem.zeroes(c_short),
    _file: c_short = @import("std").mem.zeroes(c_short),
    _bf: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _lbfsize: c_int = @import("std").mem.zeroes(c_int),
    _cookie: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _close: ?*const fn (?*anyopaque) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) c_int),
    _read: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.c) c_int),
    _seek: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.c) fpos_t = @import("std").mem.zeroes(?*const fn (?*anyopaque, fpos_t, c_int) callconv(.c) fpos_t),
    _write: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int),
    _ub: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _extra: ?*struct___sFILEX = @import("std").mem.zeroes(?*struct___sFILEX),
    _ur: c_int = @import("std").mem.zeroes(c_int),
    _ubuf: [3]u8 = @import("std").mem.zeroes([3]u8),
    _nbuf: [1]u8 = @import("std").mem.zeroes([1]u8),
    _lb: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _blksize: c_int = @import("std").mem.zeroes(c_int),
    _offset: fpos_t = @import("std").mem.zeroes(fpos_t),
};
pub const FILE = struct___sFILE;
pub extern var __stdinp: [*c]FILE;
pub extern var __stdoutp: [*c]FILE;
pub extern var __stderrp: [*c]FILE;
pub extern fn clearerr([*c]FILE) void;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgetpos(noalias [*c]FILE, [*c]fpos_t) c_int;
pub extern fn fgets(noalias [*c]u8, __size: c_int, [*c]FILE) [*c]u8;
pub extern fn fopen(__filename: [*c]const u8, __mode: [*c]const u8) [*c]FILE;
pub extern fn fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn perror([*c]const u8) void;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn rewind([*c]FILE) void;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, __size: usize) c_int;
pub extern fn sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub extern fn vfprintf(noalias [*c]FILE, noalias [*c]const u8, __builtin_va_list) c_int;
pub extern fn vprintf(noalias [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsprintf(noalias [*c]u8, noalias [*c]const u8, __builtin_va_list) c_int;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn __srget([*c]FILE) c_int;
pub extern fn __svfscanf([*c]FILE, [*c]const u8, va_list) c_int;
pub extern fn __swbuf(c_int, [*c]FILE) c_int;
pub inline fn __sputc(arg__c: c_int, arg__p: [*c]FILE) c_int {
    var _c = arg__c;
    _ = &_c;
    var _p = arg__p;
    _ = &_p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@as(c_int, @bitCast(@as(c_uint, @as(u8, @bitCast(@as(i8, @truncate(_c))))))) != @as(c_int, '\n')))) return @as(c_int, @bitCast(@as(c_uint, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(_c))));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    }))) else return __swbuf(_c, _p);
    return 0;
}
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn tempnam(__dir: [*c]const u8, __prefix: [*c]const u8) [*c]u8;
pub extern fn fseeko(__stream: [*c]FILE, __offset: off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) off_t;
pub extern fn snprintf(noalias __str: [*c]u8, __size: c_ulong, noalias __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsnprintf(noalias __str: [*c]u8, __size: c_ulong, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsscanf(noalias __str: [*c]const u8, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn vdprintf(c_int, noalias [*c]const u8, va_list) c_int;
pub extern fn getdelim(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) isize;
pub extern fn getline(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, noalias __stream: [*c]FILE) isize;
pub extern fn fmemopen(noalias __buf: ?*anyopaque, __size: usize, noalias __mode: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufp: [*c][*c]u8, __sizep: [*c]usize) [*c]FILE;
pub extern const sys_nerr: c_int;
pub const sys_errlist: [*c]const [*c]const u8 = @extern([*c]const [*c]const u8, .{
    .name = "sys_errlist",
});
pub extern fn asprintf(noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn ctermid_r([*c]u8) [*c]u8;
pub extern fn fgetln([*c]FILE, __len: [*c]usize) [*c]u8;
pub extern fn fmtcheck([*c]const u8, [*c]const u8) [*c]const u8;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn setbuffer([*c]FILE, [*c]u8, __size: c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn vasprintf(noalias [*c][*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn funopen(?*const anyopaque, ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.c) c_int, ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int, ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.c) fpos_t, ?*const fn (?*anyopaque) callconv(.c) c_int) [*c]FILE;
pub extern fn __sprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __snprintf_chk(noalias [*c]u8, __maxlen: usize, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub extern fn __vsnprintf_chk(noalias [*c]u8, __maxlen: usize, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub const P_ALL: c_int = 0;
pub const P_PID: c_int = 1;
pub const P_PGID: c_int = 2;
pub const idtype_t = c_uint;
pub const struct_timeval = extern struct {
    tv_sec: __darwin_time_t = @import("std").mem.zeroes(__darwin_time_t),
    tv_usec: __darwin_suseconds_t = @import("std").mem.zeroes(__darwin_suseconds_t),
};
pub const rlim_t = __uint64_t;
pub const struct_rusage = extern struct {
    ru_utime: struct_timeval = @import("std").mem.zeroes(struct_timeval),
    ru_stime: struct_timeval = @import("std").mem.zeroes(struct_timeval),
    ru_maxrss: c_long = @import("std").mem.zeroes(c_long),
    ru_ixrss: c_long = @import("std").mem.zeroes(c_long),
    ru_idrss: c_long = @import("std").mem.zeroes(c_long),
    ru_isrss: c_long = @import("std").mem.zeroes(c_long),
    ru_minflt: c_long = @import("std").mem.zeroes(c_long),
    ru_majflt: c_long = @import("std").mem.zeroes(c_long),
    ru_nswap: c_long = @import("std").mem.zeroes(c_long),
    ru_inblock: c_long = @import("std").mem.zeroes(c_long),
    ru_oublock: c_long = @import("std").mem.zeroes(c_long),
    ru_msgsnd: c_long = @import("std").mem.zeroes(c_long),
    ru_msgrcv: c_long = @import("std").mem.zeroes(c_long),
    ru_nsignals: c_long = @import("std").mem.zeroes(c_long),
    ru_nvcsw: c_long = @import("std").mem.zeroes(c_long),
    ru_nivcsw: c_long = @import("std").mem.zeroes(c_long),
};
pub const rusage_info_t = ?*anyopaque;
pub const struct_rusage_info_v0 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v1 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v2 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v3 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v4 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v5 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
    ri_flags: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v6 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
    ri_flags: u64 = @import("std").mem.zeroes(u64),
    ri_user_ptime: u64 = @import("std").mem.zeroes(u64),
    ri_system_ptime: u64 = @import("std").mem.zeroes(u64),
    ri_pinstructions: u64 = @import("std").mem.zeroes(u64),
    ri_pcycles: u64 = @import("std").mem.zeroes(u64),
    ri_energy_nj: u64 = @import("std").mem.zeroes(u64),
    ri_penergy_nj: u64 = @import("std").mem.zeroes(u64),
    ri_secure_time_in_system: u64 = @import("std").mem.zeroes(u64),
    ri_secure_ptime_in_system: u64 = @import("std").mem.zeroes(u64),
    ri_neural_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_neural_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_neural_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_reserved: [9]u64 = @import("std").mem.zeroes([9]u64),
};
pub const rusage_info_current = struct_rusage_info_v6;
pub const struct_rlimit = extern struct {
    rlim_cur: rlim_t = @import("std").mem.zeroes(rlim_t),
    rlim_max: rlim_t = @import("std").mem.zeroes(rlim_t),
};
pub const struct_proc_rlimit_control_wakeupmon = extern struct {
    wm_flags: u32 = @import("std").mem.zeroes(u32),
    wm_rate: i32 = @import("std").mem.zeroes(i32),
};
pub extern fn getpriority(c_int, id_t) c_int;
pub extern fn getiopolicy_np(c_int, c_int) c_int;
pub extern fn getrlimit(c_int, [*c]struct_rlimit) c_int;
pub extern fn getrusage(c_int, [*c]struct_rusage) c_int;
pub extern fn setpriority(c_int, id_t, c_int) c_int;
pub extern fn setiopolicy_np(c_int, c_int, c_int) c_int;
pub extern fn setrlimit(c_int, [*c]const struct_rlimit) c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:201:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_26 = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:219:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_27 = opaque {};
pub const union_wait = extern union {
    w_status: c_int,
    w_T: struct_unnamed_26,
    w_S: struct_unnamed_27,
};
pub extern fn wait([*c]c_int) pid_t;
pub extern fn waitpid(pid_t, [*c]c_int, c_int) pid_t;
pub extern fn waitid(idtype_t, id_t, [*c]siginfo_t, c_int) c_int;
pub extern fn wait3([*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn wait4(pid_t, [*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn alloca(__size: c_ulong) ?*anyopaque;
pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern var __mb_cur_max: c_int;
pub const malloc_type_id_t = c_ulonglong;
pub extern fn malloc_type_malloc(size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_calloc(count: usize, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_free(ptr: ?*anyopaque, type_id: malloc_type_id_t) void;
pub extern fn malloc_type_realloc(ptr: ?*anyopaque, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_valloc(size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_aligned_alloc(alignment: usize, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_posix_memalign(memptr: [*c]?*anyopaque, alignment: usize, size: usize, type_id: malloc_type_id_t) c_int;
pub const struct__malloc_zone_t = opaque {};
pub const malloc_zone_t = struct__malloc_zone_t;
pub extern fn malloc_type_zone_malloc(zone: ?*malloc_zone_t, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_zone_calloc(zone: ?*malloc_zone_t, count: usize, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_zone_free(zone: ?*malloc_zone_t, ptr: ?*anyopaque, type_id: malloc_type_id_t) void;
pub extern fn malloc_type_zone_realloc(zone: ?*malloc_zone_t, ptr: ?*anyopaque, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_zone_valloc(zone: ?*malloc_zone_t, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc_type_zone_memalign(zone: ?*malloc_zone_t, alignment: usize, size: usize, type_id: malloc_type_id_t) ?*anyopaque;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__count: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn free(?*anyopaque) void;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn reallocf(__ptr: ?*anyopaque, __size: usize) ?*anyopaque;
pub extern fn valloc(__size: usize) ?*anyopaque;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn abort() noreturn;
pub extern fn abs(c_int) c_int;
pub extern fn atexit(?*const fn () callconv(.c) void) c_int;
pub extern fn at_quick_exit(?*const fn () callconv(.c) void) c_int;
pub extern fn atof([*c]const u8) f64;
pub extern fn atoi([*c]const u8) c_int;
pub extern fn atol([*c]const u8) c_long;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) ?*anyopaque;
pub extern fn div(c_int, c_int) div_t;
pub extern fn exit(c_int) noreturn;
pub extern fn getenv([*c]const u8) [*c]u8;
pub extern fn labs(c_long) c_long;
pub extern fn ldiv(c_long, c_long) ldiv_t;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbstowcs(noalias [*c]wchar_t, noalias [*c]const u8, __n: usize) usize;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, __n: usize) c_int;
pub extern fn qsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
pub extern fn quick_exit(c_int) noreturn;
pub extern fn rand() c_int;
pub extern fn srand(c_uint) void;
pub extern fn strtod([*c]const u8, [*c][*c]u8) f64;
pub extern fn strtof([*c]const u8, [*c][*c]u8) f32;
pub extern fn strtol(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn strtoll(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoul(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoull(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn system([*c]const u8) c_int;
pub extern fn wcstombs(noalias [*c]u8, noalias [*c]const wchar_t, __n: usize) usize;
pub extern fn wctomb([*c]u8, wchar_t) c_int;
pub extern fn _Exit(c_int) noreturn;
pub extern fn a64l([*c]const u8) c_long;
pub extern fn drand48() f64;
pub extern fn ecvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn fcvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn gcvt(f64, c_int, [*c]u8) [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn grantpt(c_int) c_int;
pub extern fn initstate(c_uint, [*c]u8, __size: usize) [*c]u8;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn l64a(c_long) [*c]u8;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn lrand48() c_long;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mrand48() c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn posix_openpt(c_int) c_int;
pub extern fn ptsname(c_int) [*c]u8;
pub extern fn ptsname_r(fildes: c_int, buffer: [*c]u8, buflen: usize) c_int;
pub extern fn putenv([*c]u8) c_int;
pub extern fn random() c_long;
pub extern fn rand_r([*c]c_uint) c_int;
pub extern fn realpath(noalias [*c]const u8, noalias [*c]u8) [*c]u8;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn setkey([*c]const u8) void;
pub extern fn setstate([*c]const u8) [*c]u8;
pub extern fn srand48(c_long) void;
pub extern fn srandom(c_uint) void;
pub extern fn unlockpt(c_int) c_int;
pub extern fn unsetenv([*c]const u8) c_int;
pub extern fn arc4random() u32;
pub extern fn arc4random_addrandom([*c]u8, __datlen: c_int) void;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __nbytes: usize) void;
pub extern fn arc4random_stir() void;
pub extern fn arc4random_uniform(__upper_bound: u32) u32;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:293:6: warning: unsupported type: 'BlockPointer'
pub const atexit_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:293:6

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:302:7: warning: unsupported type: 'BlockPointer'
pub const bsearch_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:302:7
pub extern fn cgetcap([*c]u8, [*c]const u8, c_int) [*c]u8;
pub extern fn cgetclose() c_int;
pub extern fn cgetent([*c][*c]u8, [*c][*c]u8, [*c]const u8) c_int;
pub extern fn cgetfirst([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetmatch([*c]const u8, [*c]const u8) c_int;
pub extern fn cgetnext([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetnum([*c]u8, [*c]const u8, [*c]c_long) c_int;
pub extern fn cgetset([*c]const u8) c_int;
pub extern fn cgetstr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn cgetustr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn daemon(c_int, c_int) c_int;
pub extern fn devname(dev_t, mode_t) [*c]u8;
pub extern fn devname_r(dev_t, mode_t, buf: [*c]u8, len: c_int) [*c]u8;
pub extern fn getbsize([*c]c_int, [*c]c_long) [*c]u8;
pub extern fn getloadavg([*c]f64, __nelem: c_int) c_int;
pub extern fn getprogname() [*c]const u8;
pub extern fn setprogname([*c]const u8) void;
pub extern fn heapsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:339:6: warning: unsupported type: 'BlockPointer'
pub const heapsort_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:339:6
pub extern fn mergesort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:346:6: warning: unsupported type: 'BlockPointer'
pub const mergesort_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:346:6
pub extern fn psort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:354:7: warning: unsupported type: 'BlockPointer'
pub const psort_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:354:7
pub extern fn psort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:362:7: warning: unsupported type: 'BlockPointer'
pub const qsort_b = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:362:7
pub extern fn qsort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
pub extern fn radixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn rpmatch([*c]const u8) c_int;
pub extern fn sradixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn sranddev() void;
pub extern fn srandomdev() void;
pub extern fn strtonum(__numstr: [*c]const u8, __minval: c_longlong, __maxval: c_longlong, __errstrp: [*c][*c]const u8) c_longlong;
pub extern fn strtoq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern var suboptarg: [*c]u8;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn memcpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dst: ?*anyopaque, __src: ?*const anyopaque, __len: c_ulong) ?*anyopaque;
pub extern fn memset(__b: ?*anyopaque, __c: c_int, __len: c_ulong) ?*anyopaque;
pub extern fn strcat(__s1: [*c]u8, __s2: [*c]const u8) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strncat(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strpbrk(__s: [*c]const u8, __charset: [*c]const u8) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strstr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strtok(__str: [*c]u8, __sep: [*c]const u8) [*c]u8;
pub extern fn strxfrm(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strtok_r(__str: [*c]u8, __sep: [*c]const u8, __lasts: [*c][*c]u8) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __strerrbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn strdup(__s1: [*c]const u8) [*c]u8;
pub extern fn memccpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn stpcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn stpncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strndup(__s1: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strnlen(__s1: [*c]const u8, __n: usize) usize;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn memset_s(__s: ?*anyopaque, __smax: rsize_t, __c: c_int, __n: rsize_t) errno_t;
pub extern fn memmem(__big: ?*const anyopaque, __big_len: usize, __little: ?*const anyopaque, __little_len: usize) ?*anyopaque;
pub extern fn memset_pattern4(__b: ?*anyopaque, __pattern4: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern8(__b: ?*anyopaque, __pattern8: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern16(__b: ?*anyopaque, __pattern16: ?*const anyopaque, __len: usize) void;
pub extern fn strcasestr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strchrnul(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strnstr(__big: [*c]const u8, __little: [*c]const u8, __len: usize) [*c]u8;
pub extern fn strlcat(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strlcpy(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strmode(__mode: c_int, __bp: [*c]u8) void;
pub extern fn strsep(__stringp: [*c][*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn swab(noalias ?*const anyopaque, noalias ?*anyopaque, __len: isize) void;
pub extern fn timingsafe_bcmp(__b1: ?*const anyopaque, __b2: ?*const anyopaque, __len: usize) c_int;
pub extern fn strsignal_r(__sig: c_int, __strsignalbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn bcmp(?*const anyopaque, ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn bcopy(?*const anyopaque, ?*anyopaque, __n: c_ulong) void;
pub extern fn bzero(?*anyopaque, __n: c_ulong) void;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn ffs(c_int) c_int;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, c_ulong) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub const struct_timespec = extern struct {
    tv_sec: __darwin_time_t = @import("std").mem.zeroes(__darwin_time_t),
    tv_nsec: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_tm = extern struct {
    tm_sec: c_int = @import("std").mem.zeroes(c_int),
    tm_min: c_int = @import("std").mem.zeroes(c_int),
    tm_hour: c_int = @import("std").mem.zeroes(c_int),
    tm_mday: c_int = @import("std").mem.zeroes(c_int),
    tm_mon: c_int = @import("std").mem.zeroes(c_int),
    tm_year: c_int = @import("std").mem.zeroes(c_int),
    tm_wday: c_int = @import("std").mem.zeroes(c_int),
    tm_yday: c_int = @import("std").mem.zeroes(c_int),
    tm_isdst: c_int = @import("std").mem.zeroes(c_int),
    tm_gmtoff: c_long = @import("std").mem.zeroes(c_long),
    tm_zone: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const tzname: [*c][*c]u8 = @extern([*c][*c]u8, .{
    .name = "tzname",
});
pub extern var getdate_err: c_int;
pub extern var timezone: c_long;
pub extern var daylight: c_int;
pub extern fn asctime([*c]const struct_tm) [*c]u8;
pub extern fn clock() clock_t;
pub extern fn ctime([*c]const time_t) [*c]u8;
pub extern fn difftime(time_t, time_t) f64;
pub extern fn getdate([*c]const u8) [*c]struct_tm;
pub extern fn gmtime([*c]const time_t) [*c]struct_tm;
pub extern fn localtime([*c]const time_t) [*c]struct_tm;
pub extern fn mktime([*c]struct_tm) time_t;
pub extern fn strftime(noalias [*c]u8, __maxsize: usize, noalias [*c]const u8, noalias [*c]const struct_tm) usize;
pub extern fn strptime(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]struct_tm) [*c]u8;
pub extern fn time([*c]time_t) time_t;
pub extern fn tzset() void;
pub extern fn asctime_r(noalias [*c]const struct_tm, noalias [*c]u8) [*c]u8;
pub extern fn ctime_r([*c]const time_t, [*c]u8) [*c]u8;
pub extern fn gmtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn posix2time(time_t) time_t;
pub extern fn tzsetwall() void;
pub extern fn time2posix(time_t) time_t;
pub extern fn timelocal([*c]struct_tm) time_t;
pub extern fn timegm([*c]struct_tm) time_t;
pub extern fn nanosleep(__rqtp: [*c]const struct_timespec, __rmtp: [*c]struct_timespec) c_int;
pub const _CLOCK_REALTIME: c_int = 0;
pub const _CLOCK_MONOTONIC: c_int = 6;
pub const _CLOCK_MONOTONIC_RAW: c_int = 4;
pub const _CLOCK_MONOTONIC_RAW_APPROX: c_int = 5;
pub const _CLOCK_UPTIME_RAW: c_int = 8;
pub const _CLOCK_UPTIME_RAW_APPROX: c_int = 9;
pub const _CLOCK_PROCESS_CPUTIME_ID: c_int = 12;
pub const _CLOCK_THREAD_CPUTIME_ID: c_int = 16;
pub const clockid_t = c_uint;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_gettime_nsec_np(__clock_id: clockid_t) __uint64_t;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn timespec_get(ts: [*c]struct_timespec, base: c_int) c_int;
pub extern fn imaxabs(j: intmax_t) intmax_t;
pub const imaxdiv_t = extern struct {
    quot: intmax_t = @import("std").mem.zeroes(intmax_t),
    rem: intmax_t = @import("std").mem.zeroes(intmax_t),
};
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) uintmax_t;
pub const CFArrayRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFArrayReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void;
pub const CFArrayCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFArrayEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean;
pub const CFArrayCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFArrayRetainCallBack = @import("std").mem.zeroes(CFArrayRetainCallBack),
    release: CFArrayReleaseCallBack = @import("std").mem.zeroes(CFArrayReleaseCallBack),
    copyDescription: CFArrayCopyDescriptionCallBack = @import("std").mem.zeroes(CFArrayCopyDescriptionCallBack),
    equal: CFArrayEqualCallBack = @import("std").mem.zeroes(CFArrayEqualCallBack),
};
pub extern const kCFTypeArrayCallBacks: CFArrayCallBacks;
pub const CFArrayApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFArray = opaque {};
pub const CFArrayRef = ?*const struct___CFArray;
pub const CFMutableArrayRef = ?*struct___CFArray;
pub extern fn CFArrayGetTypeID() CFTypeID;
pub extern fn CFArrayCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFArrayRef;
pub extern fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) CFArrayRef;
pub extern fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFMutableArrayRef;
pub extern fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theArray: CFArrayRef) CFMutableArrayRef;
pub extern fn CFArrayGetCount(theArray: CFArrayRef) CFIndex;
pub extern fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) Boolean;
pub extern fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex) ?*const anyopaque;
pub extern fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange, values: [*c]?*const anyopaque) void;
pub extern fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange, applier: CFArrayApplierFunction, context: ?*anyopaque) void;
pub extern fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque, comparator: CFComparatorFunction, context: ?*anyopaque) CFIndex;
pub extern fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: ?*const anyopaque) void;
pub extern fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex) void;
pub extern fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef) void;
pub extern fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange, newValues: [*c]?*const anyopaque, newCount: CFIndex) void;
pub extern fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef, idx1: CFIndex, idx2: CFIndex) void;
pub extern fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFArrayAppendArray(theArray: CFMutableArrayRef, otherArray: CFArrayRef, otherRange: CFRange) void;
pub const CFBagRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFBagReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void;
pub const CFBagCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFBagEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean;
pub const CFBagHashCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFHashCode;
pub const CFBagCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFBagRetainCallBack = @import("std").mem.zeroes(CFBagRetainCallBack),
    release: CFBagReleaseCallBack = @import("std").mem.zeroes(CFBagReleaseCallBack),
    copyDescription: CFBagCopyDescriptionCallBack = @import("std").mem.zeroes(CFBagCopyDescriptionCallBack),
    equal: CFBagEqualCallBack = @import("std").mem.zeroes(CFBagEqualCallBack),
    hash: CFBagHashCallBack = @import("std").mem.zeroes(CFBagHashCallBack),
};
pub extern const kCFTypeBagCallBacks: CFBagCallBacks;
pub extern const kCFCopyStringBagCallBacks: CFBagCallBacks;
pub const CFBagApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFBag = opaque {};
pub const CFBagRef = ?*const struct___CFBag;
pub const CFMutableBagRef = ?*struct___CFBag;
pub extern fn CFBagGetTypeID() CFTypeID;
pub extern fn CFBagCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFBagCallBacks) CFBagRef;
pub extern fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) CFBagRef;
pub extern fn CFBagCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBagCallBacks) CFMutableBagRef;
pub extern fn CFBagCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theBag: CFBagRef) CFMutableBagRef;
pub extern fn CFBagGetCount(theBag: CFBagRef) CFIndex;
pub extern fn CFBagGetCountOfValue(theBag: CFBagRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBagContainsValue(theBag: CFBagRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBagGetValue(theBag: CFBagRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFBagGetValueIfPresent(theBag: CFBagRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBagGetValues(theBag: CFBagRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBagApplyFunction(theBag: CFBagRef, applier: CFBagApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBagAddValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagReplaceValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagSetValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveAllValues(theBag: CFMutableBagRef) void;
pub const CFBinaryHeapCompareContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFBinaryHeapCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
    compare: ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.c) CFComparisonResult = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.c) CFComparisonResult),
};
pub extern const kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
pub const CFBinaryHeapApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFBinaryHeap = opaque {};
pub const CFBinaryHeapRef = ?*struct___CFBinaryHeap;
pub extern fn CFBinaryHeapGetTypeID() CFTypeID;
pub extern fn CFBinaryHeapCreate(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBinaryHeapCallBacks, compareContext: [*c]const CFBinaryHeapCompareContext) CFBinaryHeapRef;
pub extern fn CFBinaryHeapCreateCopy(allocator: CFAllocatorRef, capacity: CFIndex, heap: CFBinaryHeapRef) CFBinaryHeapRef;
pub extern fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) CFIndex;
pub extern fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) ?*const anyopaque;
pub extern fn CFBinaryHeapGetMinimumIfPresent(heap: CFBinaryHeapRef, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBinaryHeapApplyFunction(heap: CFBinaryHeapRef, applier: CFBinaryHeapApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) void;
pub extern fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef) void;
pub extern fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef) void;
pub const CFBit = UInt32;
pub const struct___CFBitVector = opaque {};
pub const CFBitVectorRef = ?*const struct___CFBitVector;
pub const CFMutableBitVectorRef = ?*struct___CFBitVector;
pub extern fn CFBitVectorGetTypeID() CFTypeID;
pub extern fn CFBitVectorCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, numBits: CFIndex) CFBitVectorRef;
pub extern fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) CFBitVectorRef;
pub extern fn CFBitVectorCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableBitVectorRef;
pub extern fn CFBitVectorCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, bv: CFBitVectorRef) CFMutableBitVectorRef;
pub extern fn CFBitVectorGetCount(bv: CFBitVectorRef) CFIndex;
pub extern fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) Boolean;
pub extern fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) CFBit;
pub extern fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: [*c]UInt8) void;
pub extern fn CFBitVectorGetFirstIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorGetLastIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex) void;
pub extern fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex) void;
pub extern fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange) void;
pub extern fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit) void;
pub extern fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit) void;
pub extern fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit) void;
pub const struct__OSUnalignedU16 = extern struct {
    __val: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct__OSUnalignedU32 = extern struct {
    __val: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct__OSUnalignedU64 = extern struct {
    __val: u64 align(1) = @import("std").mem.zeroes(u64),
};
pub fn OSReadSwapInt16(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.c) u16 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt16(@as([*c]struct__OSUnalignedU16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSReadSwapInt32(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.c) u32 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt32(@as([*c]struct__OSUnalignedU32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSReadSwapInt64(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.c) u64 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt64(@as([*c]struct__OSUnalignedU64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSWriteSwapInt16(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u16) callconv(.c) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt16(_data);
}
pub fn OSWriteSwapInt32(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u32) callconv(.c) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt32(_data);
}
pub fn OSWriteSwapInt64(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u64) callconv(.c) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt64(_data);
}
pub const OSUnknownByteOrder: c_int = 0;
pub const OSLittleEndian: c_int = 1;
pub const OSBigEndian: c_int = 2;
const enum_unnamed_28 = c_uint;
pub fn OSHostByteOrder() callconv(.c) i32 {
    return OSLittleEndian;
}
pub fn _OSReadInt16(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.c) u16 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSReadInt32(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.c) u32 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSReadInt64(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.c) u64 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSWriteInt16(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u16) callconv(.c) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub fn _OSWriteInt32(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u32) callconv(.c) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub fn _OSWriteInt64(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u64) callconv(.c) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub const CFByteOrderUnknown: c_int = 0;
pub const CFByteOrderLittleEndian: c_int = 1;
pub const CFByteOrderBigEndian: c_int = 2;
pub const enum___CFByteOrder = c_uint;
pub const CFByteOrder = CFIndex;
pub inline fn CFByteOrderGetCurrent() CFByteOrder {
    var byteOrder: i32 = OSHostByteOrder();
    _ = &byteOrder;
    while (true) {
        switch (byteOrder) {
            @as(c_int, 1) => return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderLittleEndian))),
            @as(c_int, 2) => return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderBigEndian))),
            else => break,
        }
        break;
    }
    return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderUnknown)));
}
pub inline fn CFSwapInt16(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16BigToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32BigToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64BigToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16HostToBig(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32HostToBig(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64HostToBig(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16LittleToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt32LittleToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt64LittleToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt16HostToLittle(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt32HostToLittle(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt64HostToLittle(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub const CFSwappedFloat32 = extern struct {
    v: u32 = @import("std").mem.zeroes(u32),
};
pub const CFSwappedFloat64 = extern struct {
    v: u64 = @import("std").mem.zeroes(u64),
};
pub inline fn CFConvertFloat32HostToSwapped(arg_arg: Float32) CFSwappedFloat32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat32SwappedToHost(arg_arg: CFSwappedFloat32) Float32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloat64HostToSwapped(arg_arg: Float64) CFSwappedFloat64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat64SwappedToHost(arg_arg: CFSwappedFloat64) Float64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloatHostToSwapped(arg_arg: f32) CFSwappedFloat32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloatSwappedToHost(arg_arg: CFSwappedFloat32) f32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertDoubleHostToSwapped(arg_arg: f64) CFSwappedFloat64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertDoubleSwappedToHost(arg_arg: CFSwappedFloat64) f64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub const CFDictionaryRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFDictionaryReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void;
pub const CFDictionaryCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFDictionaryEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean;
pub const CFDictionaryHashCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFHashCode;
pub const CFDictionaryKeyCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFDictionaryRetainCallBack = @import("std").mem.zeroes(CFDictionaryRetainCallBack),
    release: CFDictionaryReleaseCallBack = @import("std").mem.zeroes(CFDictionaryReleaseCallBack),
    copyDescription: CFDictionaryCopyDescriptionCallBack = @import("std").mem.zeroes(CFDictionaryCopyDescriptionCallBack),
    equal: CFDictionaryEqualCallBack = @import("std").mem.zeroes(CFDictionaryEqualCallBack),
    hash: CFDictionaryHashCallBack = @import("std").mem.zeroes(CFDictionaryHashCallBack),
};
pub extern const kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub extern const kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub const CFDictionaryValueCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFDictionaryRetainCallBack = @import("std").mem.zeroes(CFDictionaryRetainCallBack),
    release: CFDictionaryReleaseCallBack = @import("std").mem.zeroes(CFDictionaryReleaseCallBack),
    copyDescription: CFDictionaryCopyDescriptionCallBack = @import("std").mem.zeroes(CFDictionaryCopyDescriptionCallBack),
    equal: CFDictionaryEqualCallBack = @import("std").mem.zeroes(CFDictionaryEqualCallBack),
};
pub extern const kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
pub const CFDictionaryApplierFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFDictionary = opaque {};
pub const CFDictionaryRef = ?*const struct___CFDictionary;
pub const CFMutableDictionaryRef = ?*struct___CFDictionary;
pub extern fn CFDictionaryGetTypeID() CFTypeID;
pub extern fn CFDictionaryCreate(allocator: CFAllocatorRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque, numValues: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFDictionaryRef;
pub extern fn CFDictionaryCreateCopy(allocator: CFAllocatorRef, theDict: CFDictionaryRef) CFDictionaryRef;
pub extern fn CFDictionaryCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFMutableDictionaryRef;
pub extern fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theDict: CFDictionaryRef) CFMutableDictionaryRef;
pub extern fn CFDictionaryGetCount(theDict: CFDictionaryRef) CFIndex;
pub extern fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef, key: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryContainsKey(theDict: CFDictionaryRef, key: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryContainsValue(theDict: CFDictionaryRef, value: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetValue(theDict: CFDictionaryRef, key: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef, key: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque) void;
pub extern fn CFDictionaryApplyFunction(theDict: CFDictionaryRef, applier: CFDictionaryApplierFunction, context: ?*anyopaque) void;
pub extern fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionarySetValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef) void;
pub const CFNotificationName = CFStringRef;
pub const struct___CFNotificationCenter = opaque {};
pub const CFNotificationCenterRef = ?*struct___CFNotificationCenter;
pub const CFNotificationCallback = ?*const fn (CFNotificationCenterRef, ?*anyopaque, CFNotificationName, ?*const anyopaque, CFDictionaryRef) callconv(.c) void;
pub const CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop: c_int = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: c_int = 2;
pub const CFNotificationSuspensionBehaviorHold: c_int = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: c_int = 4;
const enum_unnamed_29 = c_uint;
pub extern fn CFNotificationCenterGetTypeID() CFTypeID;
pub extern fn CFNotificationCenterGetLocalCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDistributedCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDarwinNotifyCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterAddObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, callBack: CFNotificationCallback, name: CFStringRef, object: ?*const anyopaque, suspensionBehavior: CFNotificationSuspensionBehavior) void;
pub extern fn CFNotificationCenterRemoveObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, name: CFNotificationName, object: ?*const anyopaque) void;
pub extern fn CFNotificationCenterRemoveEveryObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque) void;
pub extern fn CFNotificationCenterPostNotification(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, deliverImmediately: Boolean) void;
pub const kCFNotificationDeliverImmediately: c_int = 1;
pub const kCFNotificationPostToAllSessions: c_int = 2;
const enum_unnamed_30 = c_uint;
pub extern fn CFNotificationCenterPostNotificationWithOptions(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, options: CFOptionFlags) void;
pub const CFLocaleIdentifier = CFStringRef;
pub const CFLocaleKey = CFStringRef;
pub const struct___CFLocale = opaque {};
pub const CFLocaleRef = ?*const struct___CFLocale;
pub extern fn CFLocaleGetTypeID() CFTypeID;
pub extern fn CFLocaleGetSystem() CFLocaleRef;
pub extern fn CFLocaleCopyCurrent() CFLocaleRef;
pub extern fn CFLocaleCopyAvailableLocaleIdentifiers() CFArrayRef;
pub extern fn CFLocaleCopyISOLanguageCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCountryCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyCommonISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyPreferredLanguages() CFArrayRef;
pub extern fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: CFAllocatorRef, lcode: LangCode, rcode: RegionCode) CFLocaleIdentifier;
pub extern fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: CFAllocatorRef, lcid: u32) CFLocaleIdentifier;
pub extern fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: CFLocaleIdentifier) u32;
pub const CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown: c_int = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: c_int = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: c_int = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: c_int = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: c_int = 4;
const enum_unnamed_31 = c_uint;
pub extern fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator: CFAllocatorRef, localeID: CFLocaleIdentifier) CFDictionaryRef;
pub extern fn CFLocaleCreateLocaleIdentifierFromComponents(allocator: CFAllocatorRef, dictionary: CFDictionaryRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreate(allocator: CFAllocatorRef, localeIdentifier: CFLocaleIdentifier) CFLocaleRef;
pub extern fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) CFLocaleRef;
pub extern fn CFLocaleGetIdentifier(locale: CFLocaleRef) CFLocaleIdentifier;
pub extern fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) CFTypeRef;
pub extern fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef, key: CFLocaleKey, value: CFStringRef) CFStringRef;
pub extern const kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
pub extern const kCFLocaleIdentifier: CFLocaleKey;
pub extern const kCFLocaleLanguageCode: CFLocaleKey;
pub extern const kCFLocaleCountryCode: CFLocaleKey;
pub extern const kCFLocaleScriptCode: CFLocaleKey;
pub extern const kCFLocaleVariantCode: CFLocaleKey;
pub extern const kCFLocaleExemplarCharacterSet: CFLocaleKey;
pub extern const kCFLocaleCalendarIdentifier: CFLocaleKey;
pub extern const kCFLocaleCalendar: CFLocaleKey;
pub extern const kCFLocaleCollationIdentifier: CFLocaleKey;
pub extern const kCFLocaleUsesMetricSystem: CFLocaleKey;
pub extern const kCFLocaleMeasurementSystem: CFLocaleKey;
pub extern const kCFLocaleDecimalSeparator: CFLocaleKey;
pub extern const kCFLocaleGroupingSeparator: CFLocaleKey;
pub extern const kCFLocaleCurrencySymbol: CFLocaleKey;
pub extern const kCFLocaleCurrencyCode: CFLocaleKey;
pub extern const kCFLocaleCollatorIdentifier: CFLocaleKey;
pub extern const kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
pub const CFCalendarIdentifier = CFStringRef;
pub extern const kCFGregorianCalendar: CFCalendarIdentifier;
pub extern const kCFBuddhistCalendar: CFCalendarIdentifier;
pub extern const kCFChineseCalendar: CFCalendarIdentifier;
pub extern const kCFHebrewCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCivilCalendar: CFCalendarIdentifier;
pub extern const kCFJapaneseCalendar: CFCalendarIdentifier;
pub extern const kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
pub extern const kCFPersianCalendar: CFCalendarIdentifier;
pub extern const kCFIndianCalendar: CFCalendarIdentifier;
pub extern const kCFISO8601Calendar: CFCalendarIdentifier;
pub extern const kCFIslamicTabularCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
pub const CFTimeInterval = f64;
pub const CFAbsoluteTime = CFTimeInterval;
pub extern fn CFAbsoluteTimeGetCurrent() CFAbsoluteTime;
pub extern const kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
pub extern const kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
pub const struct___CFDate = opaque {};
pub const CFDateRef = ?*const struct___CFDate;
pub extern fn CFDateGetTypeID() CFTypeID;
pub extern fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) CFDateRef;
pub extern fn CFDateGetAbsoluteTime(theDate: CFDateRef) CFAbsoluteTime;
pub extern fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef, otherDate: CFDateRef) CFTimeInterval;
pub extern fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef, context: ?*anyopaque) CFComparisonResult;
pub const struct___CFTimeZone = opaque {};
pub const CFTimeZoneRef = ?*const struct___CFTimeZone;
pub const CFGregorianDate = extern struct {
    year: SInt32 = @import("std").mem.zeroes(SInt32),
    month: SInt8 = @import("std").mem.zeroes(SInt8),
    day: SInt8 = @import("std").mem.zeroes(SInt8),
    hour: SInt8 = @import("std").mem.zeroes(SInt8),
    minute: SInt8 = @import("std").mem.zeroes(SInt8),
    second: f64 = @import("std").mem.zeroes(f64),
};
pub const CFGregorianUnits = extern struct {
    years: SInt32 = @import("std").mem.zeroes(SInt32),
    months: SInt32 = @import("std").mem.zeroes(SInt32),
    days: SInt32 = @import("std").mem.zeroes(SInt32),
    hours: SInt32 = @import("std").mem.zeroes(SInt32),
    minutes: SInt32 = @import("std").mem.zeroes(SInt32),
    seconds: f64 = @import("std").mem.zeroes(f64),
};
pub const CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears: c_int = 1;
pub const kCFGregorianUnitsMonths: c_int = 2;
pub const kCFGregorianUnitsDays: c_int = 4;
pub const kCFGregorianUnitsHours: c_int = 8;
pub const kCFGregorianUnitsMinutes: c_int = 16;
pub const kCFGregorianUnitsSeconds: c_int = 32;
pub const kCFGregorianAllUnits: c_int = 16777215;
const enum_unnamed_32 = c_uint;
pub extern fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) Boolean;
pub extern fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate, tz: CFTimeZoneRef) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef) CFGregorianDate;
pub extern fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime, tz: CFTimeZoneRef, units: CFGregorianUnits) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime, at2: CFAbsoluteTime, tz: CFTimeZoneRef, unitFlags: CFOptionFlags) CFGregorianUnits;
pub extern fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub const struct___CFData = opaque {};
pub const CFDataRef = ?*const struct___CFData;
pub const CFMutableDataRef = ?*struct___CFData;
pub extern fn CFDataGetTypeID() CFTypeID;
pub extern fn CFDataCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex) CFDataRef;
pub extern fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFDataRef;
pub extern fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) CFDataRef;
pub extern fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableDataRef;
pub extern fn CFDataCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theData: CFDataRef) CFMutableDataRef;
pub extern fn CFDataGetLength(theData: CFDataRef) CFIndex;
pub extern fn CFDataGetBytePtr(theData: CFDataRef) [*c]const UInt8;
pub extern fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) [*c]UInt8;
pub extern fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: [*c]UInt8) void;
pub extern fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex) void;
pub extern fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex) void;
pub extern fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: [*c]const UInt8, length: CFIndex) void;
pub extern fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange, newBytes: [*c]const UInt8, newLength: CFIndex) void;
pub extern fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange) void;
pub const CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards: c_int = 1;
pub const kCFDataSearchAnchored: c_int = 2;
const enum_unnamed_33 = c_uint;
pub extern fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef, searchRange: CFRange, compareOptions: CFDataSearchFlags) CFRange;
pub const struct___CFCharacterSet = opaque {};
pub const CFCharacterSetRef = ?*const struct___CFCharacterSet;
pub const CFMutableCharacterSetRef = ?*struct___CFCharacterSet;
pub const CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl: c_int = 1;
pub const kCFCharacterSetWhitespace: c_int = 2;
pub const kCFCharacterSetWhitespaceAndNewline: c_int = 3;
pub const kCFCharacterSetDecimalDigit: c_int = 4;
pub const kCFCharacterSetLetter: c_int = 5;
pub const kCFCharacterSetLowercaseLetter: c_int = 6;
pub const kCFCharacterSetUppercaseLetter: c_int = 7;
pub const kCFCharacterSetNonBase: c_int = 8;
pub const kCFCharacterSetDecomposable: c_int = 9;
pub const kCFCharacterSetAlphaNumeric: c_int = 10;
pub const kCFCharacterSetPunctuation: c_int = 11;
pub const kCFCharacterSetCapitalizedLetter: c_int = 13;
pub const kCFCharacterSetSymbol: c_int = 14;
pub const kCFCharacterSetNewline: c_int = 15;
pub const kCFCharacterSetIllegal: c_int = 12;
const enum_unnamed_34 = c_uint;
pub extern fn CFCharacterSetGetTypeID() CFTypeID;
pub extern fn CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef, theRange: CFRange) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef, theString: CFStringRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef, theData: CFDataRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef, theOtherset: CFCharacterSetRef) Boolean;
pub extern fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) Boolean;
pub extern fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) Boolean;
pub extern fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef, theChar: UTF32Char) Boolean;
pub extern fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFDataRef;
pub extern fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetRemoveCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetAddCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetRemoveCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef) void;
pub const CFErrorDomain = CFStringRef;
pub const struct___CFError = opaque {};
pub const CFErrorRef = ?*struct___CFError;
pub extern fn CFErrorGetTypeID() CFTypeID;
pub extern const kCFErrorDomainPOSIX: CFErrorDomain;
pub extern const kCFErrorDomainOSStatus: CFErrorDomain;
pub extern const kCFErrorDomainMach: CFErrorDomain;
pub extern const kCFErrorDomainCocoa: CFErrorDomain;
pub extern const kCFErrorLocalizedDescriptionKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureReasonKey: CFStringRef;
pub extern const kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
pub extern const kCFErrorDescriptionKey: CFStringRef;
pub extern const kCFErrorUnderlyingErrorKey: CFStringRef;
pub extern const kCFErrorURLKey: CFStringRef;
pub extern const kCFErrorFilePathKey: CFStringRef;
pub extern fn CFErrorCreate(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfo: CFDictionaryRef) CFErrorRef;
pub extern fn CFErrorCreateWithUserInfoKeysAndValues(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfoKeys: [*c]const ?*const anyopaque, userInfoValues: [*c]const ?*const anyopaque, numUserInfoValues: CFIndex) CFErrorRef;
pub extern fn CFErrorGetDomain(err: CFErrorRef) CFErrorDomain;
pub extern fn CFErrorGetCode(err: CFErrorRef) CFIndex;
pub extern fn CFErrorCopyUserInfo(err: CFErrorRef) CFDictionaryRef;
pub extern fn CFErrorCopyDescription(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyFailureReason(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) CFStringRef;
pub const CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman: c_int = 0;
pub const kCFStringEncodingWindowsLatin1: c_int = 1280;
pub const kCFStringEncodingISOLatin1: c_int = 513;
pub const kCFStringEncodingNextStepLatin: c_int = 2817;
pub const kCFStringEncodingASCII: c_int = 1536;
pub const kCFStringEncodingUnicode: c_int = 256;
pub const kCFStringEncodingUTF8: c_int = 134217984;
pub const kCFStringEncodingNonLossyASCII: c_int = 3071;
pub const kCFStringEncodingUTF16: c_int = 256;
pub const kCFStringEncodingUTF16BE: c_int = 268435712;
pub const kCFStringEncodingUTF16LE: c_int = 335544576;
pub const kCFStringEncodingUTF32: c_int = 201326848;
pub const kCFStringEncodingUTF32BE: c_int = 402653440;
pub const kCFStringEncodingUTF32LE: c_int = 469762304;
const enum_unnamed_35 = c_uint;
pub extern fn CFStringGetTypeID() CFTypeID;
pub extern fn CFStringCreateWithPascalString(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithCString(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean) CFStringRef;
pub extern fn CFStringCreateWithCharacters(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex) CFStringRef;
pub extern fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithSubstring(alloc: CFAllocatorRef, str: CFStringRef, range: CFRange) CFStringRef;
pub extern fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateWithFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) CFStringRef;
pub extern fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) CFStringRef;
pub extern fn CFStringCreateStringWithValidatedFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, validFormatSpecifiers: CFStringRef, format: CFStringRef, errorPtr: [*c]CFErrorRef, ...) CFStringRef;
pub extern fn CFStringCreateStringWithValidatedFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, validFormatSpecifiers: CFStringRef, format: CFStringRef, arguments: va_list, errorPtr: [*c]CFErrorRef) CFStringRef;
pub extern fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableStringRef;
pub extern fn CFStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, theString: CFStringRef) CFMutableStringRef;
pub extern fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]UniChar, numChars: CFIndex, capacity: CFIndex, externalCharactersAllocator: CFAllocatorRef) CFMutableStringRef;
pub extern fn CFStringGetLength(theString: CFStringRef) CFIndex;
pub extern fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) UniChar;
pub extern fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: [*c]UniChar) void;
pub extern fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetCString(theString: CFStringRef, buffer: [*c]u8, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetPascalStringPtr(theString: CFStringRef, encoding: CFStringEncoding) ConstStringPtr;
pub extern fn CFStringGetCStringPtr(theString: CFStringRef, encoding: CFStringEncoding) [*c]const u8;
pub extern fn CFStringGetCharactersPtr(theString: CFStringRef) [*c]const UniChar;
pub extern fn CFStringGetBytes(theString: CFStringRef, range: CFRange, encoding: CFStringEncoding, lossByte: UInt8, isExternalRepresentation: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex, usedBufLen: [*c]CFIndex) CFIndex;
pub extern fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef, data: CFDataRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef, theString: CFStringRef, encoding: CFStringEncoding, lossByte: UInt8) CFDataRef;
pub extern fn CFStringGetSmallestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetFastestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetSystemEncoding() CFStringEncoding;
pub extern fn CFStringGetMaximumSizeForEncoding(length: CFIndex, encoding: CFStringEncoding) CFIndex;
pub extern fn CFStringGetFileSystemRepresentation(string: CFStringRef, buffer: [*c]u8, maxBufLen: CFIndex) Boolean;
pub extern fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) CFIndex;
pub extern fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef, buffer: [*c]const u8) CFStringRef;
pub const CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive: c_int = 1;
pub const kCFCompareBackwards: c_int = 4;
pub const kCFCompareAnchored: c_int = 8;
pub const kCFCompareNonliteral: c_int = 16;
pub const kCFCompareLocalized: c_int = 32;
pub const kCFCompareNumerically: c_int = 64;
pub const kCFCompareDiacriticInsensitive: c_int = 128;
pub const kCFCompareWidthInsensitive: c_int = 256;
pub const kCFCompareForcedOrdering: c_int = 512;
const enum_unnamed_36 = c_uint;
pub extern fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: CFLocaleRef) CFComparisonResult;
pub extern fn CFStringCompareWithOptions(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringFindWithOptionsAndLocale(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: CFLocaleRef, result: [*c]CFRange) Boolean;
pub extern fn CFStringFindWithOptions(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef, theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFArrayRef;
pub extern fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef, compareOptions: CFStringCompareFlags) CFRange;
pub extern fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) Boolean;
pub extern fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) Boolean;
pub extern fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef, theIndex: CFIndex) CFRange;
pub extern fn CFStringFindCharacterFromSet(theString: CFStringRef, theSet: CFCharacterSetRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange, lineBeginIndex: [*c]CFIndex, lineEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange, parBeginIndex: [*c]CFIndex, parEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef, location: CFIndex, limitRange: CFRange, options: CFOptionFlags, locale: CFLocaleRef, character: [*c]UTF32Char) CFIndex;
pub extern fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) Boolean;
pub extern fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef, theArray: CFArrayRef, separatorString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef, theString: CFStringRef, separatorString: CFStringRef) CFArrayRef;
pub extern fn CFStringGetIntValue(str: CFStringRef) SInt32;
pub extern fn CFStringGetDoubleValue(str: CFStringRef) f64;
pub extern fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef) void;
pub extern fn CFStringAppendCharacters(theString: CFMutableStringRef, chars: [*c]const UniChar, numChars: CFIndex) void;
pub extern fn CFStringAppendPascalString(theString: CFMutableStringRef, pStr: ConstStr255Param, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendCString(theString: CFMutableStringRef, cStr: [*c]const u8, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendFormat(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) void;
pub extern fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) void;
pub extern fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef) void;
pub extern fn CFStringDelete(theString: CFMutableStringRef, range: CFRange) void;
pub extern fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef) void;
pub extern fn CFStringFindAndReplace(theString: CFMutableStringRef, stringToFind: CFStringRef, replacementString: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFIndex;
pub extern fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef, chars: [*c]UniChar, length: CFIndex, capacity: CFIndex) void;
pub extern fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef, length: CFIndex, indexIntoPad: CFIndex) void;
pub extern fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef) void;
pub extern fn CFStringTrimWhitespace(theString: CFMutableStringRef) void;
pub extern fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub const CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD: c_int = 0;
pub const kCFStringNormalizationFormKD: c_int = 1;
pub const kCFStringNormalizationFormC: c_int = 2;
pub const kCFStringNormalizationFormKC: c_int = 3;
const enum_unnamed_37 = c_uint;
pub extern fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm) void;
pub extern fn CFStringFold(theString: CFMutableStringRef, theFlags: CFStringCompareFlags, theLocale: CFLocaleRef) void;
pub extern fn CFStringTransform(string: CFMutableStringRef, range: [*c]CFRange, transform: CFStringRef, reverse: Boolean) Boolean;
pub extern const kCFStringTransformStripCombiningMarks: CFStringRef;
pub extern const kCFStringTransformToLatin: CFStringRef;
pub extern const kCFStringTransformFullwidthHalfwidth: CFStringRef;
pub extern const kCFStringTransformLatinKatakana: CFStringRef;
pub extern const kCFStringTransformLatinHiragana: CFStringRef;
pub extern const kCFStringTransformHiraganaKatakana: CFStringRef;
pub extern const kCFStringTransformMandarinLatin: CFStringRef;
pub extern const kCFStringTransformLatinHangul: CFStringRef;
pub extern const kCFStringTransformLatinArabic: CFStringRef;
pub extern const kCFStringTransformLatinHebrew: CFStringRef;
pub extern const kCFStringTransformLatinThai: CFStringRef;
pub extern const kCFStringTransformLatinCyrillic: CFStringRef;
pub extern const kCFStringTransformLatinGreek: CFStringRef;
pub extern const kCFStringTransformToXMLHex: CFStringRef;
pub extern const kCFStringTransformToUnicodeName: CFStringRef;
pub extern const kCFStringTransformStripDiacritics: CFStringRef;
pub extern fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetListOfAvailableEncodings() [*c]const CFStringEncoding;
pub extern fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringConvertEncodingToNSStringEncoding(encoding: CFStringEncoding) c_ulong;
pub extern fn CFStringConvertNSStringEncodingToEncoding(encoding: c_ulong) CFStringEncoding;
pub extern fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) UInt32;
pub extern fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) CFStringEncoding;
pub extern fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringGetMostCompatibleMacStringEncoding(encoding: CFStringEncoding) CFStringEncoding;
pub const CFStringInlineBuffer = extern struct {
    buffer: [64]UniChar = @import("std").mem.zeroes([64]UniChar),
    theString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    directUniCharBuffer: [*c]const UniChar = @import("std").mem.zeroes([*c]const UniChar),
    directCStringBuffer: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    rangeToBuffer: CFRange = @import("std").mem.zeroes(CFRange),
    bufferedRangeStart: CFIndex = @import("std").mem.zeroes(CFIndex),
    bufferedRangeEnd: CFIndex = @import("std").mem.zeroes(CFIndex),
};
pub inline fn CFStringInitInlineBuffer(arg_str: CFStringRef, arg_buf: [*c]CFStringInlineBuffer, arg_range: CFRange) void {
    var str = arg_str;
    _ = &str;
    var buf = arg_buf;
    _ = &buf;
    var range = arg_range;
    _ = &range;
    buf.*.theString = str;
    buf.*.rangeToBuffer = range;
    buf.*.directCStringBuffer = if ((blk: {
        const tmp = CFStringGetCharactersPtr(str);
        buf.*.directUniCharBuffer = tmp;
        break :blk tmp;
    }) != null) null else CFStringGetCStringPtr(str, @as(CFStringEncoding, @bitCast(kCFStringEncodingASCII)));
    buf.*.bufferedRangeStart = blk: {
        const tmp = @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))));
        buf.*.bufferedRangeEnd = tmp;
        break :blk tmp;
    };
}
pub inline fn CFStringGetCharacterFromInlineBuffer(arg_buf: [*c]CFStringInlineBuffer, arg_idx: CFIndex) UniChar {
    var buf = arg_buf;
    _ = &buf;
    var idx = arg_idx;
    _ = &idx;
    if ((idx < @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))))) or (idx >= buf.*.rangeToBuffer.length)) return 0;
    if (buf.*.directUniCharBuffer != null) return (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directUniCharBuffer + @as(usize, @intCast(tmp)) else break :blk buf.*.directUniCharBuffer - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*;
    if (buf.*.directCStringBuffer != null) return @as(UniChar, @bitCast(@as(c_ushort, (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directCStringBuffer + @as(usize, @intCast(tmp)) else break :blk buf.*.directCStringBuffer - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*)));
    if ((idx >= buf.*.bufferedRangeEnd) or (idx < buf.*.bufferedRangeStart)) {
        if ((blk: {
            const tmp = idx - @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 4))));
            buf.*.bufferedRangeStart = tmp;
            break :blk tmp;
        }) < @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))))) {
            buf.*.bufferedRangeStart = 0;
        }
        buf.*.bufferedRangeEnd = buf.*.bufferedRangeStart + @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 64))));
        if (buf.*.bufferedRangeEnd > buf.*.rangeToBuffer.length) {
            buf.*.bufferedRangeEnd = buf.*.rangeToBuffer.length;
        }
        CFStringGetCharacters(buf.*.theString, CFRangeMake(buf.*.rangeToBuffer.location + buf.*.bufferedRangeStart, buf.*.bufferedRangeEnd - buf.*.bufferedRangeStart), @as([*c]UniChar, @ptrCast(@alignCast(&buf.*.buffer[@as(usize, @intCast(0))]))));
    }
    return buf.*.buffer[@as(c_ulong, @intCast(idx - buf.*.bufferedRangeStart))];
}
pub inline fn CFStringIsSurrogateHighCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    return @as(Boolean, @bitCast(@as(i8, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) >= @as(c_ulong, 55296)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) <= @as(c_ulong, 56319))) @as(c_int, 1) else @as(c_int, 0)))));
}
pub inline fn CFStringIsSurrogateLowCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    return @as(Boolean, @bitCast(@as(i8, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) >= @as(c_ulong, 56320)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) <= @as(c_ulong, 57343))) @as(c_int, 1) else @as(c_int, 0)))));
}
pub inline fn CFStringGetLongCharacterForSurrogatePair(arg_surrogateHigh: UniChar, arg_surrogateLow: UniChar) UTF32Char {
    var surrogateHigh = arg_surrogateHigh;
    _ = &surrogateHigh;
    var surrogateLow = arg_surrogateLow;
    _ = &surrogateLow;
    return @as(UTF32Char, @bitCast(@as(c_uint, @truncate((((@as(c_ulong, @bitCast(@as(c_ulong, surrogateHigh))) -% @as(c_ulong, 55296)) << @intCast(10)) +% (@as(c_ulong, @bitCast(@as(c_ulong, surrogateLow))) -% @as(c_ulong, 56320))) +% @as(c_ulong, 65536)))));
}
pub inline fn CFStringGetSurrogatePairForLongCharacter(arg_character: UTF32Char, arg_surrogates: [*c]UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    var surrogates = arg_surrogates;
    _ = &surrogates;
    if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) > @as(c_ulong, 65535)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) < @as(c_ulong, 1114112))) {
        character -%= @as(UTF32Char, @bitCast(@as(c_int, 65536)));
        if (@as([*c]UniChar, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0)))))) != surrogates) {
            surrogates[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(UniChar, @bitCast(@as(c_ushort, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, character >> @intCast(10)))) +% @as(c_ulong, 55296)))));
            surrogates[@as(c_uint, @intCast(@as(c_int, 1)))] = @as(UniChar, @bitCast(@as(c_ushort, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, character & @as(UTF32Char, @bitCast(@as(c_int, 1023)))))) +% @as(c_ulong, 56320)))));
        }
        return 1;
    } else {
        if (@as([*c]UniChar, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0)))))) != surrogates) {
            surrogates.* = @as(UniChar, @bitCast(@as(c_ushort, @truncate(character))));
        }
        return 0;
    }
    return @import("std").mem.zeroes(Boolean);
}
pub extern fn CFShow(obj: CFTypeRef) void;
pub extern fn CFShowStr(str: CFStringRef) void;
pub extern fn __CFStringMakeConstantString(cStr: [*c]const u8) CFStringRef;
pub extern fn CFTimeZoneGetTypeID() CFTypeID;
pub extern fn CFTimeZoneCopySystem() CFTimeZoneRef;
pub extern fn CFTimeZoneResetSystem() void;
pub extern fn CFTimeZoneCopyDefault() CFTimeZoneRef;
pub extern fn CFTimeZoneSetDefault(tz: CFTimeZoneRef) void;
pub extern fn CFTimeZoneCopyKnownNames() CFArrayRef;
pub extern fn CFTimeZoneCopyAbbreviationDictionary() CFDictionaryRef;
pub extern fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef) void;
pub extern fn CFTimeZoneCreate(allocator: CFAllocatorRef, name: CFStringRef, data: CFDataRef) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: CFAllocatorRef, ti: CFTimeInterval) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithName(allocator: CFAllocatorRef, name: CFStringRef, tryAbbrev: Boolean) CFTimeZoneRef;
pub extern fn CFTimeZoneGetName(tz: CFTimeZoneRef) CFStringRef;
pub extern fn CFTimeZoneGetData(tz: CFTimeZoneRef) CFDataRef;
pub extern fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) Boolean;
pub extern fn CFTimeZoneGetDaylightSavingTimeOffset(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFAbsoluteTime;
pub const CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard: c_int = 0;
pub const kCFTimeZoneNameStyleShortStandard: c_int = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: c_int = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: c_int = 3;
pub const kCFTimeZoneNameStyleGeneric: c_int = 4;
pub const kCFTimeZoneNameStyleShortGeneric: c_int = 5;
const enum_unnamed_38 = c_uint;
pub extern fn CFTimeZoneCopyLocalizedName(tz: CFTimeZoneRef, style: CFTimeZoneNameStyle, locale: CFLocaleRef) CFStringRef;
pub extern const kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
pub const struct___CFCalendar = opaque {};
pub const CFCalendarRef = ?*struct___CFCalendar;
pub extern fn CFCalendarGetTypeID() CFTypeID;
pub extern fn CFCalendarCopyCurrent() CFCalendarRef;
pub extern fn CFCalendarCreateWithIdentifier(allocator: CFAllocatorRef, identifier: CFCalendarIdentifier) CFCalendarRef;
pub extern fn CFCalendarGetIdentifier(calendar: CFCalendarRef) CFCalendarIdentifier;
pub extern fn CFCalendarCopyLocale(calendar: CFCalendarRef) CFLocaleRef;
pub extern fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef) void;
pub extern fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) CFTimeZoneRef;
pub extern fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef) void;
pub extern fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex) void;
pub extern fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex) void;
pub const CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra: c_int = 2;
pub const kCFCalendarUnitYear: c_int = 4;
pub const kCFCalendarUnitMonth: c_int = 8;
pub const kCFCalendarUnitDay: c_int = 16;
pub const kCFCalendarUnitHour: c_int = 32;
pub const kCFCalendarUnitMinute: c_int = 64;
pub const kCFCalendarUnitSecond: c_int = 128;
pub const kCFCalendarUnitWeek: c_int = 256;
pub const kCFCalendarUnitWeekday: c_int = 512;
pub const kCFCalendarUnitWeekdayOrdinal: c_int = 1024;
pub const kCFCalendarUnitQuarter: c_int = 2048;
pub const kCFCalendarUnitWeekOfMonth: c_int = 4096;
pub const kCFCalendarUnitWeekOfYear: c_int = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: c_int = 16384;
pub const kCFCalendarUnitDayOfYear: c_int = 65536;
const enum_unnamed_39 = c_uint;
pub extern fn CFCalendarGetMinimumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetMaximumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetRangeOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFRange;
pub extern fn CFCalendarGetOrdinalityOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFIndex;
pub extern fn CFCalendarGetTimeRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit, at: CFAbsoluteTime, startp: [*c]CFAbsoluteTime, tip: [*c]CFTimeInterval) Boolean;
pub extern fn CFCalendarComposeAbsoluteTime(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarDecomposeAbsoluteTime(calendar: CFCalendarRef, at: CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub const kCFCalendarComponentsWrap: c_int = 1;
const enum_unnamed_40 = c_uint;
pub extern fn CFCalendarAddComponents(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarGetComponentDifference(calendar: CFCalendarRef, startingAT: CFAbsoluteTime, resultAT: CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub const CGFloat = f64;
pub const struct_CGPoint = extern struct {
    x: CGFloat = @import("std").mem.zeroes(CGFloat),
    y: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGPoint = struct_CGPoint;
pub const struct_CGSize = extern struct {
    width: CGFloat = @import("std").mem.zeroes(CGFloat),
    height: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGSize = struct_CGSize;
pub const struct_CGVector = extern struct {
    dx: CGFloat = @import("std").mem.zeroes(CGFloat),
    dy: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGVector = struct_CGVector;
pub const struct_CGRect = extern struct {
    origin: CGPoint = @import("std").mem.zeroes(CGPoint),
    size: CGSize = @import("std").mem.zeroes(CGSize),
};
pub const CGRect = struct_CGRect;
pub const CGRectEdge = u32;
pub const CGRectMinXEdge: c_int = 0;
pub const CGRectMinYEdge: c_int = 1;
pub const CGRectMaxXEdge: c_int = 2;
pub const CGRectMaxYEdge: c_int = 3;
const enum_unnamed_41 = c_uint;
pub const struct_CGAffineTransform = extern struct {
    a: CGFloat = @import("std").mem.zeroes(CGFloat),
    b: CGFloat = @import("std").mem.zeroes(CGFloat),
    c: CGFloat = @import("std").mem.zeroes(CGFloat),
    d: CGFloat = @import("std").mem.zeroes(CGFloat),
    tx: CGFloat = @import("std").mem.zeroes(CGFloat),
    ty: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGAffineTransform = struct_CGAffineTransform;
pub const struct_CGAffineTransformComponents = extern struct {
    scale: CGSize = @import("std").mem.zeroes(CGSize),
    horizontalShear: CGFloat = @import("std").mem.zeroes(CGFloat),
    rotation: CGFloat = @import("std").mem.zeroes(CGFloat),
    translation: CGVector = @import("std").mem.zeroes(CGVector),
};
pub const CGAffineTransformComponents = struct_CGAffineTransformComponents;
pub const CFDateFormatterKey = CFStringRef;
pub const struct___CFDateFormatter = opaque {};
pub const CFDateFormatterRef = ?*struct___CFDateFormatter;
pub extern fn CFDateFormatterCreateDateFormatFromTemplate(allocator: CFAllocatorRef, tmplate: CFStringRef, options: CFOptionFlags, locale: CFLocaleRef) CFStringRef;
pub extern fn CFDateFormatterGetTypeID() CFTypeID;
pub const CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle: c_int = 0;
pub const kCFDateFormatterShortStyle: c_int = 1;
pub const kCFDateFormatterMediumStyle: c_int = 2;
pub const kCFDateFormatterLongStyle: c_int = 3;
pub const kCFDateFormatterFullStyle: c_int = 4;
const enum_unnamed_42 = c_uint;
pub const CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear: c_int = 1;
pub const kCFISO8601DateFormatWithMonth: c_int = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: c_int = 4;
pub const kCFISO8601DateFormatWithDay: c_int = 16;
pub const kCFISO8601DateFormatWithTime: c_int = 32;
pub const kCFISO8601DateFormatWithTimeZone: c_int = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: c_int = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: c_int = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: c_int = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: c_int = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: c_int = 2048;
pub const kCFISO8601DateFormatWithFullDate: c_int = 275;
pub const kCFISO8601DateFormatWithFullTime: c_int = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: c_int = 1907;
const enum_unnamed_43 = c_uint;
pub extern fn CFDateFormatterCreateISO8601Formatter(allocator: CFAllocatorRef, formatOptions: CFISO8601DateFormatOptions) CFDateFormatterRef;
pub extern fn CFDateFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle) CFDateFormatterRef;
pub extern fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) CFLocaleRef;
pub extern fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) CFStringRef;
pub extern fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef) void;
pub extern fn CFDateFormatterCreateStringWithDate(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, date: CFDateRef) CFStringRef;
pub extern fn CFDateFormatterCreateStringWithAbsoluteTime(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFDateFormatterCreateDateFromString(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange) CFDateRef;
pub extern fn CFDateFormatterGetAbsoluteTimeFromString(formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange, atp: [*c]CFAbsoluteTime) Boolean;
pub extern fn CFDateFormatterSetProperty(formatter: CFDateFormatterRef, key: CFStringRef, value: CFTypeRef) void;
pub extern fn CFDateFormatterCopyProperty(formatter: CFDateFormatterRef, key: CFDateFormatterKey) CFTypeRef;
pub extern const kCFDateFormatterIsLenient: CFDateFormatterKey;
pub extern const kCFDateFormatterTimeZone: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendarName: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultFormat: CFDateFormatterKey;
pub extern const kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultDate: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendar: CFDateFormatterKey;
pub extern const kCFDateFormatterEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterAMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterPMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
pub const struct___CFBoolean = opaque {};
pub const CFBooleanRef = ?*const struct___CFBoolean;
pub extern const kCFBooleanTrue: CFBooleanRef;
pub extern const kCFBooleanFalse: CFBooleanRef;
pub extern fn CFBooleanGetTypeID() CFTypeID;
pub extern fn CFBooleanGetValue(boolean: CFBooleanRef) Boolean;
pub const CFNumberType = CFIndex;
pub const kCFNumberSInt8Type: c_int = 1;
pub const kCFNumberSInt16Type: c_int = 2;
pub const kCFNumberSInt32Type: c_int = 3;
pub const kCFNumberSInt64Type: c_int = 4;
pub const kCFNumberFloat32Type: c_int = 5;
pub const kCFNumberFloat64Type: c_int = 6;
pub const kCFNumberCharType: c_int = 7;
pub const kCFNumberShortType: c_int = 8;
pub const kCFNumberIntType: c_int = 9;
pub const kCFNumberLongType: c_int = 10;
pub const kCFNumberLongLongType: c_int = 11;
pub const kCFNumberFloatType: c_int = 12;
pub const kCFNumberDoubleType: c_int = 13;
pub const kCFNumberCFIndexType: c_int = 14;
pub const kCFNumberNSIntegerType: c_int = 15;
pub const kCFNumberCGFloatType: c_int = 16;
pub const kCFNumberMaxType: c_int = 16;
const enum_unnamed_44 = c_uint;
pub const struct___CFNumber = opaque {};
pub const CFNumberRef = ?*const struct___CFNumber;
pub extern const kCFNumberPositiveInfinity: CFNumberRef;
pub extern const kCFNumberNegativeInfinity: CFNumberRef;
pub extern const kCFNumberNaN: CFNumberRef;
pub extern fn CFNumberGetTypeID() CFTypeID;
pub extern fn CFNumberCreate(allocator: CFAllocatorRef, theType: CFNumberType, valuePtr: ?*const anyopaque) CFNumberRef;
pub extern fn CFNumberGetType(number: CFNumberRef) CFNumberType;
pub extern fn CFNumberGetByteSize(number: CFNumberRef) CFIndex;
pub extern fn CFNumberIsFloatType(number: CFNumberRef) Boolean;
pub extern fn CFNumberGetValue(number: CFNumberRef, theType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberCompare(number: CFNumberRef, otherNumber: CFNumberRef, context: ?*anyopaque) CFComparisonResult;
pub const CFNumberFormatterKey = CFStringRef;
pub const struct___CFNumberFormatter = opaque {};
pub const CFNumberFormatterRef = ?*struct___CFNumberFormatter;
pub extern fn CFNumberFormatterGetTypeID() CFTypeID;
pub const CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle: c_int = 0;
pub const kCFNumberFormatterDecimalStyle: c_int = 1;
pub const kCFNumberFormatterCurrencyStyle: c_int = 2;
pub const kCFNumberFormatterPercentStyle: c_int = 3;
pub const kCFNumberFormatterScientificStyle: c_int = 4;
pub const kCFNumberFormatterSpellOutStyle: c_int = 5;
pub const kCFNumberFormatterOrdinalStyle: c_int = 6;
pub const kCFNumberFormatterCurrencyISOCodeStyle: c_int = 8;
pub const kCFNumberFormatterCurrencyPluralStyle: c_int = 9;
pub const kCFNumberFormatterCurrencyAccountingStyle: c_int = 10;
const enum_unnamed_45 = c_uint;
pub extern fn CFNumberFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, style: CFNumberFormatterStyle) CFNumberFormatterRef;
pub extern fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) CFLocaleRef;
pub extern fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) CFNumberFormatterStyle;
pub extern fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) CFStringRef;
pub extern fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef) void;
pub extern fn CFNumberFormatterCreateStringWithNumber(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, number: CFNumberRef) CFStringRef;
pub extern fn CFNumberFormatterCreateStringWithValue(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, numberType: CFNumberType, valuePtr: ?*const anyopaque) CFStringRef;
pub const CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly: c_int = 1;
const enum_unnamed_46 = c_uint;
pub extern fn CFNumberFormatterCreateNumberFromString(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, options: CFOptionFlags) CFNumberRef;
pub extern fn CFNumberFormatterGetValueFromString(formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, numberType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberFormatterSetProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey, value: CFTypeRef) void;
pub extern fn CFNumberFormatterCopyProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey) CFTypeRef;
pub extern const kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPlusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
pub extern const kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMultiplier: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterIsLenient: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinGroupingDigits: CFNumberFormatterKey;
pub const CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling: c_int = 0;
pub const kCFNumberFormatterRoundFloor: c_int = 1;
pub const kCFNumberFormatterRoundDown: c_int = 2;
pub const kCFNumberFormatterRoundUp: c_int = 3;
pub const kCFNumberFormatterRoundHalfEven: c_int = 4;
pub const kCFNumberFormatterRoundHalfDown: c_int = 5;
pub const kCFNumberFormatterRoundHalfUp: c_int = 6;
const enum_unnamed_47 = c_uint;
pub const CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix: c_int = 0;
pub const kCFNumberFormatterPadAfterPrefix: c_int = 1;
pub const kCFNumberFormatterPadBeforeSuffix: c_int = 2;
pub const kCFNumberFormatterPadAfterSuffix: c_int = 3;
const enum_unnamed_48 = c_uint;
pub extern fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: CFStringRef, defaultFractionDigits: [*c]i32, roundingIncrement: [*c]f64) Boolean;
pub extern const kCFPreferencesAnyApplication: CFStringRef;
pub extern const kCFPreferencesCurrentApplication: CFStringRef;
pub extern const kCFPreferencesAnyHost: CFStringRef;
pub extern const kCFPreferencesCurrentHost: CFStringRef;
pub extern const kCFPreferencesAnyUser: CFStringRef;
pub extern const kCFPreferencesCurrentUser: CFStringRef;
pub extern fn CFPreferencesCopyAppValue(key: CFStringRef, applicationID: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesGetAppBooleanValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) Boolean;
pub extern fn CFPreferencesGetAppIntegerValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) CFIndex;
pub extern fn CFPreferencesSetAppValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef) void;
pub extern fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesAppSynchronize(applicationID: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyValue(key: CFStringRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesCopyMultiple(keysToFetch: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFDictionaryRef;
pub extern fn CFPreferencesSetValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSetMultiple(keysToSet: CFDictionaryRef, keysToRemove: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSynchronize(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyApplicationList(userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesCopyKeyList(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) Boolean;
pub const CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle: c_int = 0;
pub const kCFURLHFSPathStyle: c_int = 1;
pub const kCFURLWindowsPathStyle: c_int = 2;
const enum_unnamed_49 = c_uint;
pub const struct___CFURL = opaque {};
pub const CFURLRef = ?*const struct___CFURL;
pub extern fn CFURLGetTypeID() CFTypeID;
pub extern fn CFURLCreateWithBytes(allocator: CFAllocatorRef, URLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateData(allocator: CFAllocatorRef, url: CFURLRef, encoding: CFStringEncoding, escapeWhitespace: Boolean) CFDataRef;
pub extern fn CFURLCreateWithString(allocator: CFAllocatorRef, URLString: CFStringRef, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateAbsoluteURLWithBytes(alloc: CFAllocatorRef, relativeURLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef, useCompatibilityMode: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPath(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentation(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPathRelativeToBase(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetFileSystemRepresentation(url: CFURLRef, resolveAgainstBase: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex) Boolean;
pub extern fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetString(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetBaseURL(anURL: CFURLRef) CFURLRef;
pub extern fn CFURLCanBeDecomposed(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyScheme(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyNetLocation(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPath(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: [*c]Boolean) CFStringRef;
pub extern fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) CFStringRef;
pub extern fn CFURLHasDirectoryPath(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyResourceSpecifier(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyHostName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetPortNumber(anURL: CFURLRef) SInt32;
pub extern fn CFURLCopyUserName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPassword(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyParameterString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyQueryString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyLastPathComponent(url: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPathExtension(url: CFURLRef) CFStringRef;
pub extern fn CFURLCreateCopyAppendingPathComponent(allocator: CFAllocatorRef, url: CFURLRef, pathComponent: CFStringRef, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateCopyDeletingLastPathComponent(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLCreateCopyAppendingPathExtension(allocator: CFAllocatorRef, url: CFURLRef, extension: CFStringRef) CFURLRef;
pub extern fn CFURLCreateCopyDeletingPathExtension(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLGetBytes(url: CFURLRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub const CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme: c_int = 1;
pub const kCFURLComponentNetLocation: c_int = 2;
pub const kCFURLComponentPath: c_int = 3;
pub const kCFURLComponentResourceSpecifier: c_int = 4;
pub const kCFURLComponentUser: c_int = 5;
pub const kCFURLComponentPassword: c_int = 6;
pub const kCFURLComponentUserInfo: c_int = 7;
pub const kCFURLComponentHost: c_int = 8;
pub const kCFURLComponentPort: c_int = 9;
pub const kCFURLComponentParameterString: c_int = 10;
pub const kCFURLComponentQuery: c_int = 11;
pub const kCFURLComponentFragment: c_int = 12;
const enum_unnamed_50 = c_uint;
pub extern fn CFURLGetByteRangeForComponent(url: CFURLRef, component: CFURLComponentType, rangeIncludingSeparators: [*c]CFRange) CFRange;
pub extern fn CFURLCreateStringByReplacingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator: CFAllocatorRef, origString: CFStringRef, charsToLeaveEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLCreateStringByAddingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveUnescaped: CFStringRef, legalURLCharactersToBeEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLIsFileReferenceURL(url: CFURLRef) Boolean;
pub extern fn CFURLCreateFileReferenceURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateFilePathURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub const struct_FSRef = opaque {};
pub extern fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: ?*const struct_FSRef) CFURLRef;
pub extern fn CFURLGetFSRef(url: CFURLRef, fsRef: ?*struct_FSRef) Boolean;
pub extern fn CFURLCopyResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValueTypeRefPtr: ?*anyopaque, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLCopyResourcePropertiesForKeys(url: CFURLRef, keys: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn CFURLSetResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLSetResourcePropertiesForKeys(url: CFURLRef, keyedPropertyValues: CFDictionaryRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLKeysOfUnsetValuesKey: CFStringRef;
pub extern fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef) void;
pub extern fn CFURLClearResourcePropertyCache(url: CFURLRef) void;
pub extern fn CFURLSetTemporaryResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef) void;
pub extern fn CFURLResourceIsReachable(url: CFURLRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLNameKey: CFStringRef;
pub extern const kCFURLLocalizedNameKey: CFStringRef;
pub extern const kCFURLIsRegularFileKey: CFStringRef;
pub extern const kCFURLIsDirectoryKey: CFStringRef;
pub extern const kCFURLIsSymbolicLinkKey: CFStringRef;
pub extern const kCFURLIsVolumeKey: CFStringRef;
pub extern const kCFURLIsPackageKey: CFStringRef;
pub extern const kCFURLIsApplicationKey: CFStringRef;
pub extern const kCFURLApplicationIsScriptableKey: CFStringRef;
pub extern const kCFURLIsSystemImmutableKey: CFStringRef;
pub extern const kCFURLIsUserImmutableKey: CFStringRef;
pub extern const kCFURLIsHiddenKey: CFStringRef;
pub extern const kCFURLHasHiddenExtensionKey: CFStringRef;
pub extern const kCFURLCreationDateKey: CFStringRef;
pub extern const kCFURLContentAccessDateKey: CFStringRef;
pub extern const kCFURLContentModificationDateKey: CFStringRef;
pub extern const kCFURLAttributeModificationDateKey: CFStringRef;
pub extern const kCFURLFileIdentifierKey: CFStringRef;
pub extern const kCFURLFileContentIdentifierKey: CFStringRef;
pub extern const kCFURLMayShareFileContentKey: CFStringRef;
pub extern const kCFURLMayHaveExtendedAttributesKey: CFStringRef;
pub extern const kCFURLIsPurgeableKey: CFStringRef;
pub extern const kCFURLIsSparseKey: CFStringRef;
pub extern const kCFURLLinkCountKey: CFStringRef;
pub extern const kCFURLParentDirectoryURLKey: CFStringRef;
pub extern const kCFURLVolumeURLKey: CFStringRef;
pub extern const kCFURLTypeIdentifierKey: CFStringRef;
pub extern const kCFURLLocalizedTypeDescriptionKey: CFStringRef;
pub extern const kCFURLLabelNumberKey: CFStringRef;
pub extern const kCFURLLabelColorKey: CFStringRef;
pub extern const kCFURLLocalizedLabelKey: CFStringRef;
pub extern const kCFURLEffectiveIconKey: CFStringRef;
pub extern const kCFURLCustomIconKey: CFStringRef;
pub extern const kCFURLFileResourceIdentifierKey: CFStringRef;
pub extern const kCFURLVolumeIdentifierKey: CFStringRef;
pub extern const kCFURLPreferredIOBlockSizeKey: CFStringRef;
pub extern const kCFURLIsReadableKey: CFStringRef;
pub extern const kCFURLIsWritableKey: CFStringRef;
pub extern const kCFURLIsExecutableKey: CFStringRef;
pub extern const kCFURLFileSecurityKey: CFStringRef;
pub extern const kCFURLIsExcludedFromBackupKey: CFStringRef;
pub extern const kCFURLTagNamesKey: CFStringRef;
pub extern const kCFURLPathKey: CFStringRef;
pub extern const kCFURLCanonicalPathKey: CFStringRef;
pub extern const kCFURLIsMountTriggerKey: CFStringRef;
pub extern const kCFURLGenerationIdentifierKey: CFStringRef;
pub extern const kCFURLDocumentIdentifierKey: CFStringRef;
pub extern const kCFURLAddedToDirectoryDateKey: CFStringRef;
pub extern const kCFURLQuarantinePropertiesKey: CFStringRef;
pub extern const kCFURLFileResourceTypeKey: CFStringRef;
pub extern const kCFURLFileResourceTypeNamedPipe: CFStringRef;
pub extern const kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeDirectory: CFStringRef;
pub extern const kCFURLFileResourceTypeBlockSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeRegular: CFStringRef;
pub extern const kCFURLFileResourceTypeSymbolicLink: CFStringRef;
pub extern const kCFURLFileResourceTypeSocket: CFStringRef;
pub extern const kCFURLFileResourceTypeUnknown: CFStringRef;
pub extern const kCFURLFileSizeKey: CFStringRef;
pub extern const kCFURLFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLTotalFileSizeKey: CFStringRef;
pub extern const kCFURLTotalFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLIsAliasFileKey: CFStringRef;
pub extern const kCFURLFileProtectionKey: CFStringRef;
pub extern const kCFURLFileProtectionNone: CFStringRef;
pub extern const kCFURLFileProtectionComplete: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
pub extern const kCFURLFileProtectionCompleteWhenUserInactive: CFStringRef;
pub extern const kCFURLDirectoryEntryCountKey: CFStringRef;
pub extern const kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
pub extern const kCFURLVolumeTotalCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
pub extern const kCFURLVolumeResourceCountKey: CFStringRef;
pub extern const kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsHardLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeIsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
pub extern const kCFURLVolumeIsBrowsableKey: CFStringRef;
pub extern const kCFURLVolumeMaximumFileSizeKey: CFStringRef;
pub extern const kCFURLVolumeIsEjectableKey: CFStringRef;
pub extern const kCFURLVolumeIsRemovableKey: CFStringRef;
pub extern const kCFURLVolumeIsInternalKey: CFStringRef;
pub extern const kCFURLVolumeIsAutomountedKey: CFStringRef;
pub extern const kCFURLVolumeIsLocalKey: CFStringRef;
pub extern const kCFURLVolumeIsReadOnlyKey: CFStringRef;
pub extern const kCFURLVolumeCreationDateKey: CFStringRef;
pub extern const kCFURLVolumeURLForRemountingKey: CFStringRef;
pub extern const kCFURLVolumeUUIDStringKey: CFStringRef;
pub extern const kCFURLVolumeNameKey: CFStringRef;
pub extern const kCFURLVolumeLocalizedNameKey: CFStringRef;
pub extern const kCFURLVolumeIsEncryptedKey: CFStringRef;
pub extern const kCFURLVolumeIsRootFileSystemKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCompressionKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileCloningKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
pub extern const kCFURLVolumeTypeNameKey: CFStringRef;
pub extern const kCFURLVolumeSubtypeKey: CFStringRef;
pub extern const kCFURLVolumeMountFromLocationKey: CFStringRef;
pub extern const kCFURLIsUbiquitousItemKey: CFStringRef;
pub extern const kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
pub const CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: c_int = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: c_int = 1024;
pub const kCFURLBookmarkCreationWithSecurityScope: c_int = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: c_int = 4096;
pub const kCFURLBookmarkCreationWithoutImplicitSecurityScope: c_int = 536870912;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: c_int = 256;
const enum_unnamed_51 = c_uint;
pub const CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: c_int = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: c_int = 1024;
pub const kCFURLBookmarkResolutionWithoutImplicitStartAccessing: c_int = 32768;
pub const kCFBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: c_int = 512;
const enum_unnamed_52 = c_uint;
pub const CFURLBookmarkFileCreationOptions = CFOptionFlags;
pub extern fn CFURLCreateBookmarkData(allocator: CFAllocatorRef, url: CFURLRef, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: CFArrayRef, relativeToURL: CFURLRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLCreateByResolvingBookmarkData(allocator: CFAllocatorRef, bookmark: CFDataRef, options: CFURLBookmarkResolutionOptions, relativeToURL: CFURLRef, resourcePropertiesToInclude: CFArrayRef, isStale: [*c]Boolean, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: CFAllocatorRef, resourcePropertiesToReturn: CFArrayRef, bookmark: CFDataRef) CFDictionaryRef;
pub extern fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: CFAllocatorRef, resourcePropertyKey: CFStringRef, bookmark: CFDataRef) CFTypeRef;
pub extern fn CFURLCreateBookmarkDataFromFile(allocator: CFAllocatorRef, fileURL: CFURLRef, errorRef: [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLWriteBookmarkDataToFile(bookmarkRef: CFDataRef, fileURL: CFURLRef, options: CFURLBookmarkFileCreationOptions, errorRef: [*c]CFErrorRef) Boolean;
pub extern fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: CFAllocatorRef, aliasRecordDataRef: CFDataRef) CFDataRef;
pub extern fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) Boolean;
pub extern fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef) void;
pub const boolean_t = c_int;
pub const natural_t = __darwin_natural_t;
pub const integer_t = c_int;
pub const vm_offset_t = usize;
pub const vm_size_t = usize;
pub const mach_vm_address_t = u64;
pub const mach_vm_offset_t = u64;
pub const mach_vm_size_t = u64;
pub const vm_map_offset_t = u64;
pub const vm_map_address_t = u64;
pub const vm_map_size_t = u64;
pub const vm32_offset_t = u32;
pub const vm32_address_t = u32;
pub const vm32_size_t = u32;
pub const mach_port_context_t = vm_offset_t;
pub const mach_port_name_t = natural_t;
pub const mach_port_name_array_t = [*c]mach_port_name_t;
pub const mach_port_t = __darwin_mach_port_t;
pub const mach_port_array_t = [*c]mach_port_t;
pub const mach_port_right_t = natural_t;
pub const mach_port_type_t = natural_t;
pub const mach_port_type_array_t = [*c]mach_port_type_t;
pub const mach_port_urefs_t = natural_t;
pub const mach_port_delta_t = integer_t;
pub const mach_port_seqno_t = natural_t;
pub const mach_port_mscount_t = natural_t;
pub const mach_port_msgcount_t = natural_t;
pub const mach_port_rights_t = natural_t;
pub const mach_port_srights_t = c_uint;
pub const struct_mach_port_status = extern struct {
    mps_pset: mach_port_rights_t = @import("std").mem.zeroes(mach_port_rights_t),
    mps_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    mps_mscount: mach_port_mscount_t = @import("std").mem.zeroes(mach_port_mscount_t),
    mps_qlimit: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    mps_msgcount: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    mps_sorights: mach_port_rights_t = @import("std").mem.zeroes(mach_port_rights_t),
    mps_srights: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_pdrequest: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_nsrequest: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_flags: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const mach_port_status_t = struct_mach_port_status;
pub const struct_mach_port_limits = extern struct {
    mpl_qlimit: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
};
pub const mach_port_limits_t = struct_mach_port_limits;
pub const struct_mach_port_info_ext = extern struct {
    mpie_status: mach_port_status_t = @import("std").mem.zeroes(mach_port_status_t),
    mpie_boost_cnt: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    reserved: [6]u32 = @import("std").mem.zeroes([6]u32),
};
pub const mach_port_info_ext_t = struct_mach_port_info_ext;
pub const struct_mach_port_guard_info = extern struct {
    mpgi_guard: u64 = @import("std").mem.zeroes(u64),
};
pub const mach_port_guard_info_t = struct_mach_port_guard_info;
pub const mach_port_info_t = [*c]integer_t;
pub const mach_port_flavor_t = c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/port.h:326:26: warning: struct demoted to opaque type - has bitfield
pub const struct_mach_port_qos = opaque {};
pub const mach_port_qos_t = struct_mach_port_qos;
pub const struct_mach_service_port_info = extern struct {
    mspi_string_name: [255]u8 = @import("std").mem.zeroes([255]u8),
    mspi_domain_type: u8 = @import("std").mem.zeroes(u8),
};
pub const mach_service_port_info_data_t = struct_mach_service_port_info;
pub const mach_service_port_info_t = [*c]struct_mach_service_port_info;
const union_unnamed_53 = extern union {
    reserved: [2]u64,
    work_interval_port: mach_port_name_t,
    service_port_info: mach_service_port_info_t,
    service_port_name: mach_port_name_t,
};
pub const struct_mach_port_options = extern struct {
    flags: u32 = @import("std").mem.zeroes(u32),
    mpl: mach_port_limits_t = @import("std").mem.zeroes(mach_port_limits_t),
    unnamed_0: union_unnamed_53 = @import("std").mem.zeroes(union_unnamed_53),
};
pub const mach_port_options_t = struct_mach_port_options;
pub const mach_port_options_ptr_t = [*c]mach_port_options_t;
pub const kGUARD_EXC_DESTROY: c_int = 1;
pub const kGUARD_EXC_MOD_REFS: c_int = 2;
pub const kGUARD_EXC_INVALID_OPTIONS: c_int = 3;
pub const kGUARD_EXC_SET_CONTEXT: c_int = 4;
pub const kGUARD_EXC_THREAD_SET_STATE: c_int = 5;
pub const kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE: c_int = 6;
pub const kGUARD_EXC_SERVICE_PORT_VIOLATION_FATAL: c_int = 7;
pub const kGUARD_EXC_UNGUARDED: c_int = 8;
pub const kGUARD_EXC_INCORRECT_GUARD: c_int = 16;
pub const kGUARD_EXC_IMMOVABLE: c_int = 32;
pub const kGUARD_EXC_STRICT_REPLY: c_int = 64;
pub const kGUARD_EXC_MSG_FILTERED: c_int = 128;
pub const kGUARD_EXC_INVALID_RIGHT: c_int = 256;
pub const kGUARD_EXC_INVALID_NAME: c_int = 512;
pub const kGUARD_EXC_INVALID_VALUE: c_int = 1024;
pub const kGUARD_EXC_INVALID_ARGUMENT: c_int = 2048;
pub const kGUARD_EXC_RIGHT_EXISTS: c_int = 4096;
pub const kGUARD_EXC_KERN_NO_SPACE: c_int = 8192;
pub const kGUARD_EXC_KERN_FAILURE: c_int = 16384;
pub const kGUARD_EXC_KERN_RESOURCE: c_int = 32768;
pub const kGUARD_EXC_SEND_INVALID_REPLY: c_int = 65536;
pub const kGUARD_EXC_SEND_INVALID_VOUCHER: c_int = 131072;
pub const kGUARD_EXC_SEND_INVALID_RIGHT: c_int = 262144;
pub const kGUARD_EXC_RCV_INVALID_NAME: c_int = 524288;
pub const kGUARD_EXC_RCV_GUARDED_DESC: c_int = 1048576;
pub const kGUARD_EXC_SERVICE_PORT_VIOLATION_NON_FATAL: c_int = 1048577;
pub const kGUARD_EXC_PROVISIONAL_REPLY_PORT: c_int = 1048578;
pub const kGUARD_EXC_MOD_REFS_NON_FATAL: c_int = 2097152;
pub const kGUARD_EXC_IMMOVABLE_NON_FATAL: c_int = 4194304;
pub const kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS: c_int = 8388608;
pub const enum_mach_port_guard_exception_codes = c_uint;
pub const CFRunLoopMode = CFStringRef;
pub const struct___CFRunLoop = opaque {};
pub const CFRunLoopRef = ?*struct___CFRunLoop;
pub const struct___CFRunLoopSource = opaque {};
pub const CFRunLoopSourceRef = ?*struct___CFRunLoopSource;
pub const struct___CFRunLoopObserver = opaque {};
pub const CFRunLoopObserverRef = ?*struct___CFRunLoopObserver;
pub const struct___CFRunLoopTimer = opaque {};
pub const CFRunLoopTimerRef = ?*struct___CFRunLoopTimer;
pub const CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished: c_int = 1;
pub const kCFRunLoopRunStopped: c_int = 2;
pub const kCFRunLoopRunTimedOut: c_int = 3;
pub const kCFRunLoopRunHandledSource: c_int = 4;
const enum_unnamed_54 = c_uint;
pub const CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry: c_int = 1;
pub const kCFRunLoopBeforeTimers: c_int = 2;
pub const kCFRunLoopBeforeSources: c_int = 4;
pub const kCFRunLoopBeforeWaiting: c_int = 32;
pub const kCFRunLoopAfterWaiting: c_int = 64;
pub const kCFRunLoopExit: c_int = 128;
pub const kCFRunLoopAllActivities: c_int = 268435455;
const enum_unnamed_55 = c_uint;
pub extern const kCFRunLoopDefaultMode: CFRunLoopMode;
pub extern const kCFRunLoopCommonModes: CFRunLoopMode;
pub extern fn CFRunLoopGetTypeID() CFTypeID;
pub extern fn CFRunLoopGetCurrent() CFRunLoopRef;
pub extern fn CFRunLoopGetMain() CFRunLoopRef;
pub extern fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) CFRunLoopMode;
pub extern fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) CFArrayRef;
pub extern fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) CFAbsoluteTime;
pub extern fn CFRunLoopRun() void;
pub extern fn CFRunLoopRunInMode(mode: CFRunLoopMode, seconds: CFTimeInterval, returnAfterSourceHandled: Boolean) CFRunLoopRunResult;
pub extern fn CFRunLoopIsWaiting(rl: CFRunLoopRef) Boolean;
pub extern fn CFRunLoopWakeUp(rl: CFRunLoopRef) void;
pub extern fn CFRunLoopStop(rl: CFRunLoopRef) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:81:16: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopPerformBlock = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:81:16
pub extern fn CFRunLoopContainsSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub const CFRunLoopSourceContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
    equal: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean),
    hash: ?*const fn (?*const anyopaque) callconv(.c) CFHashCode = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFHashCode),
    schedule: ?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.c) void),
    cancel: ?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.c) void),
    perform: ?*const fn (?*anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) void),
};
pub const CFRunLoopSourceContext1 = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
    equal: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean),
    hash: ?*const fn (?*const anyopaque) callconv(.c) CFHashCode = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFHashCode),
    getPort: ?*const fn (?*anyopaque) callconv(.c) mach_port_t = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) mach_port_t),
    perform: ?*const fn (?*anyopaque, CFIndex, CFAllocatorRef, ?*anyopaque) callconv(.c) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFIndex, CFAllocatorRef, ?*anyopaque) callconv(.c) ?*anyopaque),
};
pub extern fn CFRunLoopSourceGetTypeID() CFTypeID;
pub extern fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex, context: [*c]CFRunLoopSourceContext) CFRunLoopSourceRef;
pub extern fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) CFIndex;
pub extern fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef) void;
pub extern fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) Boolean;
pub extern fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef, context: [*c]CFRunLoopSourceContext) void;
pub extern fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef) void;
pub const CFRunLoopObserverContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFRunLoopObserverCallBack = ?*const fn (CFRunLoopObserverRef, CFRunLoopActivity, ?*anyopaque) callconv(.c) void;
pub extern fn CFRunLoopObserverGetTypeID() CFTypeID;
pub extern fn CFRunLoopObserverCreate(allocator: CFAllocatorRef, activities: CFOptionFlags, repeats: Boolean, order: CFIndex, callout: CFRunLoopObserverCallBack, context: [*c]CFRunLoopObserverContext) CFRunLoopObserverRef;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:150:32: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopObserverCreateWithHandler = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:150:32
pub extern fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) CFOptionFlags;
pub extern fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) CFIndex;
pub extern fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef) void;
pub extern fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef, context: [*c]CFRunLoopObserverContext) void;
pub const CFRunLoopTimerContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFRunLoopTimerCallBack = ?*const fn (CFRunLoopTimerRef, ?*anyopaque) callconv(.c) void;
pub extern fn CFRunLoopTimerGetTypeID() CFTypeID;
pub extern fn CFRunLoopTimerCreate(allocator: CFAllocatorRef, fireDate: CFAbsoluteTime, interval: CFTimeInterval, flags: CFOptionFlags, order: CFIndex, callout: CFRunLoopTimerCallBack, context: [*c]CFRunLoopTimerContext) CFRunLoopTimerRef;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:174:29: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopTimerCreateWithHandler = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:174:29
pub extern fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) CFAbsoluteTime;
pub extern fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime) void;
pub extern fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) CFIndex;
pub extern fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef) void;
pub extern fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: [*c]CFRunLoopTimerContext) void;
pub extern fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval) void;
pub const struct___CFSocket = opaque {};
pub const CFSocketRef = ?*struct___CFSocket;
pub const CFSocketError = CFIndex;
pub const kCFSocketSuccess: c_int = 0;
pub const kCFSocketError: c_int = -1;
pub const kCFSocketTimeout: c_int = -2;
const enum_unnamed_56 = c_int;
pub const CFSocketSignature = extern struct {
    protocolFamily: SInt32 = @import("std").mem.zeroes(SInt32),
    socketType: SInt32 = @import("std").mem.zeroes(SInt32),
    protocol: SInt32 = @import("std").mem.zeroes(SInt32),
    address: CFDataRef = @import("std").mem.zeroes(CFDataRef),
};
pub const CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack: c_int = 0;
pub const kCFSocketReadCallBack: c_int = 1;
pub const kCFSocketAcceptCallBack: c_int = 2;
pub const kCFSocketDataCallBack: c_int = 3;
pub const kCFSocketConnectCallBack: c_int = 4;
pub const kCFSocketWriteCallBack: c_int = 8;
const enum_unnamed_57 = c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: c_int = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: c_int = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: c_int = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: c_int = 8;
pub const kCFSocketLeaveErrors: c_int = 64;
pub const kCFSocketCloseOnInvalidate: c_int = 128;
const enum_unnamed_58 = c_uint;
pub const CFSocketCallBack = ?*const fn (CFSocketRef, CFSocketCallBackType, CFDataRef, ?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const CFSocketContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFSocketNativeHandle = c_int;
pub extern fn CFSocketGetTypeID() CFTypeID;
pub extern fn CFSocketCreate(allocator: CFAllocatorRef, protocolFamily: SInt32, socketType: SInt32, protocol: SInt32, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithNative(allocator: CFAllocatorRef, sock: CFSocketNativeHandle, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateConnectedToSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext, timeout: CFTimeInterval) CFSocketRef;
pub extern fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) CFSocketError;
pub extern fn CFSocketConnectToAddress(s: CFSocketRef, address: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketInvalidate(s: CFSocketRef) void;
pub extern fn CFSocketIsValid(s: CFSocketRef) Boolean;
pub extern fn CFSocketCopyAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketCopyPeerAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketGetContext(s: CFSocketRef, context: [*c]CFSocketContext) void;
pub extern fn CFSocketGetNative(s: CFSocketRef) CFSocketNativeHandle;
pub extern fn CFSocketCreateRunLoopSource(allocator: CFAllocatorRef, s: CFSocketRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFSocketGetSocketFlags(s: CFSocketRef) CFOptionFlags;
pub extern fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags) void;
pub extern fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketSendData(s: CFSocketRef, address: CFDataRef, data: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketRegisterValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: CFPropertyListRef) CFSocketError;
pub extern fn CFSocketCopyRegisteredValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: [*c]CFPropertyListRef, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketRegisterSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]const CFSocketSignature) CFSocketError;
pub extern fn CFSocketCopyRegisteredSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]CFSocketSignature, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketUnregister(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef) CFSocketError;
pub extern fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16) void;
pub extern fn CFSocketGetDefaultNameRegistryPortNumber() UInt16;
pub extern const kCFSocketCommandKey: CFStringRef;
pub extern const kCFSocketNameKey: CFStringRef;
pub extern const kCFSocketValueKey: CFStringRef;
pub extern const kCFSocketResultKey: CFStringRef;
pub extern const kCFSocketErrorKey: CFStringRef;
pub extern const kCFSocketRegisterCommand: CFStringRef;
pub extern const kCFSocketRetrieveCommand: CFStringRef;
pub const os_function_t = ?*const fn (?*anyopaque) callconv(.c) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:334:16: warning: unsupported type: 'BlockPointer'
pub const os_block_t = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:334:16
pub const struct_accessx_descriptor = extern struct {
    ad_name_offset: c_uint = @import("std").mem.zeroes(c_uint),
    ad_flags: c_int = @import("std").mem.zeroes(c_int),
    ad_pad: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub extern fn getattrlistbulk(c_int, ?*anyopaque, ?*anyopaque, usize, u64) c_int;
pub extern fn getattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_ulong) c_int;
pub extern fn setattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, u32) c_int;
pub extern fn freadlink(c_int, noalias [*c]u8, usize) isize;
pub extern fn faccessat(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn fchownat(c_int, [*c]const u8, uid_t, gid_t, c_int) c_int;
pub extern fn linkat(c_int, [*c]const u8, c_int, [*c]const u8, c_int) c_int;
pub extern fn readlinkat(c_int, [*c]const u8, [*c]u8, usize) isize;
pub extern fn symlinkat([*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn unlinkat(c_int, [*c]const u8, c_int) c_int;
pub extern fn _exit(c_int) noreturn;
pub extern fn access([*c]const u8, c_int) c_int;
pub extern fn alarm(c_uint) c_uint;
pub extern fn chdir([*c]const u8) c_int;
pub extern fn chown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn close(c_int) c_int;
pub extern fn dup(c_int) c_int;
pub extern fn dup2(c_int, c_int) c_int;
pub extern fn execl(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execle(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execve(__file: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fork() pid_t;
pub extern fn fpathconf(c_int, c_int) c_long;
pub extern fn getcwd([*c]u8, __size: usize) [*c]u8;
pub extern fn getegid() gid_t;
pub extern fn geteuid() uid_t;
pub extern fn getgid() gid_t;
pub extern fn getgroups(__gidsetsize: c_int, [*c]gid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getpgrp() pid_t;
pub extern fn getpid() pid_t;
pub extern fn getppid() pid_t;
pub extern fn getuid() uid_t;
pub extern fn isatty(c_int) c_int;
pub extern fn link([*c]const u8, [*c]const u8) c_int;
pub extern fn lseek(c_int, off_t, c_int) off_t;
pub extern fn pathconf([*c]const u8, c_int) c_long;
pub extern fn pause() c_int;
pub extern fn pipe([*c]c_int) c_int;
pub extern fn read(c_int, ?*anyopaque, __nbyte: usize) isize;
pub extern fn rmdir([*c]const u8) c_int;
pub extern fn setgid(gid_t) c_int;
pub extern fn setpgid(pid_t, pid_t) c_int;
pub extern fn setsid() pid_t;
pub extern fn setuid(uid_t) c_int;
pub extern fn sleep(c_uint) c_uint;
pub extern fn sysconf(c_int) c_long;
pub extern fn tcgetpgrp(c_int) pid_t;
pub extern fn tcsetpgrp(c_int, pid_t) c_int;
pub extern fn ttyname(c_int) [*c]u8;
pub extern fn ttyname_r(c_int, [*c]u8, __len: usize) c_int;
pub extern fn unlink([*c]const u8) c_int;
pub extern fn write(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize) isize;
pub extern fn confstr(c_int, [*c]u8, __len: usize) usize;
pub extern fn getopt(__argc: c_int, [*c]const [*c]u8, [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn brk(?*const anyopaque) ?*anyopaque;
pub extern fn chroot([*c]const u8) c_int;
pub extern fn crypt([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn encrypt([*c]u8, c_int) void;
pub extern fn fchdir(c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn getpgid(pid_t) pid_t;
pub extern fn getsid(pid_t) pid_t;
pub extern fn getdtablesize() c_int;
pub extern fn getpagesize() c_int;
pub extern fn getpass([*c]const u8) [*c]u8;
pub extern fn getwd([*c]u8) [*c]u8;
pub extern fn lchown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn lockf(c_int, c_int, off_t) c_int;
pub extern fn nice(c_int) c_int;
pub extern fn pread(__fd: c_int, __buf: ?*anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn sbrk(c_int) ?*anyopaque;
pub extern fn setpgrp() pid_t;
pub extern fn setregid(gid_t, gid_t) c_int;
pub extern fn setreuid(uid_t, uid_t) c_int;
pub extern fn sync() void;
pub extern fn truncate([*c]const u8, off_t) c_int;
pub extern fn ualarm(useconds_t, useconds_t) useconds_t;
pub extern fn usleep(useconds_t) c_int;
pub extern fn vfork() c_int;
pub extern fn fsync(c_int) c_int;
pub extern fn ftruncate(c_int, off_t) c_int;
pub extern fn getlogin_r([*c]u8, __namelen: usize) c_int;
pub extern fn fchown(c_int, uid_t, gid_t) c_int;
pub extern fn gethostname([*c]u8, __namelen: usize) c_int;
pub extern fn readlink(noalias [*c]const u8, noalias [*c]u8, __bufsize: usize) isize;
pub extern fn setegid(gid_t) c_int;
pub extern fn seteuid(uid_t) c_int;
pub extern fn symlink([*c]const u8, [*c]const u8) c_int;
pub extern fn pselect(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]const struct_timespec, noalias [*c]const sigset_t) c_int;
pub extern fn select(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]struct_timeval) c_int;
pub const uuid_t = __darwin_uuid_t;
pub extern fn accessx_np([*c]const struct_accessx_descriptor, __sz: usize, [*c]c_int, uid_t) c_int;
pub extern fn acct([*c]const u8) c_int;
pub extern fn add_profil([*c]u8, __bufsiz: usize, c_ulong, c_uint) c_int;
pub extern fn endusershell() void;
pub extern fn execvP(__file: [*c]const u8, __searchpath: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fflagstostr(c_ulong) [*c]u8;
pub extern fn getdomainname([*c]u8, __namelen: c_int) c_int;
pub extern fn getgrouplist([*c]const u8, c_int, [*c]c_int, __ngroups: [*c]c_int) c_int;
pub extern fn gethostuuid([*c]u8, [*c]const struct_timespec) c_int;
pub extern fn getmode(?*const anyopaque, mode_t) mode_t;
pub extern fn getpeereid(c_int, [*c]uid_t, [*c]gid_t) c_int;
pub extern fn getsgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn getwgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn initgroups([*c]const u8, c_int) c_int;
pub extern fn issetugid() c_int;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn mknod([*c]const u8, mode_t, dev_t) c_int;
pub extern fn mkpath_np(path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkpathat_np(dfd: c_int, path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mkostemp(path: [*c]u8, oflags: c_int) c_int;
pub extern fn mkostemps(path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn mkstemp_dprotected_np(path: [*c]u8, dpclass: c_int, dpflags: c_int) c_int;
pub extern fn mkdtempat_np(dfd: c_int, path: [*c]u8) [*c]u8;
pub extern fn mkstempsat_np(dfd: c_int, path: [*c]u8, slen: c_int) c_int;
pub extern fn mkostempsat_np(dfd: c_int, path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn nfssvc(c_int, ?*anyopaque) c_int;
pub extern fn profil([*c]u8, __bufsiz: usize, c_ulong, c_uint) c_int;
pub extern fn pthread_setugid_np(uid_t, gid_t) c_int;
pub extern fn pthread_getugid_np([*c]uid_t, [*c]gid_t) c_int;
pub extern fn reboot(c_int) c_int;
pub extern fn revoke([*c]const u8) c_int;
pub extern fn rcmd([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int) c_int;
pub extern fn rcmd_af([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int, c_int) c_int;
pub extern fn rresvport([*c]c_int) c_int;
pub extern fn rresvport_af([*c]c_int, c_int) c_int;
pub extern fn iruserok(c_ulong, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn iruserok_sa(?*const anyopaque, c_int, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn ruserok([*c]const u8, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn setdomainname([*c]const u8, __namelen: c_int) c_int;
pub extern fn setgroups(c_int, [*c]const gid_t) c_int;
pub extern fn sethostid(c_long) void;
pub extern fn sethostname([*c]const u8, __namelen: c_int) c_int;
pub extern fn setlogin([*c]const u8) c_int;
pub extern fn setmode([*c]const u8) ?*anyopaque;
pub extern fn setrgid(gid_t) c_int;
pub extern fn setruid(uid_t) c_int;
pub extern fn setsgroups_np(c_int, [*c]const u8) c_int;
pub extern fn setusershell() void;
pub extern fn setwgroups_np(c_int, [*c]const u8) c_int;
pub extern fn strtofflags([*c][*c]u8, [*c]c_ulong, [*c]c_ulong) c_int;
pub extern fn swapon([*c]const u8) c_int;
pub extern fn ttyslot() c_int;
pub extern fn undelete([*c]const u8) c_int;
pub extern fn unwhiteout([*c]const u8) c_int;
pub extern fn syscall(c_int, ...) c_int;
pub extern fn fgetattrlist(c_int, ?*anyopaque, ?*anyopaque, __attrBufSize: usize, c_uint) c_int;
pub extern fn fsetattrlist(c_int, ?*anyopaque, ?*anyopaque, __attrBufSize: usize, c_uint) c_int;
pub extern fn getattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, __attrBufSize: usize, c_uint) c_int;
pub extern fn setattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, __attrBufSize: usize, c_uint) c_int;
pub extern fn exchangedata([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn getdirentriesattr(c_int, ?*anyopaque, ?*anyopaque, __attrBufSize: usize, [*c]c_uint, [*c]c_uint, [*c]c_uint, c_uint) c_int;
pub const struct_fssearchblock = opaque {};
pub const struct_searchstate = opaque {};
pub extern fn searchfs([*c]const u8, ?*struct_fssearchblock, [*c]c_ulong, c_uint, c_uint, ?*struct_searchstate) c_int;
pub extern fn fsctl([*c]const u8, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn ffsctl(c_int, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn fsync_volume_np(c_int, c_int) c_int;
pub extern fn sync_volume_np([*c]const u8, c_int) c_int;
pub extern var optreset: c_int;
pub const struct_flock = extern struct {
    l_start: off_t = @import("std").mem.zeroes(off_t),
    l_len: off_t = @import("std").mem.zeroes(off_t),
    l_pid: pid_t = @import("std").mem.zeroes(pid_t),
    l_type: c_short = @import("std").mem.zeroes(c_short),
    l_whence: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_flocktimeout = extern struct {
    fl: struct_flock = @import("std").mem.zeroes(struct_flock),
    timeout: struct_timespec = @import("std").mem.zeroes(struct_timespec),
};
pub const struct_radvisory = extern struct {
    ra_offset: off_t = @import("std").mem.zeroes(off_t),
    ra_count: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_fsignatures = extern struct {
    fs_file_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_start: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fs_blob_size: usize = @import("std").mem.zeroes(usize),
    fs_fsignatures_size: usize = @import("std").mem.zeroes(usize),
    fs_cdhash: [20]u8 = @import("std").mem.zeroes([20]u8),
    fs_hash_type: c_int = @import("std").mem.zeroes(c_int),
};
pub const fsignatures_t = struct_fsignatures;
pub const struct_fsupplement = extern struct {
    fs_file_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_size: usize = @import("std").mem.zeroes(usize),
    fs_orig_fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const fsupplement_t = struct_fsupplement;
pub const struct_fchecklv = extern struct {
    lv_file_start: off_t = @import("std").mem.zeroes(off_t),
    lv_error_message_size: usize = @import("std").mem.zeroes(usize),
    lv_error_message: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const fchecklv_t = struct_fchecklv;
pub const struct_fgetsigsinfo = extern struct {
    fg_file_start: off_t = @import("std").mem.zeroes(off_t),
    fg_info_request: c_int = @import("std").mem.zeroes(c_int),
    fg_sig_is_platform: c_int = @import("std").mem.zeroes(c_int),
};
pub const fgetsigsinfo_t = struct_fgetsigsinfo;
pub const struct_fstore = extern struct {
    fst_flags: c_uint = @import("std").mem.zeroes(c_uint),
    fst_posmode: c_int = @import("std").mem.zeroes(c_int),
    fst_offset: off_t = @import("std").mem.zeroes(off_t),
    fst_length: off_t = @import("std").mem.zeroes(off_t),
    fst_bytesalloc: off_t = @import("std").mem.zeroes(off_t),
};
pub const fstore_t = struct_fstore;
pub const struct_fpunchhole = extern struct {
    fp_flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: c_uint = @import("std").mem.zeroes(c_uint),
    fp_offset: off_t = @import("std").mem.zeroes(off_t),
    fp_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const fpunchhole_t = struct_fpunchhole;
pub const struct_ftrimactivefile = extern struct {
    fta_offset: off_t = @import("std").mem.zeroes(off_t),
    fta_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const ftrimactivefile_t = struct_ftrimactivefile;
pub const struct_fspecread = extern struct {
    fsr_flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: c_uint = @import("std").mem.zeroes(c_uint),
    fsr_offset: off_t = @import("std").mem.zeroes(off_t),
    fsr_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const fspecread_t = struct_fspecread;
pub const struct_fattributiontag = extern struct {
    ft_flags: c_uint = @import("std").mem.zeroes(c_uint),
    ft_hash: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    ft_attribution_name: [255]u8 = @import("std").mem.zeroes([255]u8),
};
pub const fattributiontag_t = struct_fattributiontag;
pub const struct_log2phys = extern struct {
    l2p_flags: c_uint = @import("std").mem.zeroes(c_uint),
    l2p_contigbytes: off_t = @import("std").mem.zeroes(off_t),
    l2p_devoffset: off_t = @import("std").mem.zeroes(off_t),
};
pub const struct__filesec = opaque {};
pub const filesec_t = ?*struct__filesec;
pub const FILESEC_OWNER: c_int = 1;
pub const FILESEC_GROUP: c_int = 2;
pub const FILESEC_UUID: c_int = 3;
pub const FILESEC_MODE: c_int = 4;
pub const FILESEC_ACL: c_int = 5;
pub const FILESEC_GRPUUID: c_int = 6;
pub const FILESEC_ACL_RAW: c_int = 100;
pub const FILESEC_ACL_ALLOCSIZE: c_int = 101;
pub const filesec_property_t = c_uint;
pub extern fn open([*c]const u8, c_int, ...) c_int;
pub extern fn openat(c_int, [*c]const u8, c_int, ...) c_int;
pub extern fn creat([*c]const u8, mode_t) c_int;
pub extern fn fcntl(c_int, c_int, ...) c_int;
pub extern fn openx_np([*c]const u8, c_int, filesec_t) c_int;
pub extern fn open_dprotected_np([*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn openat_dprotected_np(c_int, [*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn openat_authenticated_np(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn flock(c_int, c_int) c_int;
pub extern fn filesec_init() filesec_t;
pub extern fn filesec_dup(filesec_t) filesec_t;
pub extern fn filesec_free(filesec_t) void;
pub extern fn filesec_get_property(filesec_t, filesec_property_t, ?*anyopaque) c_int;
pub extern fn filesec_query_property(filesec_t, filesec_property_t, [*c]c_int) c_int;
pub extern fn filesec_set_property(filesec_t, filesec_property_t, ?*const anyopaque) c_int;
pub extern fn filesec_unset_property(filesec_t, filesec_property_t) c_int;
pub extern fn os_retain(object: ?*anyopaque) ?*anyopaque;
pub extern fn os_release(object: ?*anyopaque) void;
pub const OS_CLOCK_MACH_ABSOLUTE_TIME: u32 = 32;
pub const os_clockid_t = u32;
pub const struct_os_workgroup_attr_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [60]u8 = @import("std").mem.zeroes([60]u8),
};
pub const struct_os_workgroup_interval_data_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct_os_workgroup_join_token_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [36]u8 = @import("std").mem.zeroes([36]u8),
};
pub const struct_os_workgroup_s = opaque {};
pub const os_workgroup_t = ?*struct_os_workgroup_s;
pub const os_workgroup_attr_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_attr_t = [*c]struct_os_workgroup_attr_opaque_s;
pub extern fn os_workgroup_copy_port(wg: os_workgroup_t, mach_port_out: [*c]mach_port_t) c_int;
pub extern fn os_workgroup_create_with_port(name: [*c]const u8, mach_port: mach_port_t) os_workgroup_t;
pub extern fn os_workgroup_create_with_workgroup(name: [*c]const u8, wg: os_workgroup_t) os_workgroup_t;
pub const os_workgroup_join_token_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_join_token_t = [*c]struct_os_workgroup_join_token_opaque_s;
pub extern fn os_workgroup_join(wg: os_workgroup_t, token_out: os_workgroup_join_token_t) c_int;
pub extern fn os_workgroup_leave(wg: os_workgroup_t, token: os_workgroup_join_token_t) void;
pub const os_workgroup_index = u32;
pub const os_workgroup_working_arena_destructor_t = ?*const fn (?*anyopaque) callconv(.c) void;
pub extern fn os_workgroup_set_working_arena(wg: os_workgroup_t, arena: ?*anyopaque, max_workers: u32, destructor: os_workgroup_working_arena_destructor_t) c_int;
pub extern fn os_workgroup_get_working_arena(wg: os_workgroup_t, index_out: [*c]os_workgroup_index) ?*anyopaque;
pub extern fn os_workgroup_cancel(wg: os_workgroup_t) void;
pub extern fn os_workgroup_testcancel(wg: os_workgroup_t) bool;
pub const struct_os_workgroup_max_parallel_threads_attr_s = opaque {};
pub const os_workgroup_mpt_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const os_workgroup_mpt_attr_t = ?*struct_os_workgroup_max_parallel_threads_attr_s;
pub extern fn os_workgroup_max_parallel_threads(wg: os_workgroup_t, attr: os_workgroup_mpt_attr_t) c_int;
pub const os_workgroup_interval_t = os_workgroup_t;
pub const os_workgroup_interval_data_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_interval_data_t = [*c]struct_os_workgroup_interval_data_opaque_s;
pub extern fn os_workgroup_interval_start(wg: os_workgroup_interval_t, start: u64, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_update(wg: os_workgroup_interval_t, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_finish(wg: os_workgroup_interval_t, data: os_workgroup_interval_data_t) c_int;
pub const os_workgroup_parallel_t = os_workgroup_t;
pub extern fn os_workgroup_parallel_create(name: [*c]const u8, attr: os_workgroup_attr_t) os_workgroup_parallel_t;
pub const dispatch_function_t = ?*const fn (?*anyopaque) callconv(.c) void;
pub const struct_time_value = extern struct {
    seconds: integer_t = @import("std").mem.zeroes(integer_t),
    microseconds: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const time_value_t = struct_time_value;
pub const alarm_type_t = c_int;
pub const sleep_type_t = c_int;
pub const clock_id_t = c_int;
pub const clock_flavor_t = c_int;
pub const clock_attr_t = [*c]c_int;
pub const clock_res_t = c_int;
pub const struct_mach_timespec = extern struct {
    tv_sec: c_uint = @import("std").mem.zeroes(c_uint),
    tv_nsec: clock_res_t = @import("std").mem.zeroes(clock_res_t),
};
pub const mach_timespec_t = struct_mach_timespec;
pub const dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: c_ulong = 18446744073709551614;
const enum_unnamed_59 = c_ulong;
pub extern fn dispatch_time(when: dispatch_time_t, delta: i64) dispatch_time_t;
pub extern fn dispatch_walltime(when: [*c]const struct_timespec, delta: i64) dispatch_time_t;
pub const QOS_CLASS_USER_INTERACTIVE: c_int = 33;
pub const QOS_CLASS_USER_INITIATED: c_int = 25;
pub const QOS_CLASS_DEFAULT: c_int = 21;
pub const QOS_CLASS_UTILITY: c_int = 17;
pub const QOS_CLASS_BACKGROUND: c_int = 9;
pub const QOS_CLASS_UNSPECIFIED: c_int = 0;
const enum_unnamed_60 = c_uint;
pub const qos_class_t = c_uint;
pub extern fn qos_class_self() qos_class_t;
pub extern fn qos_class_main() qos_class_t;
pub const struct__os_object_s_61 = opaque {};
pub const struct_dispatch_object_s_62 = opaque {};
pub const struct_dispatch_queue_s_63 = opaque {};
pub const struct_dispatch_queue_attr_s_64 = opaque {};
pub const struct_dispatch_group_s_65 = opaque {};
pub const struct_dispatch_source_s_66 = opaque {};
pub const struct_dispatch_channel_s_67 = opaque {};
pub const struct_dispatch_mach_s_68 = opaque {};
pub const struct_dispatch_mach_msg_s_69 = opaque {};
pub const struct_dispatch_semaphore_s_70 = opaque {};
pub const struct_dispatch_data_s_71 = opaque {};
pub const struct_dispatch_io_s_72 = opaque {};
pub const dispatch_object_t = extern union {
    _os_obj: ?*struct__os_object_s_61,
    _do: ?*struct_dispatch_object_s_62,
    _dq: ?*struct_dispatch_queue_s_63,
    _dqa: ?*struct_dispatch_queue_attr_s_64,
    _dg: ?*struct_dispatch_group_s_65,
    _ds: ?*struct_dispatch_source_s_66,
    _dch: ?*struct_dispatch_channel_s_67,
    _dm: ?*struct_dispatch_mach_s_68,
    _dmsg: ?*struct_dispatch_mach_msg_s_69,
    _dsema: ?*struct_dispatch_semaphore_s_70,
    _ddata: ?*struct_dispatch_data_s_71,
    _dchannel: ?*struct_dispatch_io_s_72,
};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:238:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_block_t = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:238:16
pub const dispatch_qos_class_t = qos_class_t;
pub extern fn dispatch_retain(object: dispatch_object_t) void;
pub extern fn dispatch_release(object: dispatch_object_t) void;
pub extern fn dispatch_get_context(object: dispatch_object_t) ?*anyopaque;
pub extern fn dispatch_set_context(object: dispatch_object_t, context: ?*anyopaque) void;
pub extern fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t) void;
pub extern fn dispatch_activate(object: dispatch_object_t) void;
pub extern fn dispatch_suspend(object: dispatch_object_t) void;
pub extern fn dispatch_resume(object: dispatch_object_t) void;
pub extern fn dispatch_set_qos_class_floor(object: dispatch_object_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) void;
pub extern fn dispatch_wait(object: ?*anyopaque, timeout: dispatch_time_t) isize;
pub extern fn dispatch_notify(object: ?*anyopaque, queue: dispatch_object_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_cancel(object: ?*anyopaque) void;
pub extern fn dispatch_testcancel(object: ?*anyopaque) isize;
pub extern fn dispatch_debug(object: dispatch_object_t, message: [*c]const u8, ...) void;
pub extern fn dispatch_debugv(object: dispatch_object_t, message: [*c]const u8, ap: va_list) void;
pub const dispatch_queue_t = ?*struct_dispatch_queue_s_63;
pub const dispatch_queue_global_t = dispatch_queue_t;
pub const dispatch_queue_serial_executor_t = dispatch_queue_t;
pub const dispatch_queue_serial_t = dispatch_queue_t;
pub const dispatch_queue_main_t = dispatch_queue_serial_t;
pub const dispatch_queue_concurrent_t = dispatch_queue_t;
pub extern fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/queue.h:514:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_apply = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/queue.h:514:1
pub extern fn dispatch_apply_f(iterations: usize, queue: dispatch_queue_t, context: ?*anyopaque, work: ?*const fn (?*anyopaque, usize) callconv(.c) void) void;
pub extern fn dispatch_get_current_queue() dispatch_queue_t;
pub extern var _dispatch_main_q: struct_dispatch_queue_s_63;
pub inline fn dispatch_get_main_queue() dispatch_queue_main_t {
    return @as(dispatch_queue_main_t, @ptrCast(&_dispatch_main_q));
}
pub const dispatch_queue_priority_t = c_long;
pub extern fn dispatch_get_global_queue(identifier: isize, flags: usize) dispatch_queue_global_t;
pub const dispatch_queue_attr_t = ?*struct_dispatch_queue_attr_s_64;
pub extern var _dispatch_queue_attr_concurrent: struct_dispatch_queue_attr_s_64;
pub extern fn dispatch_queue_attr_make_initially_inactive(attr: dispatch_queue_attr_t) dispatch_queue_attr_t;
pub const DISPATCH_AUTORELEASE_FREQUENCY_INHERIT: c_ulong = 0;
pub const DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM: c_ulong = 1;
pub const DISPATCH_AUTORELEASE_FREQUENCY_NEVER: c_ulong = 2;
pub const dispatch_autorelease_frequency_t = c_ulong;
pub extern fn dispatch_queue_attr_make_with_autorelease_frequency(attr: dispatch_queue_attr_t, frequency: dispatch_autorelease_frequency_t) dispatch_queue_attr_t;
pub extern fn dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attr_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) dispatch_queue_attr_t;
pub extern fn dispatch_queue_create_with_target(label: [*c]const u8, attr: dispatch_queue_attr_t, target: dispatch_queue_t) dispatch_queue_t;
pub extern fn dispatch_queue_create(label: [*c]const u8, attr: dispatch_queue_attr_t) dispatch_queue_t;
pub extern fn dispatch_queue_get_label(queue: dispatch_queue_t) [*c]const u8;
pub extern fn dispatch_queue_get_qos_class(queue: dispatch_queue_t, relative_priority_ptr: [*c]c_int) dispatch_qos_class_t;
pub extern fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t) void;
pub extern fn dispatch_main() noreturn;
pub extern fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_queue_set_specific(queue: dispatch_queue_t, key: ?*const anyopaque, context: ?*anyopaque, destructor: dispatch_function_t) void;
pub extern fn dispatch_queue_get_specific(queue: dispatch_queue_t, key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_get_specific(key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_assert_queue(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_barrier(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_not(queue: dispatch_queue_t) void;
pub extern fn dispatch_allow_send_signals(preserve_signum: c_int) c_int;
pub const DISPATCH_BLOCK_BARRIER: c_ulong = 1;
pub const DISPATCH_BLOCK_DETACHED: c_ulong = 2;
pub const DISPATCH_BLOCK_ASSIGN_CURRENT: c_ulong = 4;
pub const DISPATCH_BLOCK_NO_QOS_CLASS: c_ulong = 8;
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS: c_ulong = 16;
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS: c_ulong = 32;
pub const dispatch_block_flags_t = c_ulong;
pub extern fn dispatch_block_create(flags: dispatch_block_flags_t, block: dispatch_block_t) dispatch_block_t;
pub extern fn dispatch_block_create_with_qos_class(flags: dispatch_block_flags_t, qos_class: dispatch_qos_class_t, relative_priority: c_int, block: dispatch_block_t) dispatch_block_t;
pub extern fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t) void;
pub extern fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_block_notify(block: dispatch_block_t, queue: dispatch_queue_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_block_cancel(block: dispatch_block_t) void;
pub extern fn dispatch_block_testcancel(block: dispatch_block_t) isize;
pub const kern_return_t = c_int;
pub const mach_msg_timeout_t = natural_t;
pub const mach_msg_bits_t = c_uint;
pub const mach_msg_size_t = natural_t;
pub const mach_msg_id_t = integer_t;
pub const mach_msg_priority_t = c_uint;
pub const mach_msg_type_name_t = c_uint;
pub const mach_msg_copy_options_t = c_uint;
pub const mach_msg_guard_flags_t = c_uint;
pub const mach_msg_descriptor_type_t = c_uint;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:296:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_type_descriptor_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:303:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_port_descriptor_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:312:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor32_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:320:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor64_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:332:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:344:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor32_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:352:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor64_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:364:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:376:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor32_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:383:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor64_t = opaque {};
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:394:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor_t = opaque {};
pub const mach_msg_descriptor_t = extern union {
    port: mach_msg_port_descriptor_t,
    out_of_line: mach_msg_ool_descriptor_t,
    ool_ports: mach_msg_ool_ports_descriptor_t,
    type: mach_msg_type_descriptor_t,
    guarded_port: mach_msg_guarded_port_descriptor_t,
};
pub const mach_msg_body_t = extern struct {
    msgh_descriptor_count: mach_msg_size_t = @import("std").mem.zeroes(mach_msg_size_t),
};
pub const mach_msg_header_t = extern struct {
    msgh_bits: mach_msg_bits_t = @import("std").mem.zeroes(mach_msg_bits_t),
    msgh_size: mach_msg_size_t = @import("std").mem.zeroes(mach_msg_size_t),
    msgh_remote_port: mach_port_t = @import("std").mem.zeroes(mach_port_t),
    msgh_local_port: mach_port_t = @import("std").mem.zeroes(mach_port_t),
    msgh_voucher_port: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
    msgh_id: mach_msg_id_t = @import("std").mem.zeroes(mach_msg_id_t),
};
pub const mach_msg_base_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
    body: mach_msg_body_t = @import("std").mem.zeroes(mach_msg_body_t),
};
pub const mach_msg_trailer_type_t = c_uint;
pub const mach_msg_trailer_size_t = c_uint;
pub const mach_msg_trailer_info_t = [*c]u8;
pub const mach_msg_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
};
pub const mach_msg_seqno_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
};
pub const security_token_t = extern struct {
    val: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const mach_msg_security_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
};
pub const audit_token_t = extern struct {
    val: [8]c_uint = @import("std").mem.zeroes([8]c_uint),
};
pub const mach_msg_audit_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
};
pub const mach_msg_context_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
    msgh_context: mach_port_context_t = @import("std").mem.zeroes(mach_port_context_t),
};
pub const msg_labels_t = extern struct {
    sender: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
};
pub const mach_msg_filter_id = c_int;
pub const mach_msg_mac_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
    msgh_context: mach_port_context_t = @import("std").mem.zeroes(mach_port_context_t),
    msgh_ad: mach_msg_filter_id = @import("std").mem.zeroes(mach_msg_filter_id),
    msgh_labels: msg_labels_t = @import("std").mem.zeroes(msg_labels_t),
};
pub const mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub const mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub extern const KERNEL_SECURITY_TOKEN: security_token_t;
pub extern const KERNEL_AUDIT_TOKEN: audit_token_t;
pub const mach_msg_options_t = integer_t;
pub const mach_msg_empty_send_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
};
pub const mach_msg_empty_rcv_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
    trailer: mach_msg_trailer_t = @import("std").mem.zeroes(mach_msg_trailer_t),
};
pub const mach_msg_empty_t = extern union {
    send: mach_msg_empty_send_t,
    rcv: mach_msg_empty_rcv_t,
};
pub const mach_msg_type_size_t = natural_t;
pub const mach_msg_type_number_t = natural_t;
pub const mach_msg_option_t = integer_t;
pub const mach_msg_return_t = kern_return_t;
pub extern fn mach_msg_overwrite(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: [*c]mach_msg_header_t, rcv_limit: mach_msg_size_t) mach_msg_return_t;
pub extern fn mach_msg(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) mach_msg_return_t;
pub extern fn mach_voucher_deallocate(voucher: mach_port_name_t) kern_return_t;
pub const dispatch_source_t = ?*struct_dispatch_source_s_66;
pub const struct_dispatch_source_type_s = opaque {};
pub const dispatch_source_type_t = ?*const struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_add: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_or: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_replace: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_send: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_recv: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_memorypressure: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_proc: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_read: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_signal: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_timer: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_vnode: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_write: struct_dispatch_source_type_s;
pub const dispatch_source_mach_send_flags_t = c_ulong;
pub const dispatch_source_mach_recv_flags_t = c_ulong;
pub const dispatch_source_memorypressure_flags_t = c_ulong;
pub const dispatch_source_proc_flags_t = c_ulong;
pub const dispatch_source_vnode_flags_t = c_ulong;
pub const dispatch_source_timer_flags_t = c_ulong;
pub extern fn dispatch_source_create(@"type": dispatch_source_type_t, handle: usize, mask: usize, queue: dispatch_queue_t) dispatch_source_t;
pub extern fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_event_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_cancel(source: dispatch_source_t) void;
pub extern fn dispatch_source_testcancel(source: dispatch_source_t) isize;
pub extern fn dispatch_source_get_handle(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_mask(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_data(source: dispatch_source_t) usize;
pub extern fn dispatch_source_merge_data(source: dispatch_source_t, value: usize) void;
pub extern fn dispatch_source_set_timer(source: dispatch_source_t, start: dispatch_time_t, interval: u64, leeway: u64) void;
pub extern fn dispatch_source_set_registration_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_registration_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub const dispatch_group_t = ?*struct_dispatch_group_s_65;
pub extern fn dispatch_group_create() dispatch_group_t;
pub extern fn dispatch_group_async(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_group_notify(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_enter(group: dispatch_group_t) void;
pub extern fn dispatch_group_leave(group: dispatch_group_t) void;
pub const dispatch_semaphore_t = ?*struct_dispatch_semaphore_s_70;
pub extern fn dispatch_semaphore_create(value: isize) dispatch_semaphore_t;
pub extern fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) isize;
pub const dispatch_once_t = isize;
pub extern fn dispatch_once(predicate: [*c]dispatch_once_t, block: dispatch_block_t) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:195:38: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/once.h:81:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once(arg_predicate: [*c]dispatch_once_t, arg_block: dispatch_block_t) void;
pub extern fn dispatch_once_f(predicate: [*c]dispatch_once_t, context: ?*anyopaque, function: dispatch_function_t) void;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:195:38: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/once.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once_f(arg_predicate: [*c]dispatch_once_t, arg_context: ?*anyopaque, arg_function: dispatch_function_t) void;
pub const dispatch_data_t = ?*struct_dispatch_data_s_71;
pub extern var _dispatch_data_empty: struct_dispatch_data_s_71;
pub extern const _dispatch_data_destructor_free: dispatch_block_t;
pub extern const _dispatch_data_destructor_munmap: dispatch_block_t;
pub extern fn dispatch_data_create(buffer: ?*const anyopaque, size: usize, queue: dispatch_queue_t, destructor: dispatch_block_t) dispatch_data_t;
pub extern fn dispatch_data_get_size(data: dispatch_data_t) usize;
pub extern fn dispatch_data_create_map(data: dispatch_data_t, buffer_ptr: [*c]?*const anyopaque, size_ptr: [*c]usize) dispatch_data_t;
pub extern fn dispatch_data_create_concat(data1: dispatch_data_t, data2: dispatch_data_t) dispatch_data_t;
pub extern fn dispatch_data_create_subrange(data: dispatch_data_t, offset: usize, length: usize) dispatch_data_t;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/data.h:229:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_data_applier_t = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/data.h:229:16
pub extern fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) bool;
pub extern fn dispatch_data_copy_region(data: dispatch_data_t, location: usize, offset_ptr: [*c]usize) dispatch_data_t;
pub const dispatch_fd_t = c_int;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:115:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_read = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:115:1

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:155:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_write = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:155:1
pub const dispatch_io_t = ?*struct_dispatch_io_s_72;
pub const dispatch_io_type_t = c_ulong;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:228:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:228:1

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:265:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_path = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:265:1

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:306:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_io = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:306:1

// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:320:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_handler_t = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/io.h:320:16
pub extern fn dispatch_io_read(channel: dispatch_io_t, offset: off_t, length: usize, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub extern fn dispatch_io_write(channel: dispatch_io_t, offset: off_t, data: dispatch_data_t, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub const dispatch_io_close_flags_t = c_ulong;
pub extern fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t) void;
pub extern fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t) void;
pub extern fn dispatch_io_get_descriptor(channel: dispatch_io_t) dispatch_fd_t;
pub extern fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize) void;
pub extern fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize) void;
pub const dispatch_io_interval_flags_t = c_ulong;
pub extern fn dispatch_io_set_interval(channel: dispatch_io_t, interval: u64, flags: dispatch_io_interval_flags_t) void;
pub const dispatch_workloop_t = dispatch_queue_t;
pub extern fn dispatch_workloop_create(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_create_inactive(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_set_autorelease_frequency(workloop: dispatch_workloop_t, frequency: dispatch_autorelease_frequency_t) void;
pub extern fn dispatch_workloop_set_os_workgroup(workloop: dispatch_workloop_t, workgroup: os_workgroup_t) void;
pub const CFStreamError = extern struct {
    domain: CFIndex = @import("std").mem.zeroes(CFIndex),
    @"error": SInt32 = @import("std").mem.zeroes(SInt32),
};
pub const CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen: c_int = 0;
pub const kCFStreamStatusOpening: c_int = 1;
pub const kCFStreamStatusOpen: c_int = 2;
pub const kCFStreamStatusReading: c_int = 3;
pub const kCFStreamStatusWriting: c_int = 4;
pub const kCFStreamStatusAtEnd: c_int = 5;
pub const kCFStreamStatusClosed: c_int = 6;
pub const kCFStreamStatusError: c_int = 7;
const enum_unnamed_73 = c_uint;
pub const CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone: c_int = 0;
pub const kCFStreamEventOpenCompleted: c_int = 1;
pub const kCFStreamEventHasBytesAvailable: c_int = 2;
pub const kCFStreamEventCanAcceptBytes: c_int = 4;
pub const kCFStreamEventErrorOccurred: c_int = 8;
pub const kCFStreamEventEndEncountered: c_int = 16;
const enum_unnamed_74 = c_uint;
pub const CFStreamClientContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*anyopaque) callconv(.c) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) ?*anyopaque),
    release: ?*const fn (?*anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) CFStringRef),
};
pub const struct___CFReadStream = opaque {};
pub const CFReadStreamRef = ?*struct___CFReadStream;
pub const struct___CFWriteStream = opaque {};
pub const CFWriteStreamRef = ?*struct___CFWriteStream;
pub const CFReadStreamClientCallBack = ?*const fn (CFReadStreamRef, CFStreamEventType, ?*anyopaque) callconv(.c) void;
pub const CFWriteStreamClientCallBack = ?*const fn (CFWriteStreamRef, CFStreamEventType, ?*anyopaque) callconv(.c) void;
pub extern fn CFReadStreamGetTypeID() CFTypeID;
pub extern fn CFWriteStreamGetTypeID() CFTypeID;
pub extern const kCFStreamPropertyDataWritten: CFStreamPropertyKey;
pub extern fn CFReadStreamCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithBuffer(alloc: CFAllocatorRef, buffer: [*c]UInt8, bufferCapacity: CFIndex) CFWriteStreamRef;
pub extern fn CFWriteStreamCreateWithAllocatedBuffers(alloc: CFAllocatorRef, bufferAllocator: CFAllocatorRef) CFWriteStreamRef;
pub extern fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFWriteStreamRef;
pub extern fn CFStreamCreateBoundPair(alloc: CFAllocatorRef, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef, transferBufferSize: CFIndex) void;
pub extern const kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
pub extern const kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
pub extern const kCFStreamErrorDomainSOCKS: c_int;
pub extern const kCFStreamPropertySOCKSProxy: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyHost: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyPort: CFStringRef;
pub extern const kCFStreamPropertySOCKSVersion: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion4: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion5: CFStringRef;
pub extern const kCFStreamPropertySOCKSUser: CFStringRef;
pub extern const kCFStreamPropertySOCKSPassword: CFStringRef;
pub extern const kCFStreamErrorDomainSSL: c_int;
pub extern const kCFStreamPropertySocketSecurityLevel: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNone: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
pub extern const kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
pub extern fn CFStreamCreatePairWithSocket(alloc: CFAllocatorRef, sock: CFSocketNativeHandle, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithSocketToHost(alloc: CFAllocatorRef, host: CFStringRef, port: UInt32, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithPeerSocketSignature(alloc: CFAllocatorRef, signature: [*c]const CFSocketSignature, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFReadStreamGetStatus(stream: CFReadStreamRef) CFStreamStatus;
pub extern fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) CFStreamStatus;
pub extern fn CFReadStreamCopyError(stream: CFReadStreamRef) CFErrorRef;
pub extern fn CFWriteStreamCopyError(stream: CFWriteStreamRef) CFErrorRef;
pub extern fn CFReadStreamOpen(stream: CFReadStreamRef) Boolean;
pub extern fn CFWriteStreamOpen(stream: CFWriteStreamRef) Boolean;
pub extern fn CFReadStreamClose(stream: CFReadStreamRef) void;
pub extern fn CFWriteStreamClose(stream: CFWriteStreamRef) void;
pub extern fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) Boolean;
pub extern fn CFReadStreamRead(stream: CFReadStreamRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamGetBuffer(stream: CFReadStreamRef, maxBytesToRead: CFIndex, numBytesRead: [*c]CFIndex) [*c]const UInt8;
pub extern fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) Boolean;
pub extern fn CFWriteStreamWrite(stream: CFWriteStreamRef, buffer: [*c]const UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamCopyProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFWriteStreamCopyProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFReadStreamSetProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFWriteStreamSetProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFReadStreamSetClient(stream: CFReadStreamRef, streamEvents: CFOptionFlags, clientCB: CFReadStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFWriteStreamSetClient(stream: CFWriteStreamRef, streamEvents: CFOptionFlags, clientCB: CFWriteStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFReadStreamScheduleWithRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamScheduleWithRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamUnscheduleFromRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamUnscheduleFromRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t) void;
pub extern fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t) void;
pub extern fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) dispatch_queue_t;
pub extern fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) dispatch_queue_t;
pub const CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom: c_int = -1;
pub const kCFStreamErrorDomainPOSIX: c_int = 1;
pub const kCFStreamErrorDomainMacOSStatus: c_int = 2;
const enum_unnamed_75 = c_int;
pub extern fn CFReadStreamGetError(stream: CFReadStreamRef) CFStreamError;
pub extern fn CFWriteStreamGetError(stream: CFWriteStreamRef) CFStreamError;
pub const CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable: c_int = 0;
pub const kCFPropertyListMutableContainers: c_int = 1;
pub const kCFPropertyListMutableContainersAndLeaves: c_int = 2;
const enum_unnamed_76 = c_uint;
pub extern fn CFPropertyListCreateFromXMLData(allocator: CFAllocatorRef, xmlData: CFDataRef, mutabilityOption: CFOptionFlags, errorString: [*c]CFStringRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateXMLData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef) CFDataRef;
pub extern fn CFPropertyListCreateDeepCopy(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, mutabilityOption: CFOptionFlags) CFPropertyListRef;
pub const CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat: c_int = 1;
pub const kCFPropertyListXMLFormat_v1_0: c_int = 100;
pub const kCFPropertyListBinaryFormat_v1_0: c_int = 200;
const enum_unnamed_77 = c_uint;
pub extern fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat) Boolean;
pub extern fn CFPropertyListWriteToStream(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, errorString: [*c]CFStringRef) CFIndex;
pub extern fn CFPropertyListCreateFromStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, mutabilityOption: CFOptionFlags, format: [*c]CFPropertyListFormat, errorString: [*c]CFStringRef) CFPropertyListRef;
pub const kCFPropertyListReadCorruptError: c_int = 3840;
pub const kCFPropertyListReadUnknownVersionError: c_int = 3841;
pub const kCFPropertyListReadStreamError: c_int = 3842;
pub const kCFPropertyListWriteStreamError: c_int = 3851;
const enum_unnamed_78 = c_uint;
pub extern fn CFPropertyListCreateWithData(allocator: CFAllocatorRef, data: CFDataRef, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateWithStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListWrite(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFIndex;
pub extern fn CFPropertyListCreateData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFDataRef;
pub const CFSetRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFSetReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.c) void;
pub const CFSetCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFSetEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) Boolean;
pub const CFSetHashCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFHashCode;
pub const CFSetCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFSetRetainCallBack = @import("std").mem.zeroes(CFSetRetainCallBack),
    release: CFSetReleaseCallBack = @import("std").mem.zeroes(CFSetReleaseCallBack),
    copyDescription: CFSetCopyDescriptionCallBack = @import("std").mem.zeroes(CFSetCopyDescriptionCallBack),
    equal: CFSetEqualCallBack = @import("std").mem.zeroes(CFSetEqualCallBack),
    hash: CFSetHashCallBack = @import("std").mem.zeroes(CFSetHashCallBack),
};
pub extern const kCFTypeSetCallBacks: CFSetCallBacks;
pub extern const kCFCopyStringSetCallBacks: CFSetCallBacks;
pub const CFSetApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFSet = opaque {};
pub const CFSetRef = ?*const struct___CFSet;
pub const CFMutableSetRef = ?*struct___CFSet;
pub extern fn CFSetGetTypeID() CFTypeID;
pub extern fn CFSetCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFSetCallBacks) CFSetRef;
pub extern fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) CFSetRef;
pub extern fn CFSetCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFSetCallBacks) CFMutableSetRef;
pub extern fn CFSetCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theSet: CFSetRef) CFMutableSetRef;
pub extern fn CFSetGetCount(theSet: CFSetRef) CFIndex;
pub extern fn CFSetGetCountOfValue(theSet: CFSetRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFSetContainsValue(theSet: CFSetRef, value: ?*const anyopaque) Boolean;
pub extern fn CFSetGetValue(theSet: CFSetRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFSetGetValueIfPresent(theSet: CFSetRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFSetGetValues(theSet: CFSetRef, values: [*c]?*const anyopaque) void;
pub extern fn CFSetApplyFunction(theSet: CFSetRef, applier: CFSetApplierFunction, context: ?*anyopaque) void;
pub extern fn CFSetAddValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetReplaceValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetSetValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveAllValues(theSet: CFMutableSetRef) void;
pub const CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese: c_int = 1;
pub const kCFStringEncodingMacChineseTrad: c_int = 2;
pub const kCFStringEncodingMacKorean: c_int = 3;
pub const kCFStringEncodingMacArabic: c_int = 4;
pub const kCFStringEncodingMacHebrew: c_int = 5;
pub const kCFStringEncodingMacGreek: c_int = 6;
pub const kCFStringEncodingMacCyrillic: c_int = 7;
pub const kCFStringEncodingMacDevanagari: c_int = 9;
pub const kCFStringEncodingMacGurmukhi: c_int = 10;
pub const kCFStringEncodingMacGujarati: c_int = 11;
pub const kCFStringEncodingMacOriya: c_int = 12;
pub const kCFStringEncodingMacBengali: c_int = 13;
pub const kCFStringEncodingMacTamil: c_int = 14;
pub const kCFStringEncodingMacTelugu: c_int = 15;
pub const kCFStringEncodingMacKannada: c_int = 16;
pub const kCFStringEncodingMacMalayalam: c_int = 17;
pub const kCFStringEncodingMacSinhalese: c_int = 18;
pub const kCFStringEncodingMacBurmese: c_int = 19;
pub const kCFStringEncodingMacKhmer: c_int = 20;
pub const kCFStringEncodingMacThai: c_int = 21;
pub const kCFStringEncodingMacLaotian: c_int = 22;
pub const kCFStringEncodingMacGeorgian: c_int = 23;
pub const kCFStringEncodingMacArmenian: c_int = 24;
pub const kCFStringEncodingMacChineseSimp: c_int = 25;
pub const kCFStringEncodingMacTibetan: c_int = 26;
pub const kCFStringEncodingMacMongolian: c_int = 27;
pub const kCFStringEncodingMacEthiopic: c_int = 28;
pub const kCFStringEncodingMacCentralEurRoman: c_int = 29;
pub const kCFStringEncodingMacVietnamese: c_int = 30;
pub const kCFStringEncodingMacExtArabic: c_int = 31;
pub const kCFStringEncodingMacSymbol: c_int = 33;
pub const kCFStringEncodingMacDingbats: c_int = 34;
pub const kCFStringEncodingMacTurkish: c_int = 35;
pub const kCFStringEncodingMacCroatian: c_int = 36;
pub const kCFStringEncodingMacIcelandic: c_int = 37;
pub const kCFStringEncodingMacRomanian: c_int = 38;
pub const kCFStringEncodingMacCeltic: c_int = 39;
pub const kCFStringEncodingMacGaelic: c_int = 40;
pub const kCFStringEncodingMacFarsi: c_int = 140;
pub const kCFStringEncodingMacUkrainian: c_int = 152;
pub const kCFStringEncodingMacInuit: c_int = 236;
pub const kCFStringEncodingMacVT100: c_int = 252;
pub const kCFStringEncodingMacHFS: c_int = 255;
pub const kCFStringEncodingISOLatin2: c_int = 514;
pub const kCFStringEncodingISOLatin3: c_int = 515;
pub const kCFStringEncodingISOLatin4: c_int = 516;
pub const kCFStringEncodingISOLatinCyrillic: c_int = 517;
pub const kCFStringEncodingISOLatinArabic: c_int = 518;
pub const kCFStringEncodingISOLatinGreek: c_int = 519;
pub const kCFStringEncodingISOLatinHebrew: c_int = 520;
pub const kCFStringEncodingISOLatin5: c_int = 521;
pub const kCFStringEncodingISOLatin6: c_int = 522;
pub const kCFStringEncodingISOLatinThai: c_int = 523;
pub const kCFStringEncodingISOLatin7: c_int = 525;
pub const kCFStringEncodingISOLatin8: c_int = 526;
pub const kCFStringEncodingISOLatin9: c_int = 527;
pub const kCFStringEncodingISOLatin10: c_int = 528;
pub const kCFStringEncodingDOSLatinUS: c_int = 1024;
pub const kCFStringEncodingDOSGreek: c_int = 1029;
pub const kCFStringEncodingDOSBalticRim: c_int = 1030;
pub const kCFStringEncodingDOSLatin1: c_int = 1040;
pub const kCFStringEncodingDOSGreek1: c_int = 1041;
pub const kCFStringEncodingDOSLatin2: c_int = 1042;
pub const kCFStringEncodingDOSCyrillic: c_int = 1043;
pub const kCFStringEncodingDOSTurkish: c_int = 1044;
pub const kCFStringEncodingDOSPortuguese: c_int = 1045;
pub const kCFStringEncodingDOSIcelandic: c_int = 1046;
pub const kCFStringEncodingDOSHebrew: c_int = 1047;
pub const kCFStringEncodingDOSCanadianFrench: c_int = 1048;
pub const kCFStringEncodingDOSArabic: c_int = 1049;
pub const kCFStringEncodingDOSNordic: c_int = 1050;
pub const kCFStringEncodingDOSRussian: c_int = 1051;
pub const kCFStringEncodingDOSGreek2: c_int = 1052;
pub const kCFStringEncodingDOSThai: c_int = 1053;
pub const kCFStringEncodingDOSJapanese: c_int = 1056;
pub const kCFStringEncodingDOSChineseSimplif: c_int = 1057;
pub const kCFStringEncodingDOSKorean: c_int = 1058;
pub const kCFStringEncodingDOSChineseTrad: c_int = 1059;
pub const kCFStringEncodingWindowsLatin2: c_int = 1281;
pub const kCFStringEncodingWindowsCyrillic: c_int = 1282;
pub const kCFStringEncodingWindowsGreek: c_int = 1283;
pub const kCFStringEncodingWindowsLatin5: c_int = 1284;
pub const kCFStringEncodingWindowsHebrew: c_int = 1285;
pub const kCFStringEncodingWindowsArabic: c_int = 1286;
pub const kCFStringEncodingWindowsBalticRim: c_int = 1287;
pub const kCFStringEncodingWindowsVietnamese: c_int = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: c_int = 1296;
pub const kCFStringEncodingANSEL: c_int = 1537;
pub const kCFStringEncodingJIS_X0201_76: c_int = 1568;
pub const kCFStringEncodingJIS_X0208_83: c_int = 1569;
pub const kCFStringEncodingJIS_X0208_90: c_int = 1570;
pub const kCFStringEncodingJIS_X0212_90: c_int = 1571;
pub const kCFStringEncodingJIS_C6226_78: c_int = 1572;
pub const kCFStringEncodingShiftJIS_X0213: c_int = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: c_int = 1577;
pub const kCFStringEncodingGB_2312_80: c_int = 1584;
pub const kCFStringEncodingGBK_95: c_int = 1585;
pub const kCFStringEncodingGB_18030_2000: c_int = 1586;
pub const kCFStringEncodingKSC_5601_87: c_int = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: c_int = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: c_int = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: c_int = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: c_int = 1619;
pub const kCFStringEncodingISO_2022_JP: c_int = 2080;
pub const kCFStringEncodingISO_2022_JP_2: c_int = 2081;
pub const kCFStringEncodingISO_2022_JP_1: c_int = 2082;
pub const kCFStringEncodingISO_2022_JP_3: c_int = 2083;
pub const kCFStringEncodingISO_2022_CN: c_int = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: c_int = 2097;
pub const kCFStringEncodingISO_2022_KR: c_int = 2112;
pub const kCFStringEncodingEUC_JP: c_int = 2336;
pub const kCFStringEncodingEUC_CN: c_int = 2352;
pub const kCFStringEncodingEUC_TW: c_int = 2353;
pub const kCFStringEncodingEUC_KR: c_int = 2368;
pub const kCFStringEncodingShiftJIS: c_int = 2561;
pub const kCFStringEncodingKOI8_R: c_int = 2562;
pub const kCFStringEncodingBig5: c_int = 2563;
pub const kCFStringEncodingMacRomanLatin1: c_int = 2564;
pub const kCFStringEncodingHZ_GB_2312: c_int = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: c_int = 2566;
pub const kCFStringEncodingVISCII: c_int = 2567;
pub const kCFStringEncodingKOI8_U: c_int = 2568;
pub const kCFStringEncodingBig5_E: c_int = 2569;
pub const kCFStringEncodingNextStepJapanese: c_int = 2818;
pub const kCFStringEncodingEBCDIC_US: c_int = 3073;
pub const kCFStringEncodingEBCDIC_CP037: c_int = 3074;
pub const kCFStringEncodingUTF7: c_int = 67109120;
pub const kCFStringEncodingUTF7_IMAP: c_int = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: c_int = 1576;
const enum_unnamed_79 = c_uint;
pub const CFTreeRetainCallBack = ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFTreeReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.c) void;
pub const CFTreeCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFTreeContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFTreeRetainCallBack = @import("std").mem.zeroes(CFTreeRetainCallBack),
    release: CFTreeReleaseCallBack = @import("std").mem.zeroes(CFTreeReleaseCallBack),
    copyDescription: CFTreeCopyDescriptionCallBack = @import("std").mem.zeroes(CFTreeCopyDescriptionCallBack),
};
pub const CFTreeApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.c) void;
pub const struct___CFTree = opaque {};
pub const CFTreeRef = ?*struct___CFTree;
pub extern fn CFTreeGetTypeID() CFTypeID;
pub extern fn CFTreeCreate(allocator: CFAllocatorRef, context: [*c]const CFTreeContext) CFTreeRef;
pub extern fn CFTreeGetParent(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetNextSibling(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetFirstChild(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetContext(tree: CFTreeRef, context: [*c]CFTreeContext) void;
pub extern fn CFTreeGetChildCount(tree: CFTreeRef) CFIndex;
pub extern fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) CFTreeRef;
pub extern fn CFTreeGetChildren(tree: CFTreeRef, children: [*c]CFTreeRef) void;
pub extern fn CFTreeApplyFunctionToChildren(tree: CFTreeRef, applier: CFTreeApplierFunction, context: ?*anyopaque) void;
pub extern fn CFTreeFindRoot(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeSetContext(tree: CFTreeRef, context: [*c]const CFTreeContext) void;
pub extern fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef) void;
pub extern fn CFTreeRemove(tree: CFTreeRef) void;
pub extern fn CFTreeRemoveAllChildren(tree: CFTreeRef) void;
pub extern fn CFTreeSortChildren(tree: CFTreeRef, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFURLCreateDataAndPropertiesFromResource(alloc: CFAllocatorRef, url: CFURLRef, resourceData: [*c]CFDataRef, properties: [*c]CFDictionaryRef, desiredProperties: CFArrayRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLWriteDataAndPropertiesToResource(url: CFURLRef, dataToWrite: CFDataRef, propertiesToWrite: CFDictionaryRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLDestroyResource(url: CFURLRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLCreatePropertyFromResource(alloc: CFAllocatorRef, url: CFURLRef, property: CFStringRef, errorCode: [*c]SInt32) CFTypeRef;
pub const CFURLError = CFIndex;
pub const kCFURLUnknownError: c_int = -10;
pub const kCFURLUnknownSchemeError: c_int = -11;
pub const kCFURLResourceNotFoundError: c_int = -12;
pub const kCFURLResourceAccessViolationError: c_int = -13;
pub const kCFURLRemoteHostUnavailableError: c_int = -14;
pub const kCFURLImproperArgumentsError: c_int = -15;
pub const kCFURLUnknownPropertyKeyError: c_int = -16;
pub const kCFURLPropertyKeyUnavailableError: c_int = -17;
pub const kCFURLTimeoutError: c_int = -18;
const enum_unnamed_80 = c_int;
pub extern const kCFURLFileExists: CFStringRef;
pub extern const kCFURLFileDirectoryContents: CFStringRef;
pub extern const kCFURLFileLength: CFStringRef;
pub extern const kCFURLFileLastModificationTime: CFStringRef;
pub extern const kCFURLFilePOSIXMode: CFStringRef;
pub extern const kCFURLFileOwnerID: CFStringRef;
pub extern const kCFURLHTTPStatusCode: CFStringRef;
pub extern const kCFURLHTTPStatusLine: CFStringRef;
pub const struct___CFUUID = opaque {};
pub const CFUUIDRef = ?*const struct___CFUUID;
pub const CFUUIDBytes = extern struct {
    byte0: UInt8 = @import("std").mem.zeroes(UInt8),
    byte1: UInt8 = @import("std").mem.zeroes(UInt8),
    byte2: UInt8 = @import("std").mem.zeroes(UInt8),
    byte3: UInt8 = @import("std").mem.zeroes(UInt8),
    byte4: UInt8 = @import("std").mem.zeroes(UInt8),
    byte5: UInt8 = @import("std").mem.zeroes(UInt8),
    byte6: UInt8 = @import("std").mem.zeroes(UInt8),
    byte7: UInt8 = @import("std").mem.zeroes(UInt8),
    byte8: UInt8 = @import("std").mem.zeroes(UInt8),
    byte9: UInt8 = @import("std").mem.zeroes(UInt8),
    byte10: UInt8 = @import("std").mem.zeroes(UInt8),
    byte11: UInt8 = @import("std").mem.zeroes(UInt8),
    byte12: UInt8 = @import("std").mem.zeroes(UInt8),
    byte13: UInt8 = @import("std").mem.zeroes(UInt8),
    byte14: UInt8 = @import("std").mem.zeroes(UInt8),
    byte15: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub extern fn CFUUIDGetTypeID() CFTypeID;
pub extern fn CFUUIDCreate(alloc: CFAllocatorRef) CFUUIDRef;
pub extern fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) CFUUIDRef;
pub extern fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) CFStringRef;
pub extern fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) CFUUIDBytes;
pub extern fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) CFUUIDRef;
pub extern fn CFCopyHomeDirectoryURL() CFURLRef;
pub const cpu_type_t = integer_t;
pub const cpu_subtype_t = integer_t;
pub const cpu_threadtype_t = integer_t;
pub const struct___CFBundle = opaque {};
pub const CFBundleRef = ?*struct___CFBundle;
pub const CFPlugInRef = ?*struct___CFBundle;
pub extern const kCFBundleInfoDictionaryVersionKey: CFStringRef;
pub extern const kCFBundleExecutableKey: CFStringRef;
pub extern const kCFBundleIdentifierKey: CFStringRef;
pub extern const kCFBundleVersionKey: CFStringRef;
pub extern const kCFBundleDevelopmentRegionKey: CFStringRef;
pub extern const kCFBundleNameKey: CFStringRef;
pub extern const kCFBundleLocalizationsKey: CFStringRef;
pub extern fn CFBundleGetMainBundle() CFBundleRef;
pub extern fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) CFBundleRef;
pub extern fn CFBundleGetAllBundles() CFArrayRef;
pub extern fn CFBundleGetTypeID() CFTypeID;
pub extern fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) CFBundleRef;
pub extern fn CFBundleCreateBundlesFromDirectory(allocator: CFAllocatorRef, directoryURL: CFURLRef, bundleType: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef) CFTypeRef;
pub extern fn CFBundleGetInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfo(bundle: CFBundleRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) void;
pub extern fn CFBundleGetIdentifier(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleGetVersionNumber(bundle: CFBundleRef) UInt32;
pub extern fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfoInDirectory(url: CFURLRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) Boolean;
pub extern fn CFBundleCopyResourceURL(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfType(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizedString(bundle: CFBundleRef, key: CFStringRef, value: CFStringRef, tableName: CFStringRef) CFStringRef;
pub extern fn CFBundleCopyLocalizedStringForLocalizations(bundle: CFBundleRef, key: CFStringRef, value: CFStringRef, tableName: CFStringRef, localizations: CFArrayRef) CFStringRef;
pub extern fn CFBundleCopyResourceURLInDirectory(bundleURL: CFURLRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: CFURLRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizationsForPreferences(locArray: CFArrayRef, prefArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyResourceURLForLocalization(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleCopyLocalizationsForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableURL(bundle: CFBundleRef) CFURLRef;
pub const kCFBundleExecutableArchitectureI386: c_int = 7;
pub const kCFBundleExecutableArchitecturePPC: c_int = 18;
pub const kCFBundleExecutableArchitectureX86_64: c_int = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: c_int = 16777234;
pub const kCFBundleExecutableArchitectureARM64: c_int = 16777228;
const enum_unnamed_81 = c_uint;
pub extern fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundlePreflightExecutable(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutableAndReturnError(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleUnloadExecutable(bundle: CFBundleRef) void;
pub extern fn CFBundleGetFunctionPointerForName(bundle: CFBundleRef, functionName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetFunctionPointersForNames(bundle: CFBundleRef, functionNames: CFArrayRef, ftbl: [*c]?*anyopaque) void;
pub extern fn CFBundleGetDataPointerForName(bundle: CFBundleRef, symbolName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetDataPointersForNames(bundle: CFBundleRef, symbolNames: CFArrayRef, stbl: [*c]?*anyopaque) void;
pub extern fn CFBundleCopyAuxiliaryExecutableURL(bundle: CFBundleRef, executableName: CFStringRef) CFURLRef;
pub extern fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) Boolean;
pub extern fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) Boolean;
pub extern fn CFBundleGetPlugIn(bundle: CFBundleRef) CFPlugInRef;
pub const CFBundleRefNum = c_int;
pub extern fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) CFBundleRefNum;
pub extern fn CFBundleOpenBundleResourceFiles(bundle: CFBundleRef, refNum: [*c]CFBundleRefNum, localizedRefNum: [*c]CFBundleRefNum) SInt32;
pub extern fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum) void;
pub const struct___CFMessagePort = opaque {};
pub const CFMessagePortRef = ?*struct___CFMessagePort;
pub const kCFMessagePortSuccess: c_int = 0;
pub const kCFMessagePortSendTimeout: c_int = -1;
pub const kCFMessagePortReceiveTimeout: c_int = -2;
pub const kCFMessagePortIsInvalid: c_int = -3;
pub const kCFMessagePortTransportError: c_int = -4;
pub const kCFMessagePortBecameInvalidError: c_int = -5;
const enum_unnamed_82 = c_int;
pub const CFMessagePortContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFMessagePortCallBack = ?*const fn (CFMessagePortRef, SInt32, CFDataRef, ?*anyopaque) callconv(.c) CFDataRef;
pub const CFMessagePortInvalidationCallBack = ?*const fn (CFMessagePortRef, ?*anyopaque) callconv(.c) void;
pub extern fn CFMessagePortGetTypeID() CFTypeID;
pub extern fn CFMessagePortCreateLocal(allocator: CFAllocatorRef, name: CFStringRef, callout: CFMessagePortCallBack, context: [*c]CFMessagePortContext, shouldFreeInfo: [*c]Boolean) CFMessagePortRef;
pub extern fn CFMessagePortCreateRemote(allocator: CFAllocatorRef, name: CFStringRef) CFMessagePortRef;
pub extern fn CFMessagePortIsRemote(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetName(ms: CFMessagePortRef) CFStringRef;
pub extern fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) Boolean;
pub extern fn CFMessagePortGetContext(ms: CFMessagePortRef, context: [*c]CFMessagePortContext) void;
pub extern fn CFMessagePortInvalidate(ms: CFMessagePortRef) void;
pub extern fn CFMessagePortIsValid(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetInvalidationCallBack(ms: CFMessagePortRef) CFMessagePortInvalidationCallBack;
pub extern fn CFMessagePortSetInvalidationCallBack(ms: CFMessagePortRef, callout: CFMessagePortInvalidationCallBack) void;
pub extern fn CFMessagePortSendRequest(remote: CFMessagePortRef, msgid: SInt32, data: CFDataRef, sendTimeout: CFTimeInterval, rcvTimeout: CFTimeInterval, replyMode: CFStringRef, returnData: [*c]CFDataRef) SInt32;
pub extern fn CFMessagePortCreateRunLoopSource(allocator: CFAllocatorRef, local: CFMessagePortRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t) void;
pub extern const kCFPlugInDynamicRegistrationKey: CFStringRef;
pub extern const kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
pub extern const kCFPlugInUnloadFunctionKey: CFStringRef;
pub extern const kCFPlugInFactoriesKey: CFStringRef;
pub extern const kCFPlugInTypesKey: CFStringRef;
pub const CFPlugInDynamicRegisterFunction = ?*const fn (CFPlugInRef) callconv(.c) void;
pub const CFPlugInUnloadFunction = ?*const fn (CFPlugInRef) callconv(.c) void;
pub const CFPlugInFactoryFunction = ?*const fn (CFAllocatorRef, CFUUIDRef) callconv(.c) ?*anyopaque;
pub extern fn CFPlugInGetTypeID() CFTypeID;
pub extern fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) CFPlugInRef;
pub extern fn CFPlugInGetBundle(plugIn: CFPlugInRef) CFBundleRef;
pub extern fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean) void;
pub extern fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) Boolean;
pub extern fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) CFArrayRef;
pub extern fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: CFUUIDRef, plugIn: CFPlugInRef) CFArrayRef;
pub extern fn CFPlugInInstanceCreate(allocator: CFAllocatorRef, factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) ?*anyopaque;
pub extern fn CFPlugInRegisterFactoryFunction(factoryUUID: CFUUIDRef, func: CFPlugInFactoryFunction) Boolean;
pub extern fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: CFUUIDRef, plugIn: CFPlugInRef, functionName: CFStringRef) Boolean;
pub extern fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef) void;
pub extern fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef) void;
pub const struct___CFPlugInInstance = opaque {};
pub const CFPlugInInstanceRef = ?*struct___CFPlugInInstance;
pub const CFPlugInInstanceGetInterfaceFunction = ?*const fn (CFPlugInInstanceRef, CFStringRef, [*c]?*anyopaque) callconv(.c) Boolean;
pub const CFPlugInInstanceDeallocateInstanceDataFunction = ?*const fn (?*anyopaque) callconv(.c) void;
pub extern fn CFPlugInInstanceGetInterfaceFunctionTable(instance: CFPlugInInstanceRef, interfaceName: CFStringRef, ftbl: [*c]?*anyopaque) Boolean;
pub extern fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) CFStringRef;
pub extern fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) ?*anyopaque;
pub extern fn CFPlugInInstanceGetTypeID() CFTypeID;
pub extern fn CFPlugInInstanceCreateWithInstanceDataSize(allocator: CFAllocatorRef, instanceDataSize: CFIndex, deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction, factoryName: CFStringRef, getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction) CFPlugInInstanceRef;
pub const struct___CFMachPort = opaque {};
pub const CFMachPortRef = ?*struct___CFMachPort;
pub const CFMachPortContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.c) CFStringRef),
};
pub const CFMachPortCallBack = ?*const fn (CFMachPortRef, ?*anyopaque, CFIndex, ?*anyopaque) callconv(.c) void;
pub const CFMachPortInvalidationCallBack = ?*const fn (CFMachPortRef, ?*anyopaque) callconv(.c) void;
pub extern fn CFMachPortGetTypeID() CFTypeID;
pub extern fn CFMachPortCreate(allocator: CFAllocatorRef, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortCreateWithPort(allocator: CFAllocatorRef, portNum: mach_port_t, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortGetPort(port: CFMachPortRef) mach_port_t;
pub extern fn CFMachPortGetContext(port: CFMachPortRef, context: [*c]CFMachPortContext) void;
pub extern fn CFMachPortInvalidate(port: CFMachPortRef) void;
pub extern fn CFMachPortIsValid(port: CFMachPortRef) Boolean;
pub extern fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef) CFMachPortInvalidationCallBack;
pub extern fn CFMachPortSetInvalidationCallBack(port: CFMachPortRef, callout: CFMachPortInvalidationCallBack) void;
pub extern fn CFMachPortCreateRunLoopSource(allocator: CFAllocatorRef, port: CFMachPortRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFAttributedString = opaque {};
pub const CFAttributedStringRef = ?*const struct___CFAttributedString;
pub const CFMutableAttributedStringRef = ?*struct___CFAttributedString;
pub extern fn CFAttributedStringGetTypeID() CFTypeID;
pub extern fn CFAttributedStringCreate(alloc: CFAllocatorRef, str: CFStringRef, attributes: CFDictionaryRef) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateWithSubstring(alloc: CFAllocatorRef, aStr: CFAttributedStringRef, range: CFRange) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateCopy(alloc: CFAllocatorRef, aStr: CFAttributedStringRef) CFAttributedStringRef;
pub extern fn CFAttributedStringGetString(aStr: CFAttributedStringRef) CFStringRef;
pub extern fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) CFIndex;
pub extern fn CFAttributedStringGetAttributes(aStr: CFAttributedStringRef, loc: CFIndex, effectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttribute(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, effectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, aStr: CFAttributedStringRef) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringReplaceString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFAttributedStringGetMutableString(aStr: CFMutableAttributedStringRef) CFMutableStringRef;
pub extern fn CFAttributedStringSetAttributes(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFDictionaryRef, clearOtherAttributes: Boolean) void;
pub extern fn CFAttributedStringSetAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef, value: CFTypeRef) void;
pub extern fn CFAttributedStringRemoveAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef) void;
pub extern fn CFAttributedStringReplaceAttributedString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFAttributedStringRef) void;
pub extern fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef) void;
pub extern fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef) void;
pub extern fn CFAttributedStringGetBidiLevelsAndResolvedDirections(attributedString: CFAttributedStringRef, range: CFRange, baseDirection: i8, bidiLevels: [*c]u8, baseDirections: [*c]u8) bool;
pub const struct___CFURLEnumerator = opaque {};
pub const CFURLEnumeratorRef = ?*const struct___CFURLEnumerator;
pub extern fn CFURLEnumeratorGetTypeID() CFTypeID;
pub const CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior: c_int = 0;
pub const kCFURLEnumeratorDescendRecursively: c_int = 1;
pub const kCFURLEnumeratorSkipInvisibles: c_int = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: c_int = 4;
pub const kCFURLEnumeratorSkipPackageContents: c_int = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: c_int = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: c_int = 32;
pub const kCFURLEnumeratorGenerateRelativePathURLs: c_int = 64;
const enum_unnamed_83 = c_uint;
pub extern fn CFURLEnumeratorCreateForDirectoryURL(alloc: CFAllocatorRef, directoryURL: CFURLRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub extern fn CFURLEnumeratorCreateForMountedVolumes(alloc: CFAllocatorRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub const CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess: c_int = 1;
pub const kCFURLEnumeratorEnd: c_int = 2;
pub const kCFURLEnumeratorError: c_int = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: c_int = 4;
const enum_unnamed_84 = c_uint;
pub extern fn CFURLEnumeratorGetNextURL(enumerator: CFURLEnumeratorRef, url: [*c]CFURLRef, @"error": [*c]CFErrorRef) CFURLEnumeratorResult;
pub extern fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef) void;
pub extern fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) CFIndex;
pub extern fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) Boolean;
pub const guid_t = extern union {
    g_guid: [16]u8,
    g_guid_asint: [4]c_uint,
};
pub const ntsid_t = extern struct {
    sid_kind: u_int8_t = @import("std").mem.zeroes(u_int8_t),
    sid_authcount: u_int8_t = @import("std").mem.zeroes(u_int8_t),
    sid_authority: [6]u_int8_t = @import("std").mem.zeroes([6]u_int8_t),
    sid_authorities: [16]u_int32_t = @import("std").mem.zeroes([16]u_int32_t),
};
pub const struct_kauth_identity_extlookup = extern struct {
    el_seqno: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_result: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_info_pid: __darwin_pid_t = @import("std").mem.zeroes(__darwin_pid_t),
    el_extend: u_int64_t = @import("std").mem.zeroes(u_int64_t),
    el_info_reserved_1: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_uid: uid_t = @import("std").mem.zeroes(uid_t),
    el_uguid: guid_t = @import("std").mem.zeroes(guid_t),
    el_uguid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_usid: ntsid_t = @import("std").mem.zeroes(ntsid_t),
    el_usid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_gid: gid_t = @import("std").mem.zeroes(gid_t),
    el_gguid: guid_t = @import("std").mem.zeroes(guid_t),
    el_gguid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_gsid: ntsid_t = @import("std").mem.zeroes(ntsid_t),
    el_gsid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_member_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_sup_grp_cnt: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_sup_groups: [16]gid_t = @import("std").mem.zeroes([16]gid_t),
};
pub const struct_kauth_cache_sizes = extern struct {
    kcs_group_size: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    kcs_id_size: u_int32_t = @import("std").mem.zeroes(u_int32_t),
};
pub const kauth_ace_rights_t = u_int32_t;
pub const struct_kauth_ace = extern struct {
    ace_applicable: guid_t = @import("std").mem.zeroes(guid_t),
    ace_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    ace_rights: kauth_ace_rights_t = @import("std").mem.zeroes(kauth_ace_rights_t),
};
pub const kauth_ace_t = [*c]struct_kauth_ace;
pub const struct_kauth_acl = extern struct {
    acl_entrycount: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    acl_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    acl_ace: [1]struct_kauth_ace = @import("std").mem.zeroes([1]struct_kauth_ace),
};
pub const kauth_acl_t = [*c]struct_kauth_acl;
pub const struct_kauth_filesec = extern struct {
    fsec_magic: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    fsec_owner: guid_t = @import("std").mem.zeroes(guid_t),
    fsec_group: guid_t = @import("std").mem.zeroes(guid_t),
    fsec_acl: struct_kauth_acl = @import("std").mem.zeroes(struct_kauth_acl),
};
pub const kauth_filesec_t = [*c]struct_kauth_filesec;
pub const ACL_READ_DATA: c_int = 2;
pub const ACL_LIST_DIRECTORY: c_int = 2;
pub const ACL_WRITE_DATA: c_int = 4;
pub const ACL_ADD_FILE: c_int = 4;
pub const ACL_EXECUTE: c_int = 8;
pub const ACL_SEARCH: c_int = 8;
pub const ACL_DELETE: c_int = 16;
pub const ACL_APPEND_DATA: c_int = 32;
pub const ACL_ADD_SUBDIRECTORY: c_int = 32;
pub const ACL_DELETE_CHILD: c_int = 64;
pub const ACL_READ_ATTRIBUTES: c_int = 128;
pub const ACL_WRITE_ATTRIBUTES: c_int = 256;
pub const ACL_READ_EXTATTRIBUTES: c_int = 512;
pub const ACL_WRITE_EXTATTRIBUTES: c_int = 1024;
pub const ACL_READ_SECURITY: c_int = 2048;
pub const ACL_WRITE_SECURITY: c_int = 4096;
pub const ACL_CHANGE_OWNER: c_int = 8192;
pub const ACL_SYNCHRONIZE: c_int = 1048576;
pub const acl_perm_t = c_uint;
pub const ACL_UNDEFINED_TAG: c_int = 0;
pub const ACL_EXTENDED_ALLOW: c_int = 1;
pub const ACL_EXTENDED_DENY: c_int = 2;
pub const acl_tag_t = c_uint;
pub const ACL_TYPE_EXTENDED: c_int = 256;
pub const ACL_TYPE_ACCESS: c_int = 0;
pub const ACL_TYPE_DEFAULT: c_int = 1;
pub const ACL_TYPE_AFS: c_int = 2;
pub const ACL_TYPE_CODA: c_int = 3;
pub const ACL_TYPE_NTFS: c_int = 4;
pub const ACL_TYPE_NWFS: c_int = 5;
pub const acl_type_t = c_uint;
pub const ACL_FIRST_ENTRY: c_int = 0;
pub const ACL_NEXT_ENTRY: c_int = -1;
pub const ACL_LAST_ENTRY: c_int = -2;
pub const acl_entry_id_t = c_int;
pub const ACL_FLAG_DEFER_INHERIT: c_int = 1;
pub const ACL_FLAG_NO_INHERIT: c_int = 131072;
pub const ACL_ENTRY_INHERITED: c_int = 16;
pub const ACL_ENTRY_FILE_INHERIT: c_int = 32;
pub const ACL_ENTRY_DIRECTORY_INHERIT: c_int = 64;
pub const ACL_ENTRY_LIMIT_INHERIT: c_int = 128;
pub const ACL_ENTRY_ONLY_INHERIT: c_int = 256;
pub const acl_flag_t = c_uint;
pub const struct__acl = opaque {};
pub const struct__acl_entry = opaque {};
pub const struct__acl_permset = opaque {};
pub const struct__acl_flagset = opaque {};
pub const acl_t = ?*struct__acl;
pub const acl_entry_t = ?*struct__acl_entry;
pub const acl_permset_t = ?*struct__acl_permset;
pub const acl_flagset_t = ?*struct__acl_flagset;
pub const acl_permset_mask_t = u_int64_t;
pub extern fn acl_dup(acl: acl_t) acl_t;
pub extern fn acl_free(obj_p: ?*anyopaque) c_int;
pub extern fn acl_init(count: c_int) acl_t;
pub extern fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) c_int;
pub extern fn acl_create_entry(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_create_entry_np(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t, entry_index: c_int) c_int;
pub extern fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) c_int;
pub extern fn acl_get_entry(acl: acl_t, entry_id: c_int, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_valid(acl: acl_t) c_int;
pub extern fn acl_valid_fd_np(fd: c_int, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_file_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_link_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_calc_mask(acl_p: [*c]acl_t) c_int;
pub extern fn acl_clear_perms(permset_d: acl_permset_t) c_int;
pub extern fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_permset(entry_d: acl_entry_t, permset_p: [*c]acl_permset_t) c_int;
pub extern fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) c_int;
pub extern fn acl_maximal_permset_mask_np(mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) c_int;
pub extern fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_clear_flags_np(flagset_d: acl_flagset_t) c_int;
pub extern fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flagset_np(obj_p: ?*anyopaque, flagset_p: [*c]acl_flagset_t) c_int;
pub extern fn acl_set_flagset_np(obj_p: ?*anyopaque, flagset_d: acl_flagset_t) c_int;
pub extern fn acl_get_qualifier(entry_d: acl_entry_t) ?*anyopaque;
pub extern fn acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: [*c]acl_tag_t) c_int;
pub extern fn acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: ?*const anyopaque) c_int;
pub extern fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) c_int;
pub extern fn acl_delete_def_file(path_p: [*c]const u8) c_int;
pub extern fn acl_get_fd(fd: c_int) acl_t;
pub extern fn acl_get_fd_np(fd: c_int, @"type": acl_type_t) acl_t;
pub extern fn acl_get_file(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_get_link_np(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_set_fd(fd: c_int, acl: acl_t) c_int;
pub extern fn acl_set_fd_np(fd: c_int, acl: acl_t, acl_type: acl_type_t) c_int;
pub extern fn acl_set_file(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_set_link_np(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_copy_ext(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_ext_native(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_int(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_copy_int_native(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_from_text(buf_p: [*c]const u8) acl_t;
pub extern fn acl_size(acl: acl_t) isize;
pub extern fn acl_to_text(acl: acl_t, len_p: [*c]isize) [*c]u8;
pub const struct___CFFileSecurity = opaque {};
pub const CFFileSecurityRef = ?*struct___CFFileSecurity;
pub extern fn CFFileSecurityGetTypeID() CFTypeID;
pub extern fn CFFileSecurityCreate(allocator: CFAllocatorRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCreateCopy(allocator: CFAllocatorRef, fileSec: CFFileSecurityRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCopyOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyGroupUUID(fileSec: CFFileSecurityRef, groupUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyAccessControlList(fileSec: CFFileSecurityRef, accessControlList: [*c]acl_t) Boolean;
pub extern fn CFFileSecuritySetAccessControlList(fileSec: CFFileSecurityRef, accessControlList: acl_t) Boolean;
pub extern fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: [*c]uid_t) Boolean;
pub extern fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) Boolean;
pub extern fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: [*c]gid_t) Boolean;
pub extern fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) Boolean;
pub extern fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: [*c]mode_t) Boolean;
pub extern fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) Boolean;
pub const CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner: c_int = 1;
pub const kCFFileSecurityClearGroup: c_int = 2;
pub const kCFFileSecurityClearMode: c_int = 4;
pub const kCFFileSecurityClearOwnerUUID: c_int = 8;
pub const kCFFileSecurityClearGroupUUID: c_int = 16;
pub const kCFFileSecurityClearAccessControlList: c_int = 32;
const enum_unnamed_85 = c_uint;
pub extern fn CFFileSecurityClearProperties(fileSec: CFFileSecurityRef, clearPropertyMask: CFFileSecurityClearOptions) Boolean;
pub extern fn CFStringTokenizerCopyBestStringLanguage(string: CFStringRef, range: CFRange) CFStringRef;
pub const struct___CFStringTokenizer = opaque {};
pub const CFStringTokenizerRef = ?*struct___CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: c_int = 0;
pub const kCFStringTokenizerUnitSentence: c_int = 1;
pub const kCFStringTokenizerUnitParagraph: c_int = 2;
pub const kCFStringTokenizerUnitLineBreak: c_int = 3;
pub const kCFStringTokenizerUnitWordBoundary: c_int = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: c_int = 65536;
pub const kCFStringTokenizerAttributeLanguage: c_int = 131072;
const enum_unnamed_86 = c_uint;
pub const CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone: c_int = 0;
pub const kCFStringTokenizerTokenNormal: c_int = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: c_int = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: c_int = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: c_int = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: c_int = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: c_int = 32;
const enum_unnamed_87 = c_uint;
pub extern fn CFStringTokenizerGetTypeID() CFTypeID;
pub extern fn CFStringTokenizerCreate(alloc: CFAllocatorRef, string: CFStringRef, range: CFRange, options: CFOptionFlags, locale: CFLocaleRef) CFStringTokenizerRef;
pub extern fn CFStringTokenizerSetString(tokenizer: CFStringTokenizerRef, string: CFStringRef, range: CFRange) void;
pub extern fn CFStringTokenizerGoToTokenAtIndex(tokenizer: CFStringTokenizerRef, index: CFIndex) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerAdvanceToNextToken(tokenizer: CFStringTokenizerRef) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) CFRange;
pub extern fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: CFStringTokenizerRef, attribute: CFOptionFlags) CFTypeRef;
pub extern fn CFStringTokenizerGetCurrentSubTokens(tokenizer: CFStringTokenizerRef, ranges: [*c]CFRange, maxRangeLength: CFIndex, derivedSubTokens: CFMutableArrayRef) CFIndex;
pub const CFFileDescriptorNativeDescriptor = c_int;
pub const struct___CFFileDescriptor = opaque {};
pub const CFFileDescriptorRef = ?*struct___CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: c_int = 1;
pub const kCFFileDescriptorWriteCallBack: c_int = 2;
const enum_unnamed_88 = c_uint;
pub const CFFileDescriptorCallBack = ?*const fn (CFFileDescriptorRef, CFOptionFlags, ?*anyopaque) callconv(.c) void;
pub const CFFileDescriptorContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*anyopaque) callconv(.c) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) ?*anyopaque),
    release: ?*const fn (?*anyopaque) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) void),
    copyDescription: ?*const fn (?*anyopaque) callconv(.c) CFStringRef = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) CFStringRef),
};
pub extern fn CFFileDescriptorGetTypeID() CFTypeID;
pub extern fn CFFileDescriptorCreate(allocator: CFAllocatorRef, fd: CFFileDescriptorNativeDescriptor, closeOnInvalidate: Boolean, callout: CFFileDescriptorCallBack, context: [*c]const CFFileDescriptorContext) CFFileDescriptorRef;
pub extern fn CFFileDescriptorGetNativeDescriptor(f: CFFileDescriptorRef) CFFileDescriptorNativeDescriptor;
pub extern fn CFFileDescriptorGetContext(f: CFFileDescriptorRef, context: [*c]CFFileDescriptorContext) void;
pub extern fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef) void;
pub extern fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) Boolean;
pub extern fn CFFileDescriptorCreateRunLoopSource(allocator: CFAllocatorRef, f: CFFileDescriptorRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFUserNotification = opaque {};
pub const CFUserNotificationRef = ?*struct___CFUserNotification;
pub const CFUserNotificationCallBack = ?*const fn (CFUserNotificationRef, CFOptionFlags) callconv(.c) void;
pub extern fn CFUserNotificationGetTypeID() CFTypeID;
pub extern fn CFUserNotificationCreate(allocator: CFAllocatorRef, timeout: CFTimeInterval, flags: CFOptionFlags, @"error": [*c]SInt32, dictionary: CFDictionaryRef) CFUserNotificationRef;
pub extern fn CFUserNotificationReceiveResponse(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, responseFlags: [*c]CFOptionFlags) SInt32;
pub extern fn CFUserNotificationGetResponseValue(userNotification: CFUserNotificationRef, key: CFStringRef, idx: CFIndex) CFStringRef;
pub extern fn CFUserNotificationGetResponseDictionary(userNotification: CFUserNotificationRef) CFDictionaryRef;
pub extern fn CFUserNotificationUpdate(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, flags: CFOptionFlags, dictionary: CFDictionaryRef) SInt32;
pub extern fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) SInt32;
pub extern fn CFUserNotificationCreateRunLoopSource(allocator: CFAllocatorRef, userNotification: CFUserNotificationRef, callout: CFUserNotificationCallBack, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFUserNotificationDisplayNotice(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef) SInt32;
pub extern fn CFUserNotificationDisplayAlert(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef, alternateButtonTitle: CFStringRef, otherButtonTitle: CFStringRef, responseFlags: [*c]CFOptionFlags) SInt32;
pub const kCFUserNotificationStopAlertLevel: c_int = 0;
pub const kCFUserNotificationNoteAlertLevel: c_int = 1;
pub const kCFUserNotificationCautionAlertLevel: c_int = 2;
pub const kCFUserNotificationPlainAlertLevel: c_int = 3;
const enum_unnamed_89 = c_uint;
pub const kCFUserNotificationDefaultResponse: c_int = 0;
pub const kCFUserNotificationAlternateResponse: c_int = 1;
pub const kCFUserNotificationOtherResponse: c_int = 2;
pub const kCFUserNotificationCancelResponse: c_int = 3;
const enum_unnamed_90 = c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: c_int = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: c_int = 64;
const enum_unnamed_91 = c_uint;
pub inline fn CFUserNotificationCheckBoxChecked(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    _ = &i;
    return @as(CFOptionFlags, @bitCast(@as(c_ulong, 1) << @intCast(@as(CFIndex, @bitCast(@as(c_long, @as(c_int, 8)))) + i)));
}
pub inline fn CFUserNotificationSecureTextField(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    _ = &i;
    return @as(CFOptionFlags, @bitCast(@as(c_ulong, 1) << @intCast(@as(CFIndex, @bitCast(@as(c_long, @as(c_int, 16)))) + i)));
}
pub inline fn CFUserNotificationPopUpSelection(arg_n: CFIndex) CFOptionFlags {
    var n = arg_n;
    _ = &n;
    return @as(CFOptionFlags, @bitCast(n << @intCast(24)));
}
pub extern const kCFUserNotificationIconURLKey: CFStringRef;
pub extern const kCFUserNotificationSoundURLKey: CFStringRef;
pub extern const kCFUserNotificationLocalizationURLKey: CFStringRef;
pub extern const kCFUserNotificationAlertHeaderKey: CFStringRef;
pub extern const kCFUserNotificationAlertMessageKey: CFStringRef;
pub extern const kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationOtherButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
pub extern const kCFUserNotificationPopUpTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldTitlesKey: CFStringRef;
pub extern const kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldValuesKey: CFStringRef;
pub extern const kCFUserNotificationPopUpSelectionKey: CFStringRef;
pub extern const kCFUserNotificationAlertTopMostKey: CFStringRef;
pub extern const kCFUserNotificationKeyboardTypesKey: CFStringRef;
pub const kCFXMLNodeCurrentVersion: c_int = 1;
const enum_unnamed_92 = c_uint;
pub const struct___CFXMLNode = opaque {};
pub const CFXMLNodeRef = ?*const struct___CFXMLNode;
pub const CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument: c_int = 1;
pub const kCFXMLNodeTypeElement: c_int = 2;
pub const kCFXMLNodeTypeAttribute: c_int = 3;
pub const kCFXMLNodeTypeProcessingInstruction: c_int = 4;
pub const kCFXMLNodeTypeComment: c_int = 5;
pub const kCFXMLNodeTypeText: c_int = 6;
pub const kCFXMLNodeTypeCDATASection: c_int = 7;
pub const kCFXMLNodeTypeDocumentFragment: c_int = 8;
pub const kCFXMLNodeTypeEntity: c_int = 9;
pub const kCFXMLNodeTypeEntityReference: c_int = 10;
pub const kCFXMLNodeTypeDocumentType: c_int = 11;
pub const kCFXMLNodeTypeWhitespace: c_int = 12;
pub const kCFXMLNodeTypeNotation: c_int = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: c_int = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: c_int = 15;
const enum_unnamed_93 = c_uint;
pub const CFXMLElementInfo = extern struct {
    attributes: CFDictionaryRef = @import("std").mem.zeroes(CFDictionaryRef),
    attributeOrder: CFArrayRef = @import("std").mem.zeroes(CFArrayRef),
    isEmpty: Boolean = @import("std").mem.zeroes(Boolean),
    _reserved: [3]u8 = @import("std").mem.zeroes([3]u8),
};
pub const CFXMLProcessingInstructionInfo = extern struct {
    dataString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLDocumentInfo = extern struct {
    sourceURL: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    encoding: CFStringEncoding = @import("std").mem.zeroes(CFStringEncoding),
};
pub const CFXMLExternalID = extern struct {
    systemID: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    publicID: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLDocumentTypeInfo = extern struct {
    externalID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
};
pub const CFXMLNotationInfo = extern struct {
    externalID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
};
pub const CFXMLElementTypeDeclarationInfo = extern struct {
    contentDescription: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLAttributeDeclarationInfo = extern struct {
    attributeName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    typeString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    defaultString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLAttributeListDeclarationInfo = extern struct {
    numberOfAttributes: CFIndex = @import("std").mem.zeroes(CFIndex),
    attributes: [*c]CFXMLAttributeDeclarationInfo = @import("std").mem.zeroes([*c]CFXMLAttributeDeclarationInfo),
};
pub const CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter: c_int = 0;
pub const kCFXMLEntityTypeParsedInternal: c_int = 1;
pub const kCFXMLEntityTypeParsedExternal: c_int = 2;
pub const kCFXMLEntityTypeUnparsed: c_int = 3;
pub const kCFXMLEntityTypeCharacter: c_int = 4;
const enum_unnamed_94 = c_uint;
pub const CFXMLEntityInfo = extern struct {
    entityType: CFXMLEntityTypeCode = @import("std").mem.zeroes(CFXMLEntityTypeCode),
    replacementText: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    entityID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
    notationName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLEntityReferenceInfo = extern struct {
    entityType: CFXMLEntityTypeCode = @import("std").mem.zeroes(CFXMLEntityTypeCode),
};
pub extern fn CFXMLNodeGetTypeID() CFTypeID;
pub extern fn CFXMLNodeCreate(alloc: CFAllocatorRef, xmlType: CFXMLNodeTypeCode, dataString: CFStringRef, additionalInfoPtr: ?*const anyopaque, version: CFIndex) CFXMLNodeRef;
pub extern fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) CFXMLNodeRef;
pub extern fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) CFXMLNodeTypeCode;
pub extern fn CFXMLNodeGetString(node: CFXMLNodeRef) CFStringRef;
pub extern fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) ?*const anyopaque;
pub extern fn CFXMLNodeGetVersion(node: CFXMLNodeRef) CFIndex;
pub extern fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) CFXMLTreeRef;
pub extern fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) CFXMLNodeRef;
pub const struct___CFXMLParser = opaque {};
pub const CFXMLParserRef = ?*struct___CFXMLParser;
pub const CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument: c_int = 1;
pub const kCFXMLParserSkipMetaData: c_int = 2;
pub const kCFXMLParserReplacePhysicalEntities: c_int = 4;
pub const kCFXMLParserSkipWhitespace: c_int = 8;
pub const kCFXMLParserResolveExternalEntities: c_int = 16;
pub const kCFXMLParserAddImpliedAttributes: c_int = 32;
pub const kCFXMLParserAllOptions: c_int = 16777215;
pub const kCFXMLParserNoOptions: c_int = 0;
const enum_unnamed_95 = c_uint;
pub const CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun: c_int = -2;
pub const kCFXMLStatusParseInProgress: c_int = -1;
pub const kCFXMLStatusParseSuccessful: c_int = 0;
pub const kCFXMLErrorUnexpectedEOF: c_int = 1;
pub const kCFXMLErrorUnknownEncoding: c_int = 2;
pub const kCFXMLErrorEncodingConversionFailure: c_int = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: c_int = 4;
pub const kCFXMLErrorMalformedDTD: c_int = 5;
pub const kCFXMLErrorMalformedName: c_int = 6;
pub const kCFXMLErrorMalformedCDSect: c_int = 7;
pub const kCFXMLErrorMalformedCloseTag: c_int = 8;
pub const kCFXMLErrorMalformedStartTag: c_int = 9;
pub const kCFXMLErrorMalformedDocument: c_int = 10;
pub const kCFXMLErrorElementlessDocument: c_int = 11;
pub const kCFXMLErrorMalformedComment: c_int = 12;
pub const kCFXMLErrorMalformedCharacterReference: c_int = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: c_int = 14;
pub const kCFXMLErrorNoData: c_int = 15;
const enum_unnamed_96 = c_int;
pub const CFXMLParserCreateXMLStructureCallBack = ?*const fn (CFXMLParserRef, CFXMLNodeRef, ?*anyopaque) callconv(.c) ?*anyopaque;
pub const CFXMLParserAddChildCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const CFXMLParserEndXMLStructureCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque) callconv(.c) void;
pub const CFXMLParserResolveExternalEntityCallBack = ?*const fn (CFXMLParserRef, [*c]CFXMLExternalID, ?*anyopaque) callconv(.c) CFDataRef;
pub const CFXMLParserHandleErrorCallBack = ?*const fn (CFXMLParserRef, CFXMLParserStatusCode, ?*anyopaque) callconv(.c) Boolean;
pub const CFXMLParserCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    createXMLStructure: CFXMLParserCreateXMLStructureCallBack = @import("std").mem.zeroes(CFXMLParserCreateXMLStructureCallBack),
    addChild: CFXMLParserAddChildCallBack = @import("std").mem.zeroes(CFXMLParserAddChildCallBack),
    endXMLStructure: CFXMLParserEndXMLStructureCallBack = @import("std").mem.zeroes(CFXMLParserEndXMLStructureCallBack),
    resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack = @import("std").mem.zeroes(CFXMLParserResolveExternalEntityCallBack),
    handleError: CFXMLParserHandleErrorCallBack = @import("std").mem.zeroes(CFXMLParserHandleErrorCallBack),
};
pub const CFXMLParserRetainCallBack = ?*const fn (?*const anyopaque) callconv(.c) ?*const anyopaque;
pub const CFXMLParserReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.c) void;
pub const CFXMLParserCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.c) CFStringRef;
pub const CFXMLParserContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFXMLParserRetainCallBack = @import("std").mem.zeroes(CFXMLParserRetainCallBack),
    release: CFXMLParserReleaseCallBack = @import("std").mem.zeroes(CFXMLParserReleaseCallBack),
    copyDescription: CFXMLParserCopyDescriptionCallBack = @import("std").mem.zeroes(CFXMLParserCopyDescriptionCallBack),
};
pub extern fn CFXMLParserGetTypeID() CFTypeID;
pub extern fn CFXMLParserCreate(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserGetContext(parser: CFXMLParserRef, context: [*c]CFXMLParserContext) void;
pub extern fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: [*c]CFXMLParserCallBacks) void;
pub extern fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) CFURLRef;
pub extern fn CFXMLParserGetLocation(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetDocument(parser: CFXMLParserRef) ?*anyopaque;
pub extern fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) CFXMLParserStatusCode;
pub extern fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) CFStringRef;
pub extern fn CFXMLParserAbort(parser: CFXMLParserRef, errorCode: CFXMLParserStatusCode, errorDescription: CFStringRef) void;
pub extern fn CFXMLParserParse(parser: CFXMLParserRef) Boolean;
pub extern fn CFXMLTreeCreateFromData(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateFromDataWithError(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, errorDict: [*c]CFDictionaryRef) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) CFDataRef;
pub extern fn CFXMLCreateStringByEscapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern fn CFXMLCreateStringByUnescapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern const kCFXMLTreeErrorDescription: CFStringRef;
pub extern const kCFXMLTreeErrorLineNumber: CFStringRef;
pub extern const kCFXMLTreeErrorLocation: CFStringRef;
pub extern const kCFXMLTreeErrorStatusCode: CFStringRef;
pub const AudioComponentFlags = UInt32;
pub const kAudioComponentFlag_Unsearchable: c_int = 1;
pub const kAudioComponentFlag_SandboxSafe: c_int = 2;
pub const kAudioComponentFlag_IsV3AudioUnit: c_int = 4;
pub const kAudioComponentFlag_RequiresAsyncInstantiation: c_int = 8;
pub const kAudioComponentFlag_CanLoadInProcess: c_int = 16;
const enum_unnamed_97 = c_uint;
pub const AudioComponentInstantiationOptions = UInt32;
pub const kAudioComponentInstantiation_LoadOutOfProcess: c_uint = 1;
pub const kAudioComponentInstantiation_LoadInProcess: c_uint = 2;
pub const kAudioComponentInstantiation_LoadedRemotely: c_uint = 2147483648;
const enum_unnamed_98 = c_uint;
pub const struct_AudioComponentDescription = extern struct {
    componentType: OSType = @import("std").mem.zeroes(OSType),
    componentSubType: OSType = @import("std").mem.zeroes(OSType),
    componentManufacturer: OSType = @import("std").mem.zeroes(OSType),
    componentFlags: UInt32 = @import("std").mem.zeroes(UInt32),
    componentFlagsMask: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioComponentDescription = struct_AudioComponentDescription;
pub const struct_OpaqueAudioComponent = opaque {};
pub const AudioComponent = ?*struct_OpaqueAudioComponent;
pub const struct_ComponentInstanceRecord = opaque {};
pub const AudioComponentInstance = ?*struct_ComponentInstanceRecord;
pub const AudioComponentMethod = ?*const fn (?*anyopaque, ...) callconv(.c) OSStatus;
pub const struct_AudioComponentPlugInInterface = extern struct {
    Open: ?*const fn (?*anyopaque, AudioComponentInstance) callconv(.c) OSStatus = @import("std").mem.zeroes(?*const fn (?*anyopaque, AudioComponentInstance) callconv(.c) OSStatus),
    Close: ?*const fn (?*anyopaque) callconv(.c) OSStatus = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.c) OSStatus),
    Lookup: ?*const fn (SInt16) callconv(.c) AudioComponentMethod = @import("std").mem.zeroes(?*const fn (SInt16) callconv(.c) AudioComponentMethod),
    reserved: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const AudioComponentPlugInInterface = struct_AudioComponentPlugInInterface;
pub const AudioComponentFactoryFunction = ?*const fn ([*c]const AudioComponentDescription) callconv(.c) [*c]AudioComponentPlugInInterface;
pub extern fn AudioComponentFindNext(inComponent: AudioComponent, inDesc: [*c]const AudioComponentDescription) AudioComponent;
pub extern fn AudioComponentCount(inDesc: [*c]const AudioComponentDescription) UInt32;
pub extern fn AudioComponentCopyName(inComponent: AudioComponent, outName: [*c]CFStringRef) OSStatus;
pub extern fn AudioComponentGetDescription(inComponent: AudioComponent, outDesc: [*c]AudioComponentDescription) OSStatus;
pub extern fn AudioComponentGetVersion(inComponent: AudioComponent, outVersion: [*c]UInt32) OSStatus;
pub extern fn AudioComponentInstanceNew(inComponent: AudioComponent, outInstance: [*c]AudioComponentInstance) OSStatus;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioComponent.h:514:1: warning: unsupported type: 'BlockPointer'
pub const AudioComponentInstantiate = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioComponent.h:514:1
pub extern fn AudioComponentInstanceDispose(inInstance: AudioComponentInstance) OSStatus;
pub extern fn AudioComponentInstanceGetComponent(inInstance: AudioComponentInstance) AudioComponent;
pub extern fn AudioComponentInstanceCanDo(inInstance: AudioComponentInstance, inSelectorID: SInt16) Boolean;
pub extern fn AudioComponentRegister(inDesc: [*c]const AudioComponentDescription, inName: CFStringRef, inVersion: UInt32, inFactory: AudioComponentFactoryFunction) AudioComponent;
pub extern fn AudioComponentCopyConfigurationInfo(inComponent: AudioComponent, outConfigurationInfo: [*c]CFDictionaryRef) OSStatus;
pub const AudioComponentValidationResult = UInt32;
pub const kAudioComponentValidationResult_Unknown: c_int = 0;
pub const kAudioComponentValidationResult_Passed: c_int = 1;
pub const kAudioComponentValidationResult_Failed: c_int = 2;
pub const kAudioComponentValidationResult_TimedOut: c_int = 3;
pub const kAudioComponentValidationResult_UnauthorizedError_Open: c_int = 4;
pub const kAudioComponentValidationResult_UnauthorizedError_Init: c_int = 5;
const enum_unnamed_99 = c_uint;
pub extern fn AudioComponentValidate(inComponent: AudioComponent, inValidationParameters: CFDictionaryRef, outValidationResult: [*c]AudioComponentValidationResult) OSStatus;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioComponent.h:701:1: warning: unsupported type: 'BlockPointer'
pub const AudioComponentValidateWithResults = @compileError("unable to resolve prototype of function");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioComponent.h:701:1
pub const AudioUnit = AudioComponentInstance;
pub const kAudioUnitType_Output: c_int = 1635086197;
pub const kAudioUnitType_MusicDevice: c_int = 1635085685;
pub const kAudioUnitType_MusicEffect: c_int = 1635085670;
pub const kAudioUnitType_FormatConverter: c_int = 1635083875;
pub const kAudioUnitType_Effect: c_int = 1635083896;
pub const kAudioUnitType_Mixer: c_int = 1635085688;
pub const kAudioUnitType_Panner: c_int = 1635086446;
pub const kAudioUnitType_Generator: c_int = 1635084142;
pub const kAudioUnitType_OfflineEffect: c_int = 1635086188;
pub const kAudioUnitType_MIDIProcessor: c_int = 1635085673;
pub const kAudioUnitType_SpeechSynthesizer: c_int = 1635087216;
const enum_unnamed_100 = c_uint;
pub const kAudioUnitType_RemoteEffect: c_int = 1635086968;
pub const kAudioUnitType_RemoteGenerator: c_int = 1635086951;
pub const kAudioUnitType_RemoteInstrument: c_int = 1635086953;
pub const kAudioUnitType_RemoteMusicEffect: c_int = 1635086957;
const enum_unnamed_101 = c_uint;
pub const kAudioUnitManufacturer_Apple: c_int = 1634758764;
const enum_unnamed_102 = c_uint;
pub const kAudioUnitSubType_GenericOutput: c_int = 1734700658;
pub const kAudioUnitSubType_VoiceProcessingIO: c_int = 1987078511;
const enum_unnamed_103 = c_uint;
pub const kAudioUnitSubType_HALOutput: c_int = 1634230636;
pub const kAudioUnitSubType_DefaultOutput: c_int = 1684366880;
pub const kAudioUnitSubType_SystemOutput: c_int = 1937339168;
const enum_unnamed_104 = c_uint;
pub const kAudioUnitSubType_DLSSynth: c_int = 1684828960;
pub const kAudioUnitSubType_Sampler: c_int = 1935764848;
pub const kAudioUnitSubType_MIDISynth: c_int = 1836284270;
const enum_unnamed_105 = c_uint;
pub const kAudioUnitSubType_AUConverter: c_int = 1668247158;
pub const kAudioUnitSubType_Varispeed: c_int = 1986097769;
pub const kAudioUnitSubType_DeferredRenderer: c_int = 1684366962;
pub const kAudioUnitSubType_Splitter: c_int = 1936747636;
pub const kAudioUnitSubType_MultiSplitter: c_int = 1836281964;
pub const kAudioUnitSubType_Merger: c_int = 1835364967;
pub const kAudioUnitSubType_NewTimePitch: c_int = 1853191280;
pub const kAudioUnitSubType_AUiPodTimeOther: c_int = 1768977519;
pub const kAudioUnitSubType_RoundTripAAC: c_int = 1918984547;
const enum_unnamed_106 = c_uint;
pub const kAudioUnitSubType_TimePitch: c_int = 1953329268;
const enum_unnamed_107 = c_uint;
pub const kAudioUnitSubType_PeakLimiter: c_int = 1819112562;
pub const kAudioUnitSubType_DynamicsProcessor: c_int = 1684237680;
pub const kAudioUnitSubType_LowPassFilter: c_int = 1819304307;
pub const kAudioUnitSubType_HighPassFilter: c_int = 1752195443;
pub const kAudioUnitSubType_BandPassFilter: c_int = 1651532147;
pub const kAudioUnitSubType_HighShelfFilter: c_int = 1752393830;
pub const kAudioUnitSubType_LowShelfFilter: c_int = 1819502694;
pub const kAudioUnitSubType_ParametricEQ: c_int = 1886217585;
pub const kAudioUnitSubType_Distortion: c_int = 1684632436;
pub const kAudioUnitSubType_Delay: c_int = 1684368505;
pub const kAudioUnitSubType_SampleDelay: c_int = 1935961209;
pub const kAudioUnitSubType_NBandEQ: c_int = 1851942257;
pub const kAudioUnitSubType_Reverb2: c_int = 1920361010;
pub const kAudioUnitSubType_AUSoundIsolation: c_int = 1987012979;
const enum_unnamed_108 = c_uint;
pub const kAudioUnitSubType_GraphicEQ: c_int = 1735550321;
pub const kAudioUnitSubType_MultiBandCompressor: c_int = 1835232624;
pub const kAudioUnitSubType_MatrixReverb: c_int = 1836213622;
pub const kAudioUnitSubType_Pitch: c_int = 1953329268;
pub const kAudioUnitSubType_AUFilter: c_int = 1718185076;
pub const kAudioUnitSubType_NetSend: c_int = 1853058660;
pub const kAudioUnitSubType_RogerBeep: c_int = 1919903602;
const enum_unnamed_109 = c_uint;
pub const kAudioUnitSubType_MultiChannelMixer: c_int = 1835232632;
pub const kAudioUnitSubType_MatrixMixer: c_int = 1836608888;
pub const kAudioUnitSubType_SpatialMixer: c_int = 862217581;
const enum_unnamed_110 = c_uint;
pub const kAudioUnitSubType_StereoMixer: c_int = 1936554098;
pub const kAudioUnitSubType_3DMixer: c_int = 862219640;
const enum_unnamed_111 = c_uint;
pub const kAudioUnitSubType_SphericalHeadPanner: c_int = 1936746610;
pub const kAudioUnitSubType_VectorPanner: c_int = 1986158963;
pub const kAudioUnitSubType_SoundFieldPanner: c_int = 1634558569;
pub const kAudioUnitSubType_HRTFPanner: c_int = 1752331366;
const enum_unnamed_112 = c_uint;
pub const kAudioUnitSubType_NetReceive: c_int = 1852990326;
pub const kAudioUnitSubType_ScheduledSoundPlayer: c_int = 1936945260;
pub const kAudioUnitSubType_AudioFilePlayer: c_int = 1634103404;
const enum_unnamed_113 = c_uint;
pub const AudioUnitRenderActionFlags = UInt32;
pub const kAudioUnitRenderAction_PreRender: c_int = 4;
pub const kAudioUnitRenderAction_PostRender: c_int = 8;
pub const kAudioUnitRenderAction_OutputIsSilence: c_int = 16;
pub const kAudioOfflineUnitRenderAction_Preflight: c_int = 32;
pub const kAudioOfflineUnitRenderAction_Render: c_int = 64;
pub const kAudioOfflineUnitRenderAction_Complete: c_int = 128;
pub const kAudioUnitRenderAction_PostRenderError: c_int = 256;
pub const kAudioUnitRenderAction_DoNotCheckRenderArgs: c_int = 512;
const enum_unnamed_114 = c_uint;
pub const kAudioUnitErr_InvalidProperty: c_int = -10879;
pub const kAudioUnitErr_InvalidParameter: c_int = -10878;
pub const kAudioUnitErr_InvalidElement: c_int = -10877;
pub const kAudioUnitErr_NoConnection: c_int = -10876;
pub const kAudioUnitErr_FailedInitialization: c_int = -10875;
pub const kAudioUnitErr_TooManyFramesToProcess: c_int = -10874;
pub const kAudioUnitErr_InvalidFile: c_int = -10871;
pub const kAudioUnitErr_UnknownFileType: c_int = -10870;
pub const kAudioUnitErr_FileNotSpecified: c_int = -10869;
pub const kAudioUnitErr_FormatNotSupported: c_int = -10868;
pub const kAudioUnitErr_Uninitialized: c_int = -10867;
pub const kAudioUnitErr_InvalidScope: c_int = -10866;
pub const kAudioUnitErr_PropertyNotWritable: c_int = -10865;
pub const kAudioUnitErr_CannotDoInCurrentContext: c_int = -10863;
pub const kAudioUnitErr_InvalidPropertyValue: c_int = -10851;
pub const kAudioUnitErr_PropertyNotInUse: c_int = -10850;
pub const kAudioUnitErr_Initialized: c_int = -10849;
pub const kAudioUnitErr_InvalidOfflineRender: c_int = -10848;
pub const kAudioUnitErr_Unauthorized: c_int = -10847;
pub const kAudioUnitErr_MIDIOutputBufferFull: c_int = -66753;
pub const kAudioComponentErr_InstanceTimedOut: c_int = -66754;
pub const kAudioComponentErr_InstanceInvalidated: c_int = -66749;
pub const kAudioUnitErr_RenderTimeout: c_int = -66745;
pub const kAudioUnitErr_ExtensionNotFound: c_int = -66744;
pub const kAudioUnitErr_InvalidParameterValue: c_int = -66743;
pub const kAudioUnitErr_InvalidFilePath: c_int = -66742;
pub const kAudioUnitErr_MissingKey: c_int = -66741;
pub const kAudioUnitErr_ComponentManagerNotSupported: c_int = -66740;
pub const kAudioUnitErr_MultipleVoiceProcessors: c_int = -66635;
const enum_unnamed_115 = c_int;
pub const kAudioComponentErr_DuplicateDescription: c_int = -66752;
pub const kAudioComponentErr_UnsupportedType: c_int = -66751;
pub const kAudioComponentErr_TooManyInstances: c_int = -66750;
pub const kAudioComponentErr_NotPermitted: c_int = -66748;
pub const kAudioComponentErr_InitializationTimedOut: c_int = -66747;
pub const kAudioComponentErr_InvalidFormat: c_int = -66746;
const enum_unnamed_116 = c_int;
pub const AudioUnitPropertyID = UInt32;
pub const AudioUnitScope = UInt32;
pub const AudioUnitElement = UInt32;
pub const AudioUnitParameterID = UInt32;
pub const AudioUnitParameterValue = Float32;
pub const AUParameterEventType = UInt32;
pub const kParameterEvent_Immediate: c_int = 1;
pub const kParameterEvent_Ramped: c_int = 2;
const enum_unnamed_117 = c_uint;
const struct_unnamed_119 = extern struct {
    startBufferOffset: SInt32 = @import("std").mem.zeroes(SInt32),
    durationInFrames: UInt32 = @import("std").mem.zeroes(UInt32),
    startValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    endValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
};
const struct_unnamed_120 = extern struct {
    bufferOffset: UInt32 = @import("std").mem.zeroes(UInt32),
    value: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
};
const union_unnamed_118 = extern union {
    ramp: struct_unnamed_119,
    immediate: struct_unnamed_120,
};
pub const struct_AudioUnitParameterEvent = extern struct {
    scope: AudioUnitScope = @import("std").mem.zeroes(AudioUnitScope),
    element: AudioUnitElement = @import("std").mem.zeroes(AudioUnitElement),
    parameter: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    eventType: AUParameterEventType = @import("std").mem.zeroes(AUParameterEventType),
    eventValues: union_unnamed_118 = @import("std").mem.zeroes(union_unnamed_118),
};
pub const AudioUnitParameterEvent = struct_AudioUnitParameterEvent;
pub const struct_AudioUnitParameter = extern struct {
    mAudioUnit: AudioUnit = @import("std").mem.zeroes(AudioUnit),
    mParameterID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    mScope: AudioUnitScope = @import("std").mem.zeroes(AudioUnitScope),
    mElement: AudioUnitElement = @import("std").mem.zeroes(AudioUnitElement),
};
pub const AudioUnitParameter = struct_AudioUnitParameter;
pub const struct_AudioUnitProperty = extern struct {
    mAudioUnit: AudioUnit = @import("std").mem.zeroes(AudioUnit),
    mPropertyID: AudioUnitPropertyID = @import("std").mem.zeroes(AudioUnitPropertyID),
    mScope: AudioUnitScope = @import("std").mem.zeroes(AudioUnitScope),
    mElement: AudioUnitElement = @import("std").mem.zeroes(AudioUnitElement),
};
pub const AudioUnitProperty = struct_AudioUnitProperty;
pub const AURenderCallback = ?*const fn (?*anyopaque, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]AudioBufferList) callconv(.c) OSStatus;
pub const AudioUnitPropertyListenerProc = ?*const fn (?*anyopaque, AudioUnit, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement) callconv(.c) void;
pub const AUInputSamplesInOutputCallback = ?*const fn (?*anyopaque, [*c]const AudioTimeStamp, Float64, Float64) callconv(.c) void;
pub extern const kAudioComponentRegistrationsChangedNotification: CFStringRef;
pub extern const kAudioComponentInstanceInvalidationNotification: CFStringRef;
pub extern fn AudioUnitInitialize(inUnit: AudioUnit) OSStatus;
pub extern fn AudioUnitUninitialize(inUnit: AudioUnit) OSStatus;
pub extern fn AudioUnitGetPropertyInfo(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outDataSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioUnitGetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outData: ?*anyopaque, ioDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioUnitSetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, inData: ?*const anyopaque, inDataSize: UInt32) OSStatus;
pub extern fn AudioUnitAddPropertyListener(inUnit: AudioUnit, inID: AudioUnitPropertyID, inProc: AudioUnitPropertyListenerProc, inProcUserData: ?*anyopaque) OSStatus;
pub extern fn AudioUnitRemovePropertyListenerWithUserData(inUnit: AudioUnit, inID: AudioUnitPropertyID, inProc: AudioUnitPropertyListenerProc, inProcUserData: ?*anyopaque) OSStatus;
pub extern fn AudioUnitAddRenderNotify(inUnit: AudioUnit, inProc: AURenderCallback, inProcUserData: ?*anyopaque) OSStatus;
pub extern fn AudioUnitRemoveRenderNotify(inUnit: AudioUnit, inProc: AURenderCallback, inProcUserData: ?*anyopaque) OSStatus;
pub extern fn AudioUnitGetParameter(inUnit: AudioUnit, inID: AudioUnitParameterID, inScope: AudioUnitScope, inElement: AudioUnitElement, outValue: [*c]AudioUnitParameterValue) OSStatus;
pub extern fn AudioUnitSetParameter(inUnit: AudioUnit, inID: AudioUnitParameterID, inScope: AudioUnitScope, inElement: AudioUnitElement, inValue: AudioUnitParameterValue, inBufferOffsetInFrames: UInt32) OSStatus;
pub extern fn AudioUnitScheduleParameters(inUnit: AudioUnit, inParameterEvent: [*c]const AudioUnitParameterEvent, inNumParamEvents: UInt32) OSStatus;
pub extern fn AudioUnitRender(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inOutputBusNumber: UInt32, inNumberFrames: UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitProcess(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inNumberFrames: UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitProcessMultiple(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inNumberFrames: UInt32, inNumberInputBufferLists: UInt32, inInputBufferLists: [*c][*c]const AudioBufferList, inNumberOutputBufferLists: UInt32, ioOutputBufferLists: [*c][*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitReset(inUnit: AudioUnit, inScope: AudioUnitScope, inElement: AudioUnitElement) OSStatus;
pub extern fn AudioOutputUnitPublish(inDesc: [*c]const AudioComponentDescription, inName: CFStringRef, inVersion: UInt32, inOutputUnit: AudioUnit) OSStatus;
pub extern fn AudioComponentGetLastActiveTime(comp: AudioComponent) CFAbsoluteTime;
pub extern fn AudioUnitExtensionSetComponentList(extensionIdentifier: CFStringRef, audioComponentInfo: CFArrayRef) OSStatus;
pub extern fn AudioUnitExtensionCopyComponentList(extensionIdentifier: CFStringRef) CFArrayRef;
pub const kAudioUnitRange: c_int = 0;
pub const kAudioUnitInitializeSelect: c_int = 1;
pub const kAudioUnitUninitializeSelect: c_int = 2;
pub const kAudioUnitGetPropertyInfoSelect: c_int = 3;
pub const kAudioUnitGetPropertySelect: c_int = 4;
pub const kAudioUnitSetPropertySelect: c_int = 5;
pub const kAudioUnitAddPropertyListenerSelect: c_int = 10;
pub const kAudioUnitRemovePropertyListenerSelect: c_int = 11;
pub const kAudioUnitRemovePropertyListenerWithUserDataSelect: c_int = 18;
pub const kAudioUnitAddRenderNotifySelect: c_int = 15;
pub const kAudioUnitRemoveRenderNotifySelect: c_int = 16;
pub const kAudioUnitGetParameterSelect: c_int = 6;
pub const kAudioUnitSetParameterSelect: c_int = 7;
pub const kAudioUnitScheduleParametersSelect: c_int = 17;
pub const kAudioUnitRenderSelect: c_int = 14;
pub const kAudioUnitResetSelect: c_int = 9;
pub const kAudioUnitComplexRenderSelect: c_int = 19;
pub const kAudioUnitProcessSelect: c_int = 20;
pub const kAudioUnitProcessMultipleSelect: c_int = 21;
const enum_unnamed_121 = c_uint;
pub const AudioUnitInitializeProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitUninitializeProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitGetPropertyInfoProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, [*c]UInt32, [*c]Boolean) callconv(.c) OSStatus;
pub const AudioUnitGetPropertyProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, ?*anyopaque, [*c]UInt32) callconv(.c) OSStatus;
pub const AudioUnitSetPropertyProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, ?*const anyopaque, UInt32) callconv(.c) OSStatus;
pub const AudioUnitAddPropertyListenerProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitPropertyListenerProc, ?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitRemovePropertyListenerProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitPropertyListenerProc) callconv(.c) OSStatus;
pub const AudioUnitRemovePropertyListenerWithUserDataProc = ?*const fn (?*anyopaque, AudioUnitPropertyID, AudioUnitPropertyListenerProc, ?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitAddRenderNotifyProc = ?*const fn (?*anyopaque, AURenderCallback, ?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitRemoveRenderNotifyProc = ?*const fn (?*anyopaque, AURenderCallback, ?*anyopaque) callconv(.c) OSStatus;
pub const AudioUnitScheduleParametersProc = ?*const fn (?*anyopaque, [*c]const AudioUnitParameterEvent, UInt32) callconv(.c) OSStatus;
pub const AudioUnitResetProc = ?*const fn (?*anyopaque, AudioUnitScope, AudioUnitElement) callconv(.c) OSStatus;
pub const AudioUnitComplexRenderProc = ?*const fn (?*anyopaque, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]AudioBufferList, ?*anyopaque, [*c]UInt32) callconv(.c) OSStatus;
pub const AudioUnitProcessProc = ?*const fn (?*anyopaque, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, [*c]AudioBufferList) callconv(.c) OSStatus;
pub const AudioUnitProcessMultipleProc = ?*const fn (?*anyopaque, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c][*c]const AudioBufferList, UInt32, [*c][*c]AudioBufferList) callconv(.c) OSStatus;
pub const AudioUnitGetParameterProc = ?*const fn (?*anyopaque, AudioUnitParameterID, AudioUnitScope, AudioUnitElement, [*c]AudioUnitParameterValue) callconv(.c) OSStatus;
pub const AudioUnitSetParameterProc = ?*const fn (?*anyopaque, AudioUnitParameterID, AudioUnitScope, AudioUnitElement, AudioUnitParameterValue, UInt32) callconv(.c) OSStatus;
pub const AudioUnitRenderProc = ?*const fn (?*anyopaque, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]AudioBufferList) callconv(.c) OSStatus;
pub const kAudioUnitErr_IllegalInstrument: c_int = -10873;
pub const kAudioUnitErr_InstrumentTypeNotFound: c_int = -10872;
const enum_unnamed_122 = c_int;
pub const AudioCodec = AudioComponentInstance;
pub const AudioCodecPropertyID = UInt32;
pub const struct_AudioCodecMagicCookieInfo = extern struct {
    mMagicCookieSize: UInt32 = @import("std").mem.zeroes(UInt32),
    mMagicCookie: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const AudioCodecMagicCookieInfo = struct_AudioCodecMagicCookieInfo;
pub const kAudioDecoderComponentType: c_int = 1633969507;
pub const kAudioEncoderComponentType: c_int = 1634037347;
pub const kAudioUnityCodecComponentType: c_int = 1633903715;
const enum_unnamed_123 = c_uint;
pub const kAudioCodecPropertySupportedInputFormats: c_int = 1768320291;
pub const kAudioCodecPropertySupportedOutputFormats: c_int = 1868983587;
pub const kAudioCodecPropertyAvailableInputSampleRates: c_int = 1634300786;
pub const kAudioCodecPropertyAvailableOutputSampleRates: c_int = 1634694002;
pub const kAudioCodecPropertyAvailableBitRateRange: c_int = 1633841780;
pub const kAudioCodecPropertyMinimumNumberInputPackets: c_int = 1835952496;
pub const kAudioCodecPropertyMinimumNumberOutputPackets: c_int = 1835954032;
pub const kAudioCodecPropertyAvailableNumberChannels: c_int = 1668116067;
pub const kAudioCodecPropertyDoesSampleRateConversion: c_int = 1819112035;
pub const kAudioCodecPropertyAvailableInputChannelLayoutTags: c_int = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayoutTags: c_int = 1634689900;
pub const kAudioCodecPropertyInputFormatsForOutputFormat: c_int = 1768305775;
pub const kAudioCodecPropertyOutputFormatsForInputFormat: c_int = 1868969065;
pub const kAudioCodecPropertyFormatInfo: c_int = 1633904233;
const enum_unnamed_124 = c_uint;
pub const kAudioCodecPropertyInputBufferSize: c_int = 1952609638;
pub const kAudioCodecPropertyPacketFrameSize: c_int = 1885432678;
pub const kAudioCodecPropertyHasVariablePacketByteSizes: c_int = 1987078975;
pub const kAudioCodecPropertyEmploysDependentPackets: c_int = 1685089087;
pub const kAudioCodecPropertyMaximumPacketByteSize: c_int = 1885432674;
pub const kAudioCodecPropertyPacketSizeLimitForVBR: c_int = 1885432684;
pub const kAudioCodecPropertyCurrentInputFormat: c_int = 1768320372;
pub const kAudioCodecPropertyCurrentOutputFormat: c_int = 1868983668;
pub const kAudioCodecPropertyMagicCookie: c_int = 1802857321;
pub const kAudioCodecPropertyUsedInputBufferSize: c_int = 1969386854;
pub const kAudioCodecPropertyIsInitialized: c_int = 1768843636;
pub const kAudioCodecPropertyCurrentTargetBitRate: c_int = 1651663220;
pub const kAudioCodecPropertyCurrentInputSampleRate: c_int = 1667855218;
pub const kAudioCodecPropertyCurrentOutputSampleRate: c_int = 1668248434;
pub const kAudioCodecPropertyQualitySetting: c_int = 1936876401;
pub const kAudioCodecPropertyApplicableBitRateRange: c_int = 1651668065;
pub const kAudioCodecPropertyRecommendedBitRateRange: c_int = 1651668082;
pub const kAudioCodecPropertyApplicableInputSampleRates: c_int = 1769173601;
pub const kAudioCodecPropertyApplicableOutputSampleRates: c_int = 1869836897;
pub const kAudioCodecPropertyPaddedZeros: c_int = 1885430832;
pub const kAudioCodecPropertyPrimeMethod: c_int = 1886547309;
pub const kAudioCodecPropertyPrimeInfo: c_int = 1886546285;
pub const kAudioCodecPropertyCurrentInputChannelLayout: c_int = 1768123424;
pub const kAudioCodecPropertyCurrentOutputChannelLayout: c_int = 1868786720;
pub const kAudioCodecPropertySettings: c_int = 1633907488;
pub const kAudioCodecPropertyFormatList: c_int = 1633904236;
pub const kAudioCodecPropertyBitRateControlMode: c_int = 1633903206;
pub const kAudioCodecPropertySoundQualityForVBR: c_int = 1986163313;
pub const kAudioCodecPropertyBitRateForVBR: c_int = 1986163298;
pub const kAudioCodecPropertyDelayMode: c_int = 1684893540;
pub const kAudioCodecPropertyAdjustLocalQuality: c_int = 1584488812;
pub const kAudioCodecPropertyDynamicRangeControlMode: c_int = 1835299427;
pub const kAudioCodecPropertyAdjustCompressionProfile: c_int = 1584427631;
pub const kAudioCodecPropertyProgramTargetLevelConstant: c_int = 1886678115;
pub const kAudioCodecPropertyAdjustTargetLevelConstant: c_int = 1584688227;
pub const kAudioCodecPropertyProgramTargetLevel: c_int = 1886418028;
pub const kAudioCodecPropertyAdjustTargetLevel: c_int = 1584428140;
const enum_unnamed_125 = c_uint;
pub const kAudioCodecQuality_Max: c_int = 127;
pub const kAudioCodecQuality_High: c_int = 96;
pub const kAudioCodecQuality_Medium: c_int = 64;
pub const kAudioCodecQuality_Low: c_int = 32;
pub const kAudioCodecQuality_Min: c_int = 0;
const enum_unnamed_126 = c_uint;
pub const kAudioCodecPrimeMethod_Pre: c_int = 0;
pub const kAudioCodecPrimeMethod_Normal: c_int = 1;
pub const kAudioCodecPrimeMethod_None: c_int = 2;
const enum_unnamed_127 = c_uint;
pub const kAudioCodecBitRateControlMode_Constant: c_int = 0;
pub const kAudioCodecBitRateControlMode_LongTermAverage: c_int = 1;
pub const kAudioCodecBitRateControlMode_VariableConstrained: c_int = 2;
pub const kAudioCodecBitRateControlMode_Variable: c_int = 3;
const enum_unnamed_128 = c_uint;
pub const kAudioCodecDelayMode_Compatibility: c_int = 0;
pub const kAudioCodecDelayMode_Minimum: c_int = 1;
pub const kAudioCodecDelayMode_Optimal: c_int = 2;
const enum_unnamed_129 = c_uint;
pub const kProgramTargetLevel_None: c_int = 0;
pub const kProgramTargetLevel_Minus31dB: c_int = 1;
pub const kProgramTargetLevel_Minus23dB: c_int = 2;
pub const kProgramTargetLevel_Minus20dB: c_int = 3;
const enum_unnamed_130 = c_uint;
pub const kDynamicRangeControlMode_None: c_int = 0;
pub const kDynamicRangeControlMode_Light: c_int = 1;
pub const kDynamicRangeControlMode_Heavy: c_int = 2;
const enum_unnamed_131 = c_uint;
pub const kDynamicRangeCompressionProfile_None: c_int = 0;
pub const kDynamicRangeCompressionProfile_LateNight: c_int = 1;
pub const kDynamicRangeCompressionProfile_NoisyEnvironment: c_int = 2;
pub const kDynamicRangeCompressionProfile_LimitedPlaybackRange: c_int = 3;
pub const kDynamicRangeCompressionProfile_GeneralCompression: c_int = 6;
const enum_unnamed_132 = c_uint;
pub const struct_AudioCodecPrimeInfo = extern struct {
    leadingFrames: UInt32 = @import("std").mem.zeroes(UInt32),
    trailingFrames: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioCodecPrimeInfo = struct_AudioCodecPrimeInfo;
pub const AudioSettingsFlags = UInt32;
pub const kAudioSettingsFlags_ExpertParameter: c_int = 1;
pub const kAudioSettingsFlags_InvisibleParameter: c_int = 2;
pub const kAudioSettingsFlags_MetaParameter: c_int = 4;
pub const kAudioSettingsFlags_UserInterfaceParameter: c_int = 8;
const enum_unnamed_133 = c_uint;
pub const kAudioCodecProduceOutputPacketFailure: c_int = 1;
pub const kAudioCodecProduceOutputPacketSuccess: c_int = 2;
pub const kAudioCodecProduceOutputPacketSuccessHasMore: c_int = 3;
pub const kAudioCodecProduceOutputPacketNeedsMoreInputData: c_int = 4;
pub const kAudioCodecProduceOutputPacketAtEOF: c_int = 5;
pub const kAudioCodecProduceOutputPacketSuccessConcealed: c_int = 6;
const enum_unnamed_134 = c_uint;
pub const kAudioCodecGetPropertyInfoSelect: c_int = 1;
pub const kAudioCodecGetPropertySelect: c_int = 2;
pub const kAudioCodecSetPropertySelect: c_int = 3;
pub const kAudioCodecInitializeSelect: c_int = 4;
pub const kAudioCodecUninitializeSelect: c_int = 5;
pub const kAudioCodecAppendInputDataSelect: c_int = 6;
pub const kAudioCodecProduceOutputDataSelect: c_int = 7;
pub const kAudioCodecResetSelect: c_int = 8;
pub const kAudioCodecAppendInputBufferListSelect: c_int = 9;
pub const kAudioCodecProduceOutputBufferListSelect: c_int = 10;
const enum_unnamed_135 = c_uint;
pub const kAudioCodecNoError: c_int = 0;
pub const kAudioCodecUnspecifiedError: c_int = 2003329396;
pub const kAudioCodecUnknownPropertyError: c_int = 2003332927;
pub const kAudioCodecBadPropertySizeError: c_int = 561211770;
pub const kAudioCodecIllegalOperationError: c_int = 1852797029;
pub const kAudioCodecUnsupportedFormatError: c_int = 560226676;
pub const kAudioCodecStateError: c_int = 561214580;
pub const kAudioCodecNotEnoughBufferSpaceError: c_int = 560100710;
pub const kAudioCodecBadDataError: c_int = 1650549857;
const enum_unnamed_136 = c_uint;
pub extern fn AudioCodecGetPropertyInfo(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioCodecGetProperty(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*anyopaque) OSStatus;
pub extern fn AudioCodecSetProperty(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const anyopaque) OSStatus;
pub extern fn AudioCodecInitialize(inCodec: AudioCodec, inInputFormat: [*c]const AudioStreamBasicDescription, inOutputFormat: [*c]const AudioStreamBasicDescription, inMagicCookie: ?*const anyopaque, inMagicCookieByteSize: UInt32) OSStatus;
pub extern fn AudioCodecUninitialize(inCodec: AudioCodec) OSStatus;
pub extern fn AudioCodecAppendInputData(inCodec: AudioCodec, inInputData: ?*const anyopaque, ioInputDataByteSize: [*c]UInt32, ioNumberPackets: [*c]UInt32, inPacketDescription: [*c]const AudioStreamPacketDescription) OSStatus;
pub extern fn AudioCodecProduceOutputPackets(inCodec: AudioCodec, outOutputData: ?*anyopaque, ioOutputDataByteSize: [*c]UInt32, ioNumberPackets: [*c]UInt32, outPacketDescription: [*c]AudioStreamPacketDescription, outStatus: [*c]UInt32) OSStatus;
pub extern fn AudioCodecAppendInputBufferList(inCodec: AudioCodec, inBufferList: [*c]const AudioBufferList, ioNumberPackets: [*c]UInt32, inPacketDescription: [*c]const AudioStreamPacketDescription, outBytesConsumed: [*c]UInt32) OSStatus;
pub extern fn AudioCodecProduceOutputBufferList(inCodec: AudioCodec, ioBufferList: [*c]AudioBufferList, ioNumberPackets: [*c]UInt32, outPacketDescription: [*c]AudioStreamPacketDescription, outStatus: [*c]UInt32) OSStatus;
pub extern fn AudioCodecReset(inCodec: AudioCodec) OSStatus;
pub const AudioCodecGetPropertyInfoProc = ?*const fn (?*anyopaque, AudioCodecPropertyID, [*c]UInt32, [*c]Boolean) callconv(.c) OSStatus;
pub const AudioCodecGetPropertyProc = ?*const fn (?*anyopaque, AudioCodecPropertyID, [*c]UInt32, ?*anyopaque) callconv(.c) OSStatus;
pub const AudioCodecSetPropertyProc = ?*const fn (?*anyopaque, AudioCodecPropertyID, UInt32, ?*const anyopaque) callconv(.c) OSStatus;
pub const AudioCodecInitializeProc = ?*const fn (?*anyopaque, [*c]const AudioStreamBasicDescription, [*c]const AudioStreamBasicDescription, ?*const anyopaque, UInt32) callconv(.c) OSStatus;
pub const AudioCodecUninitializeProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const AudioCodecAppendInputDataProc = ?*const fn (?*anyopaque, ?*const anyopaque, [*c]UInt32, [*c]UInt32, [*c]const AudioStreamPacketDescription) callconv(.c) OSStatus;
pub const AudioCodecProduceOutputPacketsProc = ?*const fn (?*anyopaque, ?*anyopaque, [*c]UInt32, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]UInt32) callconv(.c) OSStatus;
pub const AudioCodecResetProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const AudioCodecAppendInputBufferListProc = ?*const fn (?*anyopaque, [*c]const AudioBufferList, [*c]UInt32, [*c]const AudioStreamPacketDescription, [*c]UInt32) callconv(.c) OSStatus;
pub const AudioCodecProduceOutputBufferListProc = ?*const fn (?*anyopaque, [*c]AudioBufferList, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]UInt32) callconv(.c) OSStatus;
pub const kAudioCodecPropertyMinimumDelayMode: c_int = 1835296108;
const enum_unnamed_137 = c_uint;
pub const kAudioCodecPropertyNameCFString: c_int = 1819173229;
pub const kAudioCodecPropertyManufacturerCFString: c_int = 1819107691;
pub const kAudioCodecPropertyFormatCFString: c_int = 1818652530;
const enum_unnamed_138 = c_uint;
pub const kAudioCodecPropertyRequiresPacketDescription: c_int = 1885432676;
pub const kAudioCodecPropertyAvailableBitRates: c_int = 1651668003;
pub const kAudioCodecExtendFrequencies: c_int = 1633903974;
pub const kAudioCodecUseRecommendedSampleRate: c_int = 1970434930;
pub const kAudioCodecOutputPrecedence: c_int = 1869639794;
pub const kAudioCodecBitRateFormat: c_int = 1633903206;
pub const kAudioCodecDoesSampleRateConversion: c_int = 1819112035;
pub const kAudioCodecInputFormatsForOutputFormat: c_int = 1768305775;
pub const kAudioCodecOutputFormatsForInputFormat: c_int = 1868969065;
pub const kAudioCodecPropertyInputChannelLayout: c_int = 1768123424;
pub const kAudioCodecPropertyOutputChannelLayout: c_int = 1868786720;
pub const kAudioCodecPropertyAvailableInputChannelLayouts: c_int = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayouts: c_int = 1634689900;
pub const kAudioCodecPropertyZeroFramesPadded: c_int = 1885430832;
const enum_unnamed_139 = c_uint;
pub const kAudioCodecBitRateFormat_CBR: c_int = 0;
pub const kAudioCodecBitRateFormat_ABR: c_int = 1;
pub const kAudioCodecBitRateFormat_VBR: c_int = 2;
const enum_unnamed_140 = c_uint;
pub const kAudioCodecOutputPrecedenceNone: c_int = 0;
pub const kAudioCodecOutputPrecedenceBitRate: c_int = 1;
pub const kAudioCodecOutputPrecedenceSampleRate: c_int = 2;
const enum_unnamed_141 = c_uint;
pub const MagicCookieInfo = struct_AudioCodecMagicCookieInfo;
pub const kHintBasic: c_int = 0;
pub const kHintAdvanced: c_int = 1;
pub const kHintHidden: c_int = 2;
const enum_unnamed_142 = c_uint;
pub extern fn AudioOutputUnitStart(ci: AudioUnit) OSStatus;
pub extern fn AudioOutputUnitStop(ci: AudioUnit) OSStatus;
pub const kAudioOutputUnitRange: c_int = 512;
pub const kAudioOutputUnitStartSelect: c_int = 513;
pub const kAudioOutputUnitStopSelect: c_int = 514;
const enum_unnamed_143 = c_uint;
pub const AudioOutputUnitStartProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const AudioOutputUnitStopProc = ?*const fn (?*anyopaque) callconv(.c) OSStatus;
pub const kAUGroupParameterID_Volume: c_int = 7;
pub const kAUGroupParameterID_Sustain: c_int = 64;
pub const kAUGroupParameterID_Sostenuto: c_int = 66;
pub const kAUGroupParameterID_AllNotesOff: c_int = 123;
pub const kAUGroupParameterID_ModWheel: c_int = 1;
pub const kAUGroupParameterID_PitchBend: c_int = 224;
pub const kAUGroupParameterID_AllSoundOff: c_int = 120;
pub const kAUGroupParameterID_ResetAllControllers: c_int = 121;
pub const kAUGroupParameterID_Pan: c_int = 10;
pub const kAUGroupParameterID_Foot: c_int = 4;
pub const kAUGroupParameterID_ChannelPressure: c_int = 208;
pub const kAUGroupParameterID_KeyPressure: c_int = 160;
pub const kAUGroupParameterID_Expression: c_int = 11;
pub const kAUGroupParameterID_DataEntry: c_int = 6;
pub const kAUGroupParameterID_Volume_LSB: c_int = 39;
pub const kAUGroupParameterID_ModWheel_LSB: c_int = 33;
pub const kAUGroupParameterID_Pan_LSB: c_int = 42;
pub const kAUGroupParameterID_Foot_LSB: c_int = 36;
pub const kAUGroupParameterID_Expression_LSB: c_int = 43;
pub const kAUGroupParameterID_DataEntry_LSB: c_int = 38;
pub const kAUGroupParameterID_KeyPressure_FirstKey: c_int = 256;
pub const kAUGroupParameterID_KeyPressure_LastKey: c_int = 383;
const enum_unnamed_144 = c_uint;
pub const kPannerParam_Gain: c_int = 0;
pub const kPannerParam_Azimuth: c_int = 1;
pub const kPannerParam_Elevation: c_int = 2;
pub const kPannerParam_Distance: c_int = 3;
pub const kPannerParam_CoordScale: c_int = 4;
pub const kPannerParam_RefDistance: c_int = 5;
const enum_unnamed_145 = c_uint;
pub const kSpatialMixerParam_Azimuth: c_int = 0;
pub const kSpatialMixerParam_Elevation: c_int = 1;
pub const kSpatialMixerParam_Distance: c_int = 2;
pub const kSpatialMixerParam_Gain: c_int = 3;
pub const kSpatialMixerParam_PlaybackRate: c_int = 4;
pub const kSpatialMixerParam_Enable: c_int = 5;
pub const kSpatialMixerParam_MinGain: c_int = 6;
pub const kSpatialMixerParam_MaxGain: c_int = 7;
pub const kSpatialMixerParam_ReverbBlend: c_int = 8;
pub const kSpatialMixerParam_GlobalReverbGain: c_int = 9;
pub const kSpatialMixerParam_OcclusionAttenuation: c_int = 10;
pub const kSpatialMixerParam_ObstructionAttenuation: c_int = 11;
pub const kSpatialMixerParam_HeadYaw: c_int = 19;
pub const kSpatialMixerParam_HeadPitch: c_int = 20;
pub const kSpatialMixerParam_HeadRoll: c_int = 21;
const enum_unnamed_146 = c_uint;
pub const kReverbParam_FilterFrequency: c_int = 14;
pub const kReverbParam_FilterBandwidth: c_int = 15;
pub const kReverbParam_FilterGain: c_int = 16;
pub const kReverbParam_FilterType: c_int = 17;
pub const kReverbParam_FilterEnable: c_int = 18;
const enum_unnamed_147 = c_uint;
pub const k3DMixerParam_Azimuth: c_int = 0;
pub const k3DMixerParam_Elevation: c_int = 1;
pub const k3DMixerParam_Distance: c_int = 2;
pub const k3DMixerParam_Gain: c_int = 3;
pub const k3DMixerParam_PlaybackRate: c_int = 4;
pub const k3DMixerParam_BusEnable: c_int = 20;
pub const k3DMixerParam_MinGainInDecibels: c_int = 21;
pub const k3DMixerParam_MaxGainInDecibels: c_int = 22;
pub const k3DMixerParam_DryWetReverbBlend: c_int = 23;
pub const k3DMixerParam_GlobalReverbGainInDecibels: c_int = 24;
pub const k3DMixerParam_OcclusionAttenuationInDecibels: c_int = 25;
pub const k3DMixerParam_ObstructionAttenuationInDecibels: c_int = 26;
pub const k3DMixerParam_ReverbBlend: c_int = 5;
pub const k3DMixerParam_GlobalReverbGain: c_int = 6;
pub const k3DMixerParam_OcclusionAttenuation: c_int = 7;
pub const k3DMixerParam_ObstructionAttenuation: c_int = 8;
pub const k3DMixerParam_MinGain: c_int = 9;
pub const k3DMixerParam_MaxGain: c_int = 10;
pub const k3DMixerParam_PreAveragePower: c_int = 1000;
pub const k3DMixerParam_PrePeakHoldLevel: c_int = 2000;
pub const k3DMixerParam_PostAveragePower: c_int = 3000;
pub const k3DMixerParam_PostPeakHoldLevel: c_int = 4000;
const enum_unnamed_148 = c_uint;
pub const kMultiChannelMixerParam_Volume: c_int = 0;
pub const kMultiChannelMixerParam_Enable: c_int = 1;
pub const kMultiChannelMixerParam_Pan: c_int = 2;
pub const kMultiChannelMixerParam_PreAveragePower: c_int = 1000;
pub const kMultiChannelMixerParam_PrePeakHoldLevel: c_int = 2000;
pub const kMultiChannelMixerParam_PostAveragePower: c_int = 3000;
pub const kMultiChannelMixerParam_PostPeakHoldLevel: c_int = 4000;
const enum_unnamed_149 = c_uint;
pub const kMatrixMixerParam_Volume: c_int = 0;
pub const kMatrixMixerParam_Enable: c_int = 1;
pub const kMatrixMixerParam_PreAveragePower: c_int = 1000;
pub const kMatrixMixerParam_PrePeakHoldLevel: c_int = 2000;
pub const kMatrixMixerParam_PostAveragePower: c_int = 3000;
pub const kMatrixMixerParam_PostPeakHoldLevel: c_int = 4000;
pub const kMatrixMixerParam_PreAveragePowerLinear: c_int = 5000;
pub const kMatrixMixerParam_PrePeakHoldLevelLinear: c_int = 6000;
pub const kMatrixMixerParam_PostAveragePowerLinear: c_int = 7000;
pub const kMatrixMixerParam_PostPeakHoldLevelLinear: c_int = 8000;
const enum_unnamed_150 = c_uint;
pub const kHALOutputParam_Volume: c_int = 14;
const enum_unnamed_151 = c_uint;
pub const kTimePitchParam_Rate: c_int = 0;
pub const kTimePitchParam_Pitch: c_int = 1;
pub const kTimePitchParam_EffectBlend: c_int = 2;
const enum_unnamed_152 = c_uint;
pub const kNewTimePitchParam_Rate: c_int = 0;
pub const kNewTimePitchParam_Pitch: c_int = 1;
pub const kNewTimePitchParam_Smoothness: c_int = 4;
pub const kNewTimePitchParam_Overlap: c_int = 4;
pub const kNewTimePitchParam_EnableSpectralCoherence: c_int = 6;
pub const kNewTimePitchParam_EnablePeakLocking: c_int = 6;
pub const kNewTimePitchParam_EnableTransientPreservation: c_int = 7;
const enum_unnamed_153 = c_uint;
pub const kAUSamplerParam_Gain: c_int = 900;
pub const kAUSamplerParam_CoarseTuning: c_int = 901;
pub const kAUSamplerParam_FineTuning: c_int = 902;
pub const kAUSamplerParam_Pan: c_int = 903;
const enum_unnamed_154 = c_uint;
pub const kBandpassParam_CenterFrequency: c_int = 0;
pub const kBandpassParam_Bandwidth: c_int = 1;
const enum_unnamed_155 = c_uint;
pub const kHipassParam_CutoffFrequency: c_int = 0;
pub const kHipassParam_Resonance: c_int = 1;
const enum_unnamed_156 = c_uint;
pub const kLowPassParam_CutoffFrequency: c_int = 0;
pub const kLowPassParam_Resonance: c_int = 1;
const enum_unnamed_157 = c_uint;
pub const kHighShelfParam_CutOffFrequency: c_int = 0;
pub const kHighShelfParam_Gain: c_int = 1;
const enum_unnamed_158 = c_uint;
pub const kAULowShelfParam_CutoffFrequency: c_int = 0;
pub const kAULowShelfParam_Gain: c_int = 1;
const enum_unnamed_159 = c_uint;
pub const kParametricEQParam_CenterFreq: c_int = 0;
pub const kParametricEQParam_Q: c_int = 1;
pub const kParametricEQParam_Gain: c_int = 2;
const enum_unnamed_160 = c_uint;
pub const kLimiterParam_AttackTime: c_int = 0;
pub const kLimiterParam_DecayTime: c_int = 1;
pub const kLimiterParam_PreGain: c_int = 2;
const enum_unnamed_161 = c_uint;
pub const kDynamicsProcessorParam_Threshold: c_int = 0;
pub const kDynamicsProcessorParam_HeadRoom: c_int = 1;
pub const kDynamicsProcessorParam_ExpansionRatio: c_int = 2;
pub const kDynamicsProcessorParam_ExpansionThreshold: c_int = 3;
pub const kDynamicsProcessorParam_AttackTime: c_int = 4;
pub const kDynamicsProcessorParam_ReleaseTime: c_int = 5;
pub const kDynamicsProcessorParam_OverallGain: c_int = 6;
pub const kDynamicsProcessorParam_MasterGain: c_int = 6;
pub const kDynamicsProcessorParam_CompressionAmount: c_int = 1000;
pub const kDynamicsProcessorParam_InputAmplitude: c_int = 2000;
pub const kDynamicsProcessorParam_OutputAmplitude: c_int = 3000;
const enum_unnamed_162 = c_uint;
pub const kVarispeedParam_PlaybackRate: c_int = 0;
pub const kVarispeedParam_PlaybackCents: c_int = 1;
const enum_unnamed_163 = c_uint;
pub const kDistortionParam_Delay: c_int = 0;
pub const kDistortionParam_Decay: c_int = 1;
pub const kDistortionParam_DelayMix: c_int = 2;
pub const kDistortionParam_Decimation: c_int = 3;
pub const kDistortionParam_Rounding: c_int = 4;
pub const kDistortionParam_DecimationMix: c_int = 5;
pub const kDistortionParam_LinearTerm: c_int = 6;
pub const kDistortionParam_SquaredTerm: c_int = 7;
pub const kDistortionParam_CubicTerm: c_int = 8;
pub const kDistortionParam_PolynomialMix: c_int = 9;
pub const kDistortionParam_RingModFreq1: c_int = 10;
pub const kDistortionParam_RingModFreq2: c_int = 11;
pub const kDistortionParam_RingModBalance: c_int = 12;
pub const kDistortionParam_RingModMix: c_int = 13;
pub const kDistortionParam_SoftClipGain: c_int = 14;
pub const kDistortionParam_FinalMix: c_int = 15;
const enum_unnamed_164 = c_uint;
pub const kDelayParam_WetDryMix: c_int = 0;
pub const kDelayParam_DelayTime: c_int = 1;
pub const kDelayParam_Feedback: c_int = 2;
pub const kDelayParam_LopassCutoff: c_int = 3;
const enum_unnamed_165 = c_uint;
pub const kSampleDelayParam_DelayFrames: c_int = 0;
const enum_unnamed_166 = c_uint;
pub const kAUNBandEQParam_GlobalGain: c_int = 0;
pub const kAUNBandEQParam_BypassBand: c_int = 1000;
pub const kAUNBandEQParam_FilterType: c_int = 2000;
pub const kAUNBandEQParam_Frequency: c_int = 3000;
pub const kAUNBandEQParam_Gain: c_int = 4000;
pub const kAUNBandEQParam_Bandwidth: c_int = 5000;
const enum_unnamed_167 = c_uint;
pub const kAUNBandEQFilterType_Parametric: c_int = 0;
pub const kAUNBandEQFilterType_2ndOrderButterworthLowPass: c_int = 1;
pub const kAUNBandEQFilterType_2ndOrderButterworthHighPass: c_int = 2;
pub const kAUNBandEQFilterType_ResonantLowPass: c_int = 3;
pub const kAUNBandEQFilterType_ResonantHighPass: c_int = 4;
pub const kAUNBandEQFilterType_BandPass: c_int = 5;
pub const kAUNBandEQFilterType_BandStop: c_int = 6;
pub const kAUNBandEQFilterType_LowShelf: c_int = 7;
pub const kAUNBandEQFilterType_HighShelf: c_int = 8;
pub const kAUNBandEQFilterType_ResonantLowShelf: c_int = 9;
pub const kAUNBandEQFilterType_ResonantHighShelf: c_int = 10;
pub const kNumAUNBandEQFilterTypes: c_int = 11;
const enum_unnamed_168 = c_uint;
pub const kRoundTripAACParam_Format: c_int = 0;
pub const kRoundTripAACParam_EncodingStrategy: c_int = 1;
pub const kRoundTripAACParam_RateOrQuality: c_int = 2;
pub const kRoundTripAACParam_BitRate: c_int = 1;
pub const kRoundTripAACParam_Quality: c_int = 2;
pub const kRoundTripAACParam_CompressedFormatSampleRate: c_int = 3;
const enum_unnamed_169 = c_uint;
pub const kAUSoundIsolationParam_WetDryMixPercent: c_int = 0;
pub const kAUSoundIsolationParam_SoundToIsolate: c_int = 1;
const enum_unnamed_170 = c_uint;
pub const kAUSoundIsolationSoundType_HighQualityVoice: c_int = 0;
pub const kAUSoundIsolationSoundType_Voice: c_int = 1;
const enum_unnamed_171 = c_uint;
pub const kGraphicEQParam_NumberOfBands: c_int = 10000;
const enum_unnamed_172 = c_uint;
pub const kReverbParam_DryWetMix: c_int = 0;
pub const kReverbParam_SmallLargeMix: c_int = 1;
pub const kReverbParam_SmallSize: c_int = 2;
pub const kReverbParam_LargeSize: c_int = 3;
pub const kReverbParam_PreDelay: c_int = 4;
pub const kReverbParam_LargeDelay: c_int = 5;
pub const kReverbParam_SmallDensity: c_int = 6;
pub const kReverbParam_LargeDensity: c_int = 7;
pub const kReverbParam_LargeDelayRange: c_int = 8;
pub const kReverbParam_SmallBrightness: c_int = 9;
pub const kReverbParam_LargeBrightness: c_int = 10;
pub const kReverbParam_SmallDelayRange: c_int = 11;
pub const kReverbParam_ModulationRate: c_int = 12;
pub const kReverbParam_ModulationDepth: c_int = 13;
const enum_unnamed_173 = c_uint;
pub const kMultibandCompressorParam_Pregain: c_int = 0;
pub const kMultibandCompressorParam_Postgain: c_int = 1;
pub const kMultibandCompressorParam_Crossover1: c_int = 2;
pub const kMultibandCompressorParam_Crossover2: c_int = 3;
pub const kMultibandCompressorParam_Crossover3: c_int = 4;
pub const kMultibandCompressorParam_Threshold1: c_int = 5;
pub const kMultibandCompressorParam_Threshold2: c_int = 6;
pub const kMultibandCompressorParam_Threshold3: c_int = 7;
pub const kMultibandCompressorParam_Threshold4: c_int = 8;
pub const kMultibandCompressorParam_Headroom1: c_int = 9;
pub const kMultibandCompressorParam_Headroom2: c_int = 10;
pub const kMultibandCompressorParam_Headroom3: c_int = 11;
pub const kMultibandCompressorParam_Headroom4: c_int = 12;
pub const kMultibandCompressorParam_AttackTime: c_int = 13;
pub const kMultibandCompressorParam_ReleaseTime: c_int = 14;
pub const kMultibandCompressorParam_EQ1: c_int = 15;
pub const kMultibandCompressorParam_EQ2: c_int = 16;
pub const kMultibandCompressorParam_EQ3: c_int = 17;
pub const kMultibandCompressorParam_EQ4: c_int = 18;
pub const kMultibandCompressorParam_CompressionAmount1: c_int = 1000;
pub const kMultibandCompressorParam_CompressionAmount2: c_int = 2000;
pub const kMultibandCompressorParam_CompressionAmount3: c_int = 3000;
pub const kMultibandCompressorParam_CompressionAmount4: c_int = 4000;
pub const kMultibandCompressorParam_InputAmplitude1: c_int = 5000;
pub const kMultibandCompressorParam_InputAmplitude2: c_int = 6000;
pub const kMultibandCompressorParam_InputAmplitude3: c_int = 7000;
pub const kMultibandCompressorParam_InputAmplitude4: c_int = 8000;
pub const kMultibandCompressorParam_OutputAmplitude1: c_int = 9000;
pub const kMultibandCompressorParam_OutputAmplitude2: c_int = 10000;
pub const kMultibandCompressorParam_OutputAmplitude3: c_int = 11000;
pub const kMultibandCompressorParam_OutputAmplitude4: c_int = 12000;
const enum_unnamed_174 = c_uint;
pub const kMultibandFilter_LowFilterType: c_int = 0;
pub const kMultibandFilter_LowFrequency: c_int = 1;
pub const kMultibandFilter_LowGain: c_int = 2;
pub const kMultibandFilter_CenterFreq1: c_int = 3;
pub const kMultibandFilter_CenterGain1: c_int = 4;
pub const kMultibandFilter_Bandwidth1: c_int = 5;
pub const kMultibandFilter_CenterFreq2: c_int = 6;
pub const kMultibandFilter_CenterGain2: c_int = 7;
pub const kMultibandFilter_Bandwidth2: c_int = 8;
pub const kMultibandFilter_CenterFreq3: c_int = 9;
pub const kMultibandFilter_CenterGain3: c_int = 10;
pub const kMultibandFilter_Bandwidth3: c_int = 11;
pub const kMultibandFilter_HighFilterType: c_int = 12;
pub const kMultibandFilter_HighFrequency: c_int = 13;
pub const kMultibandFilter_HighGain: c_int = 14;
const enum_unnamed_175 = c_uint;
pub const kRogerBeepParam_InGateThreshold: c_int = 0;
pub const kRogerBeepParam_InGateThresholdTime: c_int = 1;
pub const kRogerBeepParam_OutGateThreshold: c_int = 2;
pub const kRogerBeepParam_OutGateThresholdTime: c_int = 3;
pub const kRogerBeepParam_Sensitivity: c_int = 4;
pub const kRogerBeepParam_RogerType: c_int = 5;
pub const kRogerBeepParam_RogerGain: c_int = 6;
const enum_unnamed_176 = c_uint;
pub const kStereoMixerParam_Volume: c_int = 0;
pub const kStereoMixerParam_Pan: c_int = 1;
pub const kStereoMixerParam_PreAveragePower: c_int = 1000;
pub const kStereoMixerParam_PrePeakHoldLevel: c_int = 2000;
pub const kStereoMixerParam_PostAveragePower: c_int = 3000;
pub const kStereoMixerParam_PostPeakHoldLevel: c_int = 4000;
const enum_unnamed_177 = c_uint;
pub const kAUNetReceiveParam_Status: c_int = 0;
pub const kAUNetReceiveParam_NumParameters: c_int = 1;
const enum_unnamed_178 = c_uint;
pub const kAUNetSendParam_Status: c_int = 0;
pub const kAUNetSendParam_NumParameters: c_int = 1;
const enum_unnamed_179 = c_uint;
pub const kAUNetStatus_NotConnected: c_int = 0;
pub const kAUNetStatus_Connected: c_int = 1;
pub const kAUNetStatus_Overflow: c_int = 2;
pub const kAUNetStatus_Underflow: c_int = 3;
pub const kAUNetStatus_Connecting: c_int = 4;
pub const kAUNetStatus_Listening: c_int = 5;
const enum_unnamed_180 = c_uint;
pub const kMusicDeviceParam_Tuning: c_int = 0;
pub const kMusicDeviceParam_Volume: c_int = 1;
pub const kMusicDeviceParam_ReverbVolume: c_int = 2;
const enum_unnamed_181 = c_uint;
pub const kRandomParam_BoundA: c_int = 0;
pub const kRandomParam_BoundB: c_int = 1;
pub const kRandomParam_Curve: c_int = 2;
const enum_unnamed_182 = c_uint;
pub const kReverb2Param_DryWetMix: c_int = 0;
pub const kReverb2Param_Gain: c_int = 1;
pub const kReverb2Param_MinDelayTime: c_int = 2;
pub const kReverb2Param_MaxDelayTime: c_int = 3;
pub const kReverb2Param_DecayTimeAt0Hz: c_int = 4;
pub const kReverb2Param_DecayTimeAtNyquist: c_int = 5;
pub const kReverb2Param_RandomizeReflections: c_int = 6;
const enum_unnamed_183 = c_uint;
pub const kAudioUnitScope_Global: c_int = 0;
pub const kAudioUnitScope_Input: c_int = 1;
pub const kAudioUnitScope_Output: c_int = 2;
pub const kAudioUnitScope_Group: c_int = 3;
pub const kAudioUnitScope_Part: c_int = 4;
pub const kAudioUnitScope_Note: c_int = 5;
pub const kAudioUnitScope_Layer: c_int = 6;
pub const kAudioUnitScope_LayerItem: c_int = 7;
const enum_unnamed_184 = c_uint;
pub const kAudioUnitProperty_ClassInfo: c_int = 0;
pub const kAudioUnitProperty_MakeConnection: c_int = 1;
pub const kAudioUnitProperty_SampleRate: c_int = 2;
pub const kAudioUnitProperty_ParameterList: c_int = 3;
pub const kAudioUnitProperty_ParameterInfo: c_int = 4;
pub const kAudioUnitProperty_CPULoad: c_int = 6;
pub const kAudioUnitProperty_StreamFormat: c_int = 8;
pub const kAudioUnitProperty_ElementCount: c_int = 11;
pub const kAudioUnitProperty_Latency: c_int = 12;
pub const kAudioUnitProperty_SupportedNumChannels: c_int = 13;
pub const kAudioUnitProperty_MaximumFramesPerSlice: c_int = 14;
pub const kAudioUnitProperty_ParameterValueStrings: c_int = 16;
pub const kAudioUnitProperty_AudioChannelLayout: c_int = 19;
pub const kAudioUnitProperty_TailTime: c_int = 20;
pub const kAudioUnitProperty_BypassEffect: c_int = 21;
pub const kAudioUnitProperty_LastRenderError: c_int = 22;
pub const kAudioUnitProperty_SetRenderCallback: c_int = 23;
pub const kAudioUnitProperty_FactoryPresets: c_int = 24;
pub const kAudioUnitProperty_RenderQuality: c_int = 26;
pub const kAudioUnitProperty_HostCallbacks: c_int = 27;
pub const kAudioUnitProperty_InPlaceProcessing: c_int = 29;
pub const kAudioUnitProperty_ElementName: c_int = 30;
pub const kAudioUnitProperty_SupportedChannelLayoutTags: c_int = 32;
pub const kAudioUnitProperty_PresentPreset: c_int = 36;
pub const kAudioUnitProperty_DependentParameters: c_int = 45;
pub const kAudioUnitProperty_InputSamplesInOutput: c_int = 49;
pub const kAudioUnitProperty_ShouldAllocateBuffer: c_int = 51;
pub const kAudioUnitProperty_FrequencyResponse: c_int = 52;
pub const kAudioUnitProperty_ParameterHistoryInfo: c_int = 53;
pub const kAudioUnitProperty_NickName: c_int = 54;
pub const kAudioUnitProperty_OfflineRender: c_int = 37;
pub const kAudioUnitProperty_ParameterIDName: c_int = 34;
pub const kAudioUnitProperty_ParameterStringFromValue: c_int = 33;
pub const kAudioUnitProperty_ParameterClumpName: c_int = 35;
pub const kAudioUnitProperty_ParameterValueFromString: c_int = 38;
pub const kAudioUnitProperty_ContextName: c_int = 25;
pub const kAudioUnitProperty_PresentationLatency: c_int = 40;
pub const kAudioUnitProperty_ClassInfoFromDocument: c_int = 50;
pub const kAudioUnitProperty_RequestViewController: c_int = 56;
pub const kAudioUnitProperty_ParametersForOverview: c_int = 57;
pub const kAudioUnitProperty_SupportsMPE: c_int = 58;
pub const kAudioUnitProperty_RenderContextObserver: c_int = 60;
pub const kAudioUnitProperty_LastRenderSampleTime: c_int = 61;
pub const kAudioUnitProperty_LoadedOutOfProcess: c_int = 62;
pub const kAudioUnitProperty_FastDispatch: c_int = 5;
pub const kAudioUnitProperty_SetExternalBuffer: c_int = 15;
pub const kAudioUnitProperty_GetUIComponentList: c_int = 18;
pub const kAudioUnitProperty_CocoaUI: c_int = 31;
pub const kAudioUnitProperty_IconLocation: c_int = 39;
pub const kAudioUnitProperty_AUHostIdentifier: c_int = 46;
pub const kAudioUnitProperty_MIDIOutputCallbackInfo: c_int = 47;
pub const kAudioUnitProperty_MIDIOutputCallback: c_int = 48;
pub const kAudioUnitProperty_MIDIOutputEventListCallback: c_int = 63;
pub const kAudioUnitProperty_AudioUnitMIDIProtocol: c_int = 64;
pub const kAudioUnitProperty_HostMIDIProtocol: c_int = 65;
pub const kAudioUnitProperty_MIDIOutputBufferSizeHint: c_int = 66;
const enum_unnamed_185 = c_uint;
pub const kAudioUnitProperty_RemoteControlEventListener: c_int = 100;
pub const kAudioUnitProperty_IsInterAppConnected: c_int = 101;
pub const kAudioUnitProperty_PeerURL: c_int = 102;
const enum_unnamed_186 = c_uint;
pub const struct_AudioUnitConnection = extern struct {
    sourceAudioUnit: AudioUnit = @import("std").mem.zeroes(AudioUnit),
    sourceOutputNumber: UInt32 = @import("std").mem.zeroes(UInt32),
    destInputNumber: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioUnitConnection = struct_AudioUnitConnection;
pub const struct_AUChannelInfo = extern struct {
    inChannels: SInt16 = @import("std").mem.zeroes(SInt16),
    outChannels: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const AUChannelInfo = struct_AUChannelInfo;
pub const struct_AudioUnitExternalBuffer = extern struct {
    buffer: [*c]Byte = @import("std").mem.zeroes([*c]Byte),
    size: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioUnitExternalBuffer = struct_AudioUnitExternalBuffer;
pub const struct_AURenderCallbackStruct = extern struct {
    inputProc: AURenderCallback = @import("std").mem.zeroes(AURenderCallback),
    inputProcRefCon: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const AURenderCallbackStruct = struct_AURenderCallbackStruct;
pub const struct_AUPreset = extern struct {
    presetNumber: SInt32 = @import("std").mem.zeroes(SInt32),
    presetName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const AUPreset = struct_AUPreset;
pub const kRenderQuality_Max: c_int = 127;
pub const kRenderQuality_High: c_int = 96;
pub const kRenderQuality_Medium: c_int = 64;
pub const kRenderQuality_Low: c_int = 32;
pub const kRenderQuality_Min: c_int = 0;
const enum_unnamed_187 = c_uint;
pub const kNumberOfResponseFrequencies: c_int = 1024;
const enum_unnamed_188 = c_uint;
pub const struct_AudioUnitFrequencyResponseBin = extern struct {
    mFrequency: Float64 = @import("std").mem.zeroes(Float64),
    mMagnitude: Float64 = @import("std").mem.zeroes(Float64),
};
pub const AudioUnitFrequencyResponseBin = struct_AudioUnitFrequencyResponseBin;
pub const HostCallback_GetBeatAndTempo = ?*const fn (?*anyopaque, [*c]Float64, [*c]Float64) callconv(.c) OSStatus;
pub const HostCallback_GetMusicalTimeLocation = ?*const fn (?*anyopaque, [*c]UInt32, [*c]Float32, [*c]UInt32, [*c]Float64) callconv(.c) OSStatus;
pub const HostCallback_GetTransportState = ?*const fn (?*anyopaque, [*c]Boolean, [*c]Boolean, [*c]Float64, [*c]Boolean, [*c]Float64, [*c]Float64) callconv(.c) OSStatus;
pub const HostCallback_GetTransportState2 = ?*const fn (?*anyopaque, [*c]Boolean, [*c]Boolean, [*c]Boolean, [*c]Float64, [*c]Boolean, [*c]Float64, [*c]Float64) callconv(.c) OSStatus;
pub const struct_HostCallbackInfo = extern struct {
    hostUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    beatAndTempoProc: HostCallback_GetBeatAndTempo = @import("std").mem.zeroes(HostCallback_GetBeatAndTempo),
    musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation = @import("std").mem.zeroes(HostCallback_GetMusicalTimeLocation),
    transportStateProc: HostCallback_GetTransportState = @import("std").mem.zeroes(HostCallback_GetTransportState),
    transportStateProc2: HostCallback_GetTransportState2 = @import("std").mem.zeroes(HostCallback_GetTransportState2),
};
pub const HostCallbackInfo = struct_HostCallbackInfo;
pub const struct_AUDependentParameter = extern struct {
    mScope: AudioUnitScope = @import("std").mem.zeroes(AudioUnitScope),
    mParameterID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
};
pub const AUDependentParameter = struct_AUDependentParameter;
pub const struct_AudioUnitCocoaViewInfo = extern struct {
    mCocoaAUViewBundleLocation: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    mCocoaAUViewClass: [1]CFStringRef = @import("std").mem.zeroes([1]CFStringRef),
};
pub const AudioUnitCocoaViewInfo = struct_AudioUnitCocoaViewInfo;
pub const struct_AUHostVersionIdentifier = extern struct {
    hostName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    hostVersion: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AUHostVersionIdentifier = struct_AUHostVersionIdentifier;
pub const struct_MIDIPacketList = opaque {};
pub const AUMIDIOutputCallback = ?*const fn (?*anyopaque, [*c]const AudioTimeStamp, UInt32, ?*const struct_MIDIPacketList) callconv(.c) OSStatus;
pub const struct_AUMIDIOutputCallbackStruct = extern struct {
    midiOutputCallback: AUMIDIOutputCallback = @import("std").mem.zeroes(AUMIDIOutputCallback),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const AUMIDIOutputCallbackStruct = struct_AUMIDIOutputCallbackStruct;
pub const struct_AUInputSamplesInOutputCallbackStruct = extern struct {
    inputToOutputCallback: AUInputSamplesInOutputCallback = @import("std").mem.zeroes(AUInputSamplesInOutputCallback),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const AUInputSamplesInOutputCallbackStruct = struct_AUInputSamplesInOutputCallbackStruct;
pub const struct_AudioUnitParameterHistoryInfo = extern struct {
    updatesPerSecond: Float32 = @import("std").mem.zeroes(Float32),
    historyDurationInSeconds: Float32 = @import("std").mem.zeroes(Float32),
};
pub const AudioUnitParameterHistoryInfo = struct_AudioUnitParameterHistoryInfo;
pub const struct_AudioUnitRenderContext = extern struct {
    workgroup: os_workgroup_t = @import("std").mem.zeroes(os_workgroup_t),
    reserved: [6]u32 = @import("std").mem.zeroes([6]u32),
};
pub const AudioUnitRenderContext = struct_AudioUnitRenderContext;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1401:16: warning: unsupported type: 'BlockPointer'
pub const AURenderContextObserver = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1401:16
pub const struct_MIDIEventList = opaque {};
pub const AUEventSampleTime = i64;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1428:21: warning: unsupported type: 'BlockPointer'
pub const AUMIDIEventListBlock = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1428:21
pub const AudioUnitParameterUnit = UInt32;
pub const kAudioUnitParameterUnit_Generic: c_int = 0;
pub const kAudioUnitParameterUnit_Indexed: c_int = 1;
pub const kAudioUnitParameterUnit_Boolean: c_int = 2;
pub const kAudioUnitParameterUnit_Percent: c_int = 3;
pub const kAudioUnitParameterUnit_Seconds: c_int = 4;
pub const kAudioUnitParameterUnit_SampleFrames: c_int = 5;
pub const kAudioUnitParameterUnit_Phase: c_int = 6;
pub const kAudioUnitParameterUnit_Rate: c_int = 7;
pub const kAudioUnitParameterUnit_Hertz: c_int = 8;
pub const kAudioUnitParameterUnit_Cents: c_int = 9;
pub const kAudioUnitParameterUnit_RelativeSemiTones: c_int = 10;
pub const kAudioUnitParameterUnit_MIDINoteNumber: c_int = 11;
pub const kAudioUnitParameterUnit_MIDIController: c_int = 12;
pub const kAudioUnitParameterUnit_Decibels: c_int = 13;
pub const kAudioUnitParameterUnit_LinearGain: c_int = 14;
pub const kAudioUnitParameterUnit_Degrees: c_int = 15;
pub const kAudioUnitParameterUnit_EqualPowerCrossfade: c_int = 16;
pub const kAudioUnitParameterUnit_MixerFaderCurve1: c_int = 17;
pub const kAudioUnitParameterUnit_Pan: c_int = 18;
pub const kAudioUnitParameterUnit_Meters: c_int = 19;
pub const kAudioUnitParameterUnit_AbsoluteCents: c_int = 20;
pub const kAudioUnitParameterUnit_Octaves: c_int = 21;
pub const kAudioUnitParameterUnit_BPM: c_int = 22;
pub const kAudioUnitParameterUnit_Beats: c_int = 23;
pub const kAudioUnitParameterUnit_Milliseconds: c_int = 24;
pub const kAudioUnitParameterUnit_Ratio: c_int = 25;
pub const kAudioUnitParameterUnit_CustomUnit: c_int = 26;
pub const kAudioUnitParameterUnit_MIDI2Controller: c_int = 27;
const enum_unnamed_189 = c_uint;
pub const AudioUnitParameterOptions = UInt32;
pub const kAudioUnitParameterFlag_CFNameRelease: c_uint = 16;
pub const kAudioUnitParameterFlag_OmitFromPresets: c_uint = 8192;
pub const kAudioUnitParameterFlag_PlotHistory: c_uint = 16384;
pub const kAudioUnitParameterFlag_MeterReadOnly: c_uint = 32768;
pub const kAudioUnitParameterFlag_DisplayMask: c_uint = 4653056;
pub const kAudioUnitParameterFlag_DisplaySquareRoot: c_uint = 65536;
pub const kAudioUnitParameterFlag_DisplaySquared: c_uint = 131072;
pub const kAudioUnitParameterFlag_DisplayCubed: c_uint = 196608;
pub const kAudioUnitParameterFlag_DisplayCubeRoot: c_uint = 262144;
pub const kAudioUnitParameterFlag_DisplayExponential: c_uint = 327680;
pub const kAudioUnitParameterFlag_HasClump: c_uint = 1048576;
pub const kAudioUnitParameterFlag_ValuesHaveStrings: c_uint = 2097152;
pub const kAudioUnitParameterFlag_DisplayLogarithmic: c_uint = 4194304;
pub const kAudioUnitParameterFlag_IsHighResolution: c_uint = 8388608;
pub const kAudioUnitParameterFlag_NonRealTime: c_uint = 16777216;
pub const kAudioUnitParameterFlag_CanRamp: c_uint = 33554432;
pub const kAudioUnitParameterFlag_ExpertMode: c_uint = 67108864;
pub const kAudioUnitParameterFlag_HasCFNameString: c_uint = 134217728;
pub const kAudioUnitParameterFlag_IsGlobalMeta: c_uint = 268435456;
pub const kAudioUnitParameterFlag_IsElementMeta: c_uint = 536870912;
pub const kAudioUnitParameterFlag_IsReadable: c_uint = 1073741824;
pub const kAudioUnitParameterFlag_IsWritable: c_uint = 2147483648;
const enum_unnamed_190 = c_uint;
pub const struct_AudioUnitParameterInfo = extern struct {
    name: [52]u8 = @import("std").mem.zeroes([52]u8),
    unitName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    clumpID: UInt32 = @import("std").mem.zeroes(UInt32),
    cfNameString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    unit: AudioUnitParameterUnit = @import("std").mem.zeroes(AudioUnitParameterUnit),
    minValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    maxValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    defaultValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    flags: AudioUnitParameterOptions = @import("std").mem.zeroes(AudioUnitParameterOptions),
};
pub const AudioUnitParameterInfo = struct_AudioUnitParameterInfo;
pub const kAudioUnitClumpID_System: c_int = 0;
const enum_unnamed_191 = c_uint;
pub inline fn GetAudioUnitParameterDisplayType(arg_flags: AudioUnitParameterOptions) AudioUnitParameterOptions {
    var flags = arg_flags;
    _ = &flags;
    return flags & kAudioUnitParameterFlag_DisplayMask;
}
pub inline fn SetAudioUnitParameterDisplayType(arg_flags: AudioUnitParameterOptions, arg_displayType: AudioUnitParameterOptions) AudioUnitParameterOptions {
    var flags = arg_flags;
    _ = &flags;
    var displayType = arg_displayType;
    _ = &displayType;
    return (flags & ~kAudioUnitParameterFlag_DisplayMask) | displayType;
}
pub const kAudioUnitParameterName_Full: c_int = -1;
const enum_unnamed_192 = c_int;
pub const struct_AudioUnitParameterNameInfo = extern struct {
    inID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    inDesiredLength: SInt32 = @import("std").mem.zeroes(SInt32),
    outName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const AudioUnitParameterNameInfo = struct_AudioUnitParameterNameInfo;
pub const AudioUnitParameterIDName = struct_AudioUnitParameterNameInfo;
pub const struct_AudioUnitParameterStringFromValue = extern struct {
    inParamID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    inValue: [*c]const AudioUnitParameterValue = @import("std").mem.zeroes([*c]const AudioUnitParameterValue),
    outString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const AudioUnitParameterStringFromValue = struct_AudioUnitParameterStringFromValue;
pub const struct_AudioUnitParameterValueFromString = extern struct {
    inParamID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    inString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    outValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
};
pub const AudioUnitParameterValueFromString = struct_AudioUnitParameterValueFromString;
pub const AudioUnitRemoteControlEvent = UInt32;
pub const kAudioUnitRemoteControlEvent_TogglePlayPause: c_int = 1;
pub const kAudioUnitRemoteControlEvent_ToggleRecord: c_int = 2;
pub const kAudioUnitRemoteControlEvent_Rewind: c_int = 3;
const enum_unnamed_193 = c_uint;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1768:16: warning: unsupported type: 'BlockPointer'
pub const AudioUnitRemoteControlEventListener = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:1768:16
pub const kAudioUnitProperty_AllParameterMIDIMappings: c_int = 41;
pub const kAudioUnitProperty_AddParameterMIDIMapping: c_int = 42;
pub const kAudioUnitProperty_RemoveParameterMIDIMapping: c_int = 43;
pub const kAudioUnitProperty_HotMapParameterMIDIMapping: c_int = 44;
const enum_unnamed_194 = c_uint;
pub const AUParameterMIDIMappingFlags = UInt32;
pub const kAUParameterMIDIMapping_AnyChannelFlag: c_int = 1;
pub const kAUParameterMIDIMapping_AnyNoteFlag: c_int = 2;
pub const kAUParameterMIDIMapping_SubRange: c_int = 4;
pub const kAUParameterMIDIMapping_Toggle: c_int = 8;
pub const kAUParameterMIDIMapping_Bipolar: c_int = 16;
pub const kAUParameterMIDIMapping_Bipolar_On: c_int = 32;
const enum_unnamed_195 = c_uint;
pub const struct_AUParameterMIDIMapping = extern struct {
    mScope: AudioUnitScope = @import("std").mem.zeroes(AudioUnitScope),
    mElement: AudioUnitElement = @import("std").mem.zeroes(AudioUnitElement),
    mParameterID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    mFlags: AUParameterMIDIMappingFlags = @import("std").mem.zeroes(AUParameterMIDIMappingFlags),
    mSubRangeMin: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    mSubRangeMax: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
    mStatus: UInt8 = @import("std").mem.zeroes(UInt8),
    mData1: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved1: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved2: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved3: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AUParameterMIDIMapping = struct_AUParameterMIDIMapping;
pub const kMusicDeviceProperty_MIDIXMLNames: c_int = 1006;
pub const kMusicDeviceProperty_PartGroup: c_int = 1010;
pub const kMusicDeviceProperty_DualSchedulingMode: c_int = 1013;
pub const kMusicDeviceProperty_SupportsStartStopNote: c_int = 1014;
const enum_unnamed_196 = c_uint;
pub const kMusicDeviceSampleFrameMask_SampleOffset: c_int = 16777215;
pub const kMusicDeviceSampleFrameMask_IsScheduled: c_int = 16777216;
const enum_unnamed_197 = c_uint;
pub const kAudioUnitOfflineProperty_InputSize: c_int = 3020;
pub const kAudioUnitOfflineProperty_OutputSize: c_int = 3021;
pub const kAudioUnitOfflineProperty_StartOffset: c_int = 3022;
pub const kAudioUnitOfflineProperty_PreflightRequirements: c_int = 3023;
pub const kAudioUnitOfflineProperty_PreflightName: c_int = 3024;
const enum_unnamed_198 = c_uint;
pub const kOfflinePreflight_NotRequired: c_int = 0;
pub const kOfflinePreflight_Optional: c_int = 1;
pub const kOfflinePreflight_Required: c_int = 2;
const enum_unnamed_199 = c_uint;
pub const kAudioUnitProperty_DistanceAttenuationData: c_int = 3600;
const enum_unnamed_200 = c_uint;
const struct_unnamed_201 = extern struct {
    inDistance: Float32 = @import("std").mem.zeroes(Float32),
    outGain: Float32 = @import("std").mem.zeroes(Float32),
};
pub const struct_AUDistanceAttenuationData = extern struct {
    inNumberOfPairs: UInt32 = @import("std").mem.zeroes(UInt32),
    pairs: [1]struct_unnamed_201 = @import("std").mem.zeroes([1]struct_unnamed_201),
};
pub const AUDistanceAttenuationData = struct_AUDistanceAttenuationData;
pub const kAudioUnitMigrateProperty_FromPlugin: c_int = 4000;
pub const kAudioUnitMigrateProperty_OldAutomation: c_int = 4001;
const enum_unnamed_202 = c_uint;
pub const kOtherPluginFormat_Undefined: c_int = 0;
pub const kOtherPluginFormat_kMAS: c_int = 1;
pub const kOtherPluginFormat_kVST: c_int = 2;
pub const kOtherPluginFormat_AU: c_int = 3;
const enum_unnamed_203 = c_uint;
pub const struct_AudioUnitOtherPluginDesc = extern struct {
    format: UInt32 = @import("std").mem.zeroes(UInt32),
    plugin: AudioClassDescription = @import("std").mem.zeroes(AudioClassDescription),
};
pub const AudioUnitOtherPluginDesc = struct_AudioUnitOtherPluginDesc;
pub const struct_AudioUnitParameterValueTranslation = extern struct {
    otherDesc: AudioUnitOtherPluginDesc = @import("std").mem.zeroes(AudioUnitOtherPluginDesc),
    otherParamID: UInt32 = @import("std").mem.zeroes(UInt32),
    otherValue: Float32 = @import("std").mem.zeroes(Float32),
    auParamID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    auValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
};
pub const AudioUnitParameterValueTranslation = struct_AudioUnitParameterValueTranslation;
pub const struct_AudioUnitPresetMAS_SettingData = extern struct {
    isStockSetting: UInt32 = @import("std").mem.zeroes(UInt32),
    settingID: UInt32 = @import("std").mem.zeroes(UInt32),
    dataLen: UInt32 = @import("std").mem.zeroes(UInt32),
    data: [1]UInt8 = @import("std").mem.zeroes([1]UInt8),
};
pub const AudioUnitPresetMAS_SettingData = struct_AudioUnitPresetMAS_SettingData;
pub const struct_AudioUnitPresetMAS_Settings = extern struct {
    manufacturerID: UInt32 = @import("std").mem.zeroes(UInt32),
    effectID: UInt32 = @import("std").mem.zeroes(UInt32),
    variantID: UInt32 = @import("std").mem.zeroes(UInt32),
    settingsVersion: UInt32 = @import("std").mem.zeroes(UInt32),
    numberOfSettings: UInt32 = @import("std").mem.zeroes(UInt32),
    settings: [1]AudioUnitPresetMAS_SettingData = @import("std").mem.zeroes([1]AudioUnitPresetMAS_SettingData),
};
pub const AudioUnitPresetMAS_Settings = struct_AudioUnitPresetMAS_Settings;
pub const kAudioUnitProperty_SampleRateConverterComplexity: c_int = 3014;
const enum_unnamed_204 = c_uint;
pub const kAudioUnitSampleRateConverterComplexity_Linear: c_int = 1818848869;
pub const kAudioUnitSampleRateConverterComplexity_Normal: c_int = 1852797549;
pub const kAudioUnitSampleRateConverterComplexity_Mastering: c_int = 1650553971;
const enum_unnamed_205 = c_uint;
pub const kAudioOutputUnitProperty_CurrentDevice: c_int = 2000;
pub const kAudioOutputUnitProperty_IsRunning: c_int = 2001;
pub const kAudioOutputUnitProperty_ChannelMap: c_int = 2002;
pub const kAudioOutputUnitProperty_EnableIO: c_int = 2003;
pub const kAudioOutputUnitProperty_StartTime: c_int = 2004;
pub const kAudioOutputUnitProperty_SetInputCallback: c_int = 2005;
pub const kAudioOutputUnitProperty_HasIO: c_int = 2006;
pub const kAudioOutputUnitProperty_StartTimestampsAtZero: c_int = 2007;
pub const kAudioOutputUnitProperty_OSWorkgroup: c_int = 2015;
const enum_unnamed_206 = c_uint;
pub const kAudioOutputUnitProperty_MIDICallbacks: c_int = 2010;
pub const kAudioOutputUnitProperty_HostReceivesRemoteControlEvents: c_int = 2011;
pub const kAudioOutputUnitProperty_RemoteControlToHost: c_int = 2012;
pub const kAudioOutputUnitProperty_HostTransportState: c_int = 2013;
pub const kAudioOutputUnitProperty_NodeComponentDescription: c_int = 2014;
const enum_unnamed_207 = c_uint;
pub const struct_AudioOutputUnitMIDICallbacks = extern struct {
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MIDIEventProc: ?*const fn (?*anyopaque, UInt32, UInt32, UInt32, UInt32) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, UInt32, UInt32, UInt32, UInt32) callconv(.c) void),
    MIDISysExProc: ?*const fn (?*anyopaque, [*c]const UInt8, UInt32) callconv(.c) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const UInt8, UInt32) callconv(.c) void),
};
pub const AudioOutputUnitMIDICallbacks = struct_AudioOutputUnitMIDICallbacks;
pub const struct_AudioOutputUnitStartAtTimeParams = extern struct {
    mTimestamp: AudioTimeStamp = @import("std").mem.zeroes(AudioTimeStamp),
    mFlags: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const AudioOutputUnitStartAtTimeParams = struct_AudioOutputUnitStartAtTimeParams;
pub const kAUVoiceIOProperty_BypassVoiceProcessing: c_int = 2100;
pub const kAUVoiceIOProperty_VoiceProcessingEnableAGC: c_int = 2101;
pub const kAUVoiceIOProperty_MuteOutput: c_int = 2104;
const enum_unnamed_208 = c_uint;
pub const AUVoiceIOSpeechActivityEvent = UInt32;
pub const kAUVoiceIOSpeechActivityHasStarted: c_int = 0;
pub const kAUVoiceIOSpeechActivityHasEnded: c_int = 1;
const enum_unnamed_209 = c_uint;
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:2653:16: warning: unsupported type: 'BlockPointer'
pub const AUVoiceIOMutedSpeechActivityEventListener = @compileError("unable to resolve typedef child type");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitProperties.h:2653:16
pub const kAUVoiceIOProperty_MutedSpeechActivityEventListener: c_int = 2106;
const enum_unnamed_210 = c_uint;
pub const AUVoiceIOOtherAudioDuckingLevel = UInt32;
pub const kAUVoiceIOOtherAudioDuckingLevelDefault: c_int = 0;
pub const kAUVoiceIOOtherAudioDuckingLevelMin: c_int = 10;
pub const kAUVoiceIOOtherAudioDuckingLevelMid: c_int = 20;
pub const kAUVoiceIOOtherAudioDuckingLevelMax: c_int = 30;
const enum_unnamed_211 = c_uint;
pub const struct_AUVoiceIOOtherAudioDuckingConfiguration = extern struct {
    mEnableAdvancedDucking: Boolean = @import("std").mem.zeroes(Boolean),
    mDuckingLevel: AUVoiceIOOtherAudioDuckingLevel = @import("std").mem.zeroes(AUVoiceIOOtherAudioDuckingLevel),
};
pub const AUVoiceIOOtherAudioDuckingConfiguration = struct_AUVoiceIOOtherAudioDuckingConfiguration;
pub const kAUVoiceIOProperty_OtherAudioDuckingConfiguration: c_int = 2108;
const enum_unnamed_212 = c_uint;
pub const kAUVoiceIOProperty_VoiceProcessingQuality: c_int = 2103;
const enum_unnamed_213 = c_uint;
pub const kAUNBandEQProperty_NumberOfBands: c_int = 2200;
pub const kAUNBandEQProperty_MaxNumberOfBands: c_int = 2201;
pub const kAUNBandEQProperty_BiquadCoefficients: c_int = 2203;
const enum_unnamed_214 = c_uint;
pub const kAUVoiceIOErr_UnexpectedNumberOfInputChannels: c_int = -66784;
const enum_unnamed_215 = c_int;
pub const kAudioUnitProperty_MeteringMode: c_int = 3007;
pub const kAudioUnitProperty_MatrixLevels: c_int = 3006;
pub const kAudioUnitProperty_MatrixDimensions: c_int = 3009;
pub const kAudioUnitProperty_MeterClipping: c_int = 3011;
pub const kAudioUnitProperty_InputAnchorTimeStamp: c_int = 3016;
const enum_unnamed_216 = c_uint;
pub const struct_AudioUnitMeterClipping = extern struct {
    peakValueSinceLastCall: Float32 = @import("std").mem.zeroes(Float32),
    sawInfinity: Boolean = @import("std").mem.zeroes(Boolean),
    sawNotANumber: Boolean = @import("std").mem.zeroes(Boolean),
};
pub const AudioUnitMeterClipping = struct_AudioUnitMeterClipping;
pub const kAudioUnitProperty_ReverbRoomType: c_int = 10;
pub const kAudioUnitProperty_UsesInternalReverb: c_int = 1005;
pub const kAudioUnitProperty_SpatializationAlgorithm: c_int = 3000;
pub const kAudioUnitProperty_SpatialMixerRenderingFlags: c_int = 3003;
pub const kAudioUnitProperty_SpatialMixerSourceMode: c_int = 3005;
pub const kAudioUnitProperty_SpatialMixerDistanceParams: c_int = 3010;
pub const kAudioUnitProperty_SpatialMixerAttenuationCurve: c_int = 3013;
pub const kAudioUnitProperty_SpatialMixerOutputType: c_int = 3100;
pub const kAudioUnitProperty_SpatialMixerPointSourceInHeadMode: c_int = 3103;
pub const kAudioUnitProperty_SpatialMixerEnableHeadTracking: c_int = 3111;
pub const kAudioUnitProperty_SpatialMixerPersonalizedHRTFMode: c_int = 3113;
pub const kAudioUnitProperty_SpatialMixerAnyInputIsUsingPersonalizedHRTF: c_int = 3116;
const enum_unnamed_217 = c_uint;
pub const AUSpatializationAlgorithm = UInt32;
pub const kSpatializationAlgorithm_EqualPowerPanning: c_int = 0;
pub const kSpatializationAlgorithm_SphericalHead: c_int = 1;
pub const kSpatializationAlgorithm_HRTF: c_int = 2;
pub const kSpatializationAlgorithm_SoundField: c_int = 3;
pub const kSpatializationAlgorithm_VectorBasedPanning: c_int = 4;
pub const kSpatializationAlgorithm_StereoPassThrough: c_int = 5;
pub const kSpatializationAlgorithm_HRTFHQ: c_int = 6;
pub const kSpatializationAlgorithm_UseOutputType: c_int = 7;
const enum_unnamed_218 = c_uint;
pub const AUSpatialMixerSourceMode = UInt32;
pub const kSpatialMixerSourceMode_SpatializeIfMono: c_int = 0;
pub const kSpatialMixerSourceMode_Bypass: c_int = 1;
pub const kSpatialMixerSourceMode_PointSource: c_int = 2;
pub const kSpatialMixerSourceMode_AmbienceBed: c_int = 3;
const enum_unnamed_219 = c_uint;
pub const AUReverbRoomType = UInt32;
pub const kReverbRoomType_SmallRoom: c_int = 0;
pub const kReverbRoomType_MediumRoom: c_int = 1;
pub const kReverbRoomType_LargeRoom: c_int = 2;
pub const kReverbRoomType_MediumHall: c_int = 3;
pub const kReverbRoomType_LargeHall: c_int = 4;
pub const kReverbRoomType_Plate: c_int = 5;
pub const kReverbRoomType_MediumChamber: c_int = 6;
pub const kReverbRoomType_LargeChamber: c_int = 7;
pub const kReverbRoomType_Cathedral: c_int = 8;
pub const kReverbRoomType_LargeRoom2: c_int = 9;
pub const kReverbRoomType_MediumHall2: c_int = 10;
pub const kReverbRoomType_MediumHall3: c_int = 11;
pub const kReverbRoomType_LargeHall2: c_int = 12;
const enum_unnamed_220 = c_uint;
pub const AUSpatialMixerAttenuationCurve = UInt32;
pub const kSpatialMixerAttenuationCurve_Power: c_int = 0;
pub const kSpatialMixerAttenuationCurve_Exponential: c_int = 1;
pub const kSpatialMixerAttenuationCurve_Inverse: c_int = 2;
pub const kSpatialMixerAttenuationCurve_Linear: c_int = 3;
const enum_unnamed_221 = c_uint;
pub const struct_MixerDistanceParams = extern struct {
    mReferenceDistance: Float32 = @import("std").mem.zeroes(Float32),
    mMaxDistance: Float32 = @import("std").mem.zeroes(Float32),
    mMaxAttenuation: Float32 = @import("std").mem.zeroes(Float32),
};
pub const MixerDistanceParams = struct_MixerDistanceParams;
pub const AUSpatialMixerRenderingFlags = UInt32;
pub const kSpatialMixerRenderingFlags_InterAuralDelay: c_int = 1;
pub const kSpatialMixerRenderingFlags_DistanceAttenuation: c_int = 4;
const enum_unnamed_222 = c_uint;
pub const AUSpatialMixerPersonalizedHRTFMode = UInt32;
pub const kSpatialMixerPersonalizedHRTFMode_Off: c_int = 0;
pub const kSpatialMixerPersonalizedHRTFMode_On: c_int = 1;
pub const kSpatialMixerPersonalizedHRTFMode_Auto: c_int = 2;
const enum_unnamed_223 = c_uint;
pub const AUSpatialMixerOutputType = UInt32;
pub const kSpatialMixerOutputType_Headphones: c_int = 1;
pub const kSpatialMixerOutputType_BuiltInSpeakers: c_int = 2;
pub const kSpatialMixerOutputType_ExternalSpeakers: c_int = 3;
const enum_unnamed_224 = c_uint;
pub const AUSpatialMixerPointSourceInHeadMode = UInt32;
pub const kSpatialMixerPointSourceInHeadMode_Mono: c_int = 0;
pub const kSpatialMixerPointSourceInHeadMode_Bypass: c_int = 1;
const enum_unnamed_225 = c_uint;
pub const kAudioUnitProperty_3DMixerDistanceParams: c_int = 3010;
pub const kAudioUnitProperty_3DMixerAttenuationCurve: c_int = 3013;
pub const kAudioUnitProperty_DopplerShift: c_int = 3002;
pub const kAudioUnitProperty_3DMixerRenderingFlags: c_int = 3003;
pub const kAudioUnitProperty_3DMixerDistanceAtten: c_int = 3004;
pub const kAudioUnitProperty_ReverbPreset: c_int = 3012;
const enum_unnamed_226 = c_uint;
pub const AU3DMixerRenderingFlags = UInt32;
pub const k3DMixerRenderingFlags_InterAuralDelay: c_int = 1;
pub const k3DMixerRenderingFlags_DopplerShift: c_int = 2;
pub const k3DMixerRenderingFlags_DistanceAttenuation: c_int = 4;
pub const k3DMixerRenderingFlags_DistanceFilter: c_int = 8;
pub const k3DMixerRenderingFlags_DistanceDiffusion: c_int = 16;
pub const k3DMixerRenderingFlags_LinearDistanceAttenuation: c_int = 32;
pub const k3DMixerRenderingFlags_ConstantReverbBlend: c_int = 64;
const enum_unnamed_227 = c_uint;
pub const AU3DMixerAttenuationCurve = UInt32;
pub const k3DMixerAttenuationCurve_Power: c_int = 0;
pub const k3DMixerAttenuationCurve_Exponential: c_int = 1;
pub const k3DMixerAttenuationCurve_Inverse: c_int = 2;
pub const k3DMixerAttenuationCurve_Linear: c_int = 3;
const enum_unnamed_228 = c_uint;
pub const kAudioUnitProperty_ScheduleAudioSlice: c_int = 3300;
pub const kAudioUnitProperty_ScheduleStartTimeStamp: c_int = 3301;
pub const kAudioUnitProperty_CurrentPlayTime: c_int = 3302;
const enum_unnamed_229 = c_uint;
pub const AUScheduledAudioSliceFlags = UInt32;
pub const kScheduledAudioSliceFlag_Complete: c_int = 1;
pub const kScheduledAudioSliceFlag_BeganToRender: c_int = 2;
pub const kScheduledAudioSliceFlag_BeganToRenderLate: c_int = 4;
pub const kScheduledAudioSliceFlag_Loop: c_int = 8;
pub const kScheduledAudioSliceFlag_Interrupt: c_int = 16;
pub const kScheduledAudioSliceFlag_InterruptAtLoop: c_int = 32;
const enum_unnamed_230 = c_uint;
pub const ScheduledAudioSlice = struct_ScheduledAudioSlice;
pub const ScheduledAudioSliceCompletionProc = ?*const fn (?*anyopaque, [*c]ScheduledAudioSlice) callconv(.c) void;
pub const struct_ScheduledAudioSlice = extern struct {
    mTimeStamp: AudioTimeStamp = @import("std").mem.zeroes(AudioTimeStamp),
    mCompletionProc: ScheduledAudioSliceCompletionProc = @import("std").mem.zeroes(ScheduledAudioSliceCompletionProc),
    mCompletionProcUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mFlags: AUScheduledAudioSliceFlags = @import("std").mem.zeroes(AUScheduledAudioSliceFlags),
    mReserved: UInt32 = @import("std").mem.zeroes(UInt32),
    mReserved2: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mNumberFrames: UInt32 = @import("std").mem.zeroes(UInt32),
    mBufferList: [*c]AudioBufferList = @import("std").mem.zeroes([*c]AudioBufferList),
};
pub const kAudioUnitProperty_ScheduledFileIDs: c_int = 3310;
pub const kAudioUnitProperty_ScheduledFileRegion: c_int = 3311;
pub const kAudioUnitProperty_ScheduledFilePrime: c_int = 3312;
pub const kAudioUnitProperty_ScheduledFileBufferSizeFrames: c_int = 3313;
pub const kAudioUnitProperty_ScheduledFileNumberBuffers: c_int = 3314;
const enum_unnamed_231 = c_uint;
pub const ScheduledAudioFileRegion = struct_ScheduledAudioFileRegion;
pub const ScheduledAudioFileRegionCompletionProc = ?*const fn (?*anyopaque, [*c]ScheduledAudioFileRegion, OSStatus) callconv(.c) void;
pub const struct_OpaqueAudioFileID_232 = opaque {};
pub const struct_ScheduledAudioFileRegion = extern struct {
    mTimeStamp: AudioTimeStamp = @import("std").mem.zeroes(AudioTimeStamp),
    mCompletionProc: ScheduledAudioFileRegionCompletionProc = @import("std").mem.zeroes(ScheduledAudioFileRegionCompletionProc),
    mCompletionProcUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mAudioFile: ?*struct_OpaqueAudioFileID_232 = @import("std").mem.zeroes(?*struct_OpaqueAudioFileID_232),
    mLoopCount: UInt32 = @import("std").mem.zeroes(UInt32),
    mStartFrame: SInt64 = @import("std").mem.zeroes(SInt64),
    mFramesToPlay: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const kMusicDeviceProperty_UsesInternalReverb: c_int = 1005;
pub const kMusicDeviceProperty_SoundBankData: c_int = 1008;
pub const kMusicDeviceProperty_StreamFromDisk: c_int = 1011;
pub const kMusicDeviceProperty_SoundBankFSRef: c_int = 1012;
const enum_unnamed_233 = c_uint;
pub const kMusicDeviceProperty_InstrumentName: c_int = 1001;
pub const kMusicDeviceProperty_InstrumentNumber: c_int = 1004;
const enum_unnamed_234 = c_uint;
pub const kMusicDeviceProperty_InstrumentCount: c_int = 1000;
pub const kMusicDeviceProperty_BankName: c_int = 1007;
pub const kMusicDeviceProperty_SoundBankURL: c_int = 1100;
const enum_unnamed_235 = c_uint;
pub const kAUMIDISynthProperty_EnablePreload: c_int = 4119;
const enum_unnamed_236 = c_uint;
pub const kAUSamplerProperty_LoadInstrument: c_int = 4102;
pub const kAUSamplerProperty_LoadAudioFiles: c_int = 4101;
const enum_unnamed_237 = c_uint;
pub const struct_AUSamplerInstrumentData = extern struct {
    fileURL: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    instrumentType: UInt8 = @import("std").mem.zeroes(UInt8),
    bankMSB: UInt8 = @import("std").mem.zeroes(UInt8),
    bankLSB: UInt8 = @import("std").mem.zeroes(UInt8),
    presetID: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub const AUSamplerInstrumentData = struct_AUSamplerInstrumentData;
pub const kInstrumentType_DLSPreset: c_int = 1;
pub const kInstrumentType_SF2Preset: c_int = 1;
pub const kInstrumentType_AUPreset: c_int = 2;
pub const kInstrumentType_Audiofile: c_int = 3;
pub const kInstrumentType_EXS24: c_int = 4;
const enum_unnamed_238 = c_uint;
pub const kAUSampler_DefaultPercussionBankMSB: c_int = 120;
pub const kAUSampler_DefaultMelodicBankMSB: c_int = 121;
pub const kAUSampler_DefaultBankLSB: c_int = 0;
const enum_unnamed_239 = c_uint;
pub const kAudioUnitProperty_DeferredRendererPullSize: c_int = 3320;
pub const kAudioUnitProperty_DeferredRendererExtraLatency: c_int = 3321;
pub const kAudioUnitProperty_DeferredRendererWaitFrames: c_int = 3322;
const enum_unnamed_240 = c_uint;
pub const kAUNetReceiveProperty_Hostname: c_int = 3511;
pub const kAUNetReceiveProperty_Password: c_int = 3512;
const enum_unnamed_241 = c_uint;
pub const kAUNetSendProperty_PortNum: c_int = 3513;
pub const kAUNetSendProperty_TransmissionFormat: c_int = 3514;
pub const kAUNetSendProperty_TransmissionFormatIndex: c_int = 3515;
pub const kAUNetSendProperty_ServiceName: c_int = 3516;
pub const kAUNetSendProperty_Disconnect: c_int = 3517;
pub const kAUNetSendProperty_Password: c_int = 3518;
const enum_unnamed_242 = c_uint;
pub const kAUNetSendPresetFormat_PCMFloat32: c_int = 0;
pub const kAUNetSendPresetFormat_PCMInt24: c_int = 1;
pub const kAUNetSendPresetFormat_PCMInt16: c_int = 2;
pub const kAUNetSendPresetFormat_Lossless24: c_int = 3;
pub const kAUNetSendPresetFormat_Lossless16: c_int = 4;
pub const kAUNetSendPresetFormat_ULaw: c_int = 5;
pub const kAUNetSendPresetFormat_IMA4: c_int = 6;
pub const kAUNetSendPresetFormat_AAC_128kbpspc: c_int = 7;
pub const kAUNetSendPresetFormat_AAC_96kbpspc: c_int = 8;
pub const kAUNetSendPresetFormat_AAC_80kbpspc: c_int = 9;
pub const kAUNetSendPresetFormat_AAC_64kbpspc: c_int = 10;
pub const kAUNetSendPresetFormat_AAC_48kbpspc: c_int = 11;
pub const kAUNetSendPresetFormat_AAC_40kbpspc: c_int = 12;
pub const kAUNetSendPresetFormat_AAC_32kbpspc: c_int = 13;
pub const kAUNetSendPresetFormat_AAC_LD_64kbpspc: c_int = 14;
pub const kAUNetSendPresetFormat_AAC_LD_48kbpspc: c_int = 15;
pub const kAUNetSendPresetFormat_AAC_LD_40kbpspc: c_int = 16;
pub const kAUNetSendPresetFormat_AAC_LD_32kbpspc: c_int = 17;
pub const kAUNetSendNumPresetFormats: c_int = 18;
const enum_unnamed_243 = c_uint;
pub const struct_AUNumVersion = extern struct {
    nonRelRev: UInt8 = @import("std").mem.zeroes(UInt8),
    stage: UInt8 = @import("std").mem.zeroes(UInt8),
    minorAndBugRev: UInt8 = @import("std").mem.zeroes(UInt8),
    majorRev: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub const AUNumVersion = struct_AUNumVersion;
pub const struct_AUHostIdentifier = extern struct {
    hostName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    hostVersion: AUNumVersion = @import("std").mem.zeroes(AUNumVersion),
};
pub const AUHostIdentifier = struct_AUHostIdentifier;
pub const kAudioUnitParameterFlag_Global: c_int = 1;
pub const kAudioUnitParameterFlag_Input: c_int = 2;
pub const kAudioUnitParameterFlag_Output: c_int = 4;
pub const kAudioUnitParameterFlag_Group: c_int = 8;
const enum_unnamed_244 = c_uint;
pub const kAudioUnitParameterFlag_HasName: c_int = 2097152;
const enum_unnamed_245 = c_uint;
pub const kAudioUnitProperty_SRCAlgorithm: c_int = 9;
pub const kAudioUnitProperty_MIDIControlMapping: c_int = 17;
pub const kAudioUnitProperty_CurrentPreset: c_int = 28;
pub const kAudioUnitProperty_ParameterValueName: c_int = 33;
pub const kAudioUnitProperty_BusCount: c_int = 11;
pub const kAudioOfflineUnitProperty_InputSize: c_int = 3020;
pub const kAudioOfflineUnitProperty_OutputSize: c_int = 3021;
const enum_unnamed_246 = c_uint;
pub const kAudioUnitSRCAlgorithm_Polyphase: c_int = 1886350457;
pub const kAudioUnitSRCAlgorithm_MediumQuality: c_int = 1668510307;
const enum_unnamed_247 = c_uint;
pub const struct_AudioUnitMIDIControlMapping = extern struct {
    midiNRPN: UInt16 = @import("std").mem.zeroes(UInt16),
    midiControl: UInt8 = @import("std").mem.zeroes(UInt8),
    scope: UInt8 = @import("std").mem.zeroes(UInt8),
    element: AudioUnitElement = @import("std").mem.zeroes(AudioUnitElement),
    parameter: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
};
pub const AudioUnitMIDIControlMapping = struct_AudioUnitMIDIControlMapping;
pub const struct_AudioUnitParameterValueName = extern struct {
    inParamID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    inValue: [*c]const Float32 = @import("std").mem.zeroes([*c]const Float32),
    outName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const AudioUnitParameterValueName = struct_AudioUnitParameterValueName;
pub const kMusicDeviceProperty_GroupOutputBus: c_int = 1002;
pub const kMusicDeviceProperty_SoundBankFSSpec: c_int = 1003;
pub const kAudioUnitProperty_PannerMode: c_int = 3008;
const enum_unnamed_248 = c_uint;
pub const kAudioUnitProperty_SpeakerConfiguration: c_int = 3001;
const enum_unnamed_249 = c_uint;
pub const kSpeakerConfiguration_HeadPhones: c_int = 0;
pub const kSpeakerConfiguration_Stereo: c_int = 1;
pub const kSpeakerConfiguration_Quad: c_int = 2;
pub const kSpeakerConfiguration_5_0: c_int = 3;
pub const kSpeakerConfiguration_5_1: c_int = 3;
const enum_unnamed_250 = c_uint;
pub const struct_AUSamplerBankPresetData = extern struct {
    bankURL: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    bankMSB: UInt8 = @import("std").mem.zeroes(UInt8),
    bankLSB: UInt8 = @import("std").mem.zeroes(UInt8),
    presetID: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub const AUSamplerBankPresetData = struct_AUSamplerBankPresetData;
pub const kAUSamplerProperty_LoadPresetFromBank: c_int = 4100;
pub const kAUSamplerProperty_BankAndPreset: c_int = 4100;
const enum_unnamed_251 = c_uint;
pub const MusicDeviceInstrumentID = UInt32;
pub const struct_MusicDeviceStdNoteParams = extern struct {
    argCount: UInt32 = @import("std").mem.zeroes(UInt32),
    mPitch: Float32 = @import("std").mem.zeroes(Float32),
    mVelocity: Float32 = @import("std").mem.zeroes(Float32),
};
pub const MusicDeviceStdNoteParams = struct_MusicDeviceStdNoteParams;
pub const struct_NoteParamsControlValue = extern struct {
    mID: AudioUnitParameterID = @import("std").mem.zeroes(AudioUnitParameterID),
    mValue: AudioUnitParameterValue = @import("std").mem.zeroes(AudioUnitParameterValue),
};
pub const NoteParamsControlValue = struct_NoteParamsControlValue;
pub const struct_MusicDeviceNoteParams = extern struct {
    argCount: UInt32 = @import("std").mem.zeroes(UInt32),
    mPitch: Float32 = @import("std").mem.zeroes(Float32),
    mVelocity: Float32 = @import("std").mem.zeroes(Float32),
    mControls: [1]NoteParamsControlValue = @import("std").mem.zeroes([1]NoteParamsControlValue),
};
pub const MusicDeviceNoteParams = struct_MusicDeviceNoteParams;
pub const kMusicNoteEvent_UseGroupInstrument: c_uint = 4294967295;
pub const kMusicNoteEvent_Unused: c_uint = 4294967295;
const enum_unnamed_252 = c_uint;
pub const MusicDeviceGroupID = UInt32;
pub const NoteInstanceID = UInt32;
pub const MusicDeviceComponent = AudioComponentInstance;
pub const MIDIEventList = struct_MIDIEventList;
pub extern fn MusicDeviceMIDIEvent(inUnit: MusicDeviceComponent, inStatus: UInt32, inData1: UInt32, inData2: UInt32, inOffsetSampleFrame: UInt32) OSStatus;
pub extern fn MusicDeviceSysEx(inUnit: MusicDeviceComponent, inData: [*c]const UInt8, inLength: UInt32) OSStatus;
pub extern fn MusicDeviceMIDIEventList(inUnit: MusicDeviceComponent, inOffsetSampleFrame: UInt32, evtList: ?*const struct_MIDIEventList) OSStatus;
pub extern fn MusicDeviceStartNote(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID, inGroupID: MusicDeviceGroupID, outNoteInstanceID: [*c]NoteInstanceID, inOffsetSampleFrame: UInt32, inParams: [*c]const MusicDeviceNoteParams) OSStatus;
pub extern fn MusicDeviceStopNote(inUnit: MusicDeviceComponent, inGroupID: MusicDeviceGroupID, inNoteInstanceID: NoteInstanceID, inOffsetSampleFrame: UInt32) OSStatus;
pub const kMusicDeviceRange: c_int = 256;
pub const kMusicDeviceMIDIEventSelect: c_int = 257;
pub const kMusicDeviceSysExSelect: c_int = 258;
pub const kMusicDevicePrepareInstrumentSelect: c_int = 259;
pub const kMusicDeviceReleaseInstrumentSelect: c_int = 260;
pub const kMusicDeviceStartNoteSelect: c_int = 261;
pub const kMusicDeviceStopNoteSelect: c_int = 262;
pub const kMusicDeviceMIDIEventListSelect: c_int = 263;
const enum_unnamed_253 = c_uint;
pub const MusicDeviceMIDIEventProc = ?*const fn (?*anyopaque, UInt32, UInt32, UInt32, UInt32) callconv(.c) OSStatus;
pub const MusicDeviceSysExProc = ?*const fn (?*anyopaque, [*c]const UInt8, UInt32) callconv(.c) OSStatus;
pub const MusicDeviceStartNoteProc = ?*const fn (?*anyopaque, MusicDeviceInstrumentID, MusicDeviceGroupID, [*c]NoteInstanceID, UInt32, [*c]const MusicDeviceNoteParams) callconv(.c) OSStatus;
pub const MusicDeviceStopNoteProc = ?*const fn (?*anyopaque, MusicDeviceGroupID, NoteInstanceID, UInt32) callconv(.c) OSStatus;
pub extern fn MusicDevicePrepareInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) OSStatus;
pub extern fn MusicDeviceReleaseInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) OSStatus;
pub var stopped: dispatch_semaphore_t = @import("std").mem.zeroes(dispatch_semaphore_t);
pub var playing: dispatch_semaphore_t = @import("std").mem.zeroes(dispatch_semaphore_t);
pub var done: dispatch_semaphore_t = @import("std").mem.zeroes(dispatch_semaphore_t);
pub var beep_freq: c_int = @import("std").mem.zeroes(c_int);
pub var beep_samples: c_int = @import("std").mem.zeroes(c_int);
pub var counter: c_int = 0;
pub var initialized: c_int = 0;
pub var theta: u8 = 0;
pub fn tone_cb(arg_inRefCon: ?*anyopaque, arg_ioActionFlags: [*c]AudioUnitRenderActionFlags, arg_inTimeStamp: [*c]const AudioTimeStamp, arg_inBusNumber: UInt32, arg_inNumberFrames: UInt32, arg_ioData: [*c]AudioBufferList) callconv(.c) OSStatus {
    var inRefCon = arg_inRefCon;
    _ = &inRefCon;
    var ioActionFlags = arg_ioActionFlags;
    _ = &ioActionFlags;
    var inTimeStamp = arg_inTimeStamp;
    _ = &inTimeStamp;
    var inBusNumber = arg_inBusNumber;
    _ = &inBusNumber;
    var inNumberFrames = arg_inNumberFrames;
    _ = &inNumberFrames;
    var ioData = arg_ioData;
    _ = &ioData;
    var frame: c_uint = undefined;
    _ = &frame;
    var buf: [*c]u8 = @as([*c]u8, @ptrCast(@alignCast(ioData.*.mBuffers[@as(c_uint, @intCast(@as(c_int, 0)))].mData)));
    _ = &buf;
    var i: c_ulong = 0;
    _ = &i;
    {
        i = 0;
        while (i < @as(c_ulong, @bitCast(@as(c_ulong, inNumberFrames)))) : (i +%= 1) {
            while (counter == @as(c_int, 0)) {
                _ = dispatch_semaphore_wait(playing, ~@as(c_ulonglong, 0));
                counter = beep_samples;
            }
            buf[i] = @as(u8, @bitCast(@as(i8, @truncate(if (beep_freq > @as(c_int, 0)) @divTrunc((@as(c_int, 255) * @as(c_int, @bitCast(@as(c_uint, theta)))) * beep_freq, @as(c_int, 8000)) else @as(c_int, 0)))));
            theta +%= 1;
            counter -= 1;
            if (counter == @as(c_int, 0)) {
                _ = dispatch_semaphore_signal(done);
                _ = dispatch_semaphore_signal(stopped);
            }
        }
    }
    return 0;
}
pub export fn beep(arg_freq: c_int, arg_ms: c_int) c_int {
    var freq = arg_freq;
    _ = &freq;
    var ms = arg_ms;
    _ = &ms;
    if (!(initialized != 0)) {
        var output: AudioComponent = undefined;
        _ = &output;
        var unit: AudioUnit = undefined;
        _ = &unit;
        var descr: AudioComponentDescription = undefined;
        _ = &descr;
        var cb: AURenderCallbackStruct = undefined;
        _ = &cb;
        var stream: AudioStreamBasicDescription = undefined;
        _ = &stream;
        initialized = 1;
        stopped = dispatch_semaphore_create(@as(isize, @bitCast(@as(c_long, @as(c_int, 1)))));
        playing = dispatch_semaphore_create(@as(isize, @bitCast(@as(c_long, @as(c_int, 0)))));
        done = dispatch_semaphore_create(@as(isize, @bitCast(@as(c_long, @as(c_int, 0)))));
        _ = blk: {
            _ = blk_1: {
                _ = blk_2: {
                    descr.componentType = @as(OSType, @bitCast(kAudioUnitType_Output));
                    break :blk_2 blk_3: {
                        const tmp = @as(OSType, @bitCast(kAudioUnitSubType_DefaultOutput));
                        descr.componentSubType = tmp;
                        break :blk_3 tmp;
                    };
                };
                break :blk_1 blk_2: {
                    const tmp = @as(OSType, @bitCast(kAudioUnitManufacturer_Apple));
                    descr.componentManufacturer = tmp;
                    break :blk_2 tmp;
                };
            };
            break :blk blk_1: {
                const tmp = &tone_cb;
                cb.inputProc = tmp;
                break :blk_1 tmp;
            };
        };
        stream.mFormatID = @as(AudioFormatID, @bitCast(kAudioFormatLinearPCM));
        stream.mFormatFlags = 0;
        stream.mSampleRate = 8000;
        stream.mBitsPerChannel = 8;
        stream.mChannelsPerFrame = 1;
        stream.mFramesPerPacket = 1;
        stream.mBytesPerFrame = 1;
        stream.mBytesPerPacket = 1;
        output = AudioComponentFindNext(null, &descr);
        _ = AudioComponentInstanceNew(output, &unit);
        _ = AudioUnitSetProperty(unit, @as(AudioUnitPropertyID, @bitCast(kAudioUnitProperty_SetRenderCallback)), @as(AudioUnitScope, @bitCast(kAudioUnitScope_Input)), @as(AudioUnitElement, @bitCast(@as(c_int, 0))), @as(?*const anyopaque, @ptrCast(&cb)), @as(UInt32, @bitCast(@as(c_uint, @truncate(@sizeOf(AURenderCallbackStruct))))));
        _ = AudioUnitSetProperty(unit, @as(AudioUnitPropertyID, @bitCast(kAudioUnitProperty_StreamFormat)), @as(AudioUnitScope, @bitCast(kAudioUnitScope_Input)), @as(AudioUnitElement, @bitCast(@as(c_int, 0))), @as(?*const anyopaque, @ptrCast(&stream)), @as(UInt32, @bitCast(@as(c_uint, @truncate(@sizeOf(AudioStreamBasicDescription))))));
        _ = AudioUnitInitialize(unit);
        _ = AudioOutputUnitStart(unit);
    }
    _ = dispatch_semaphore_wait(stopped, ~@as(c_ulonglong, 0));
    beep_freq = freq;
    beep_samples = ms * @as(c_int, 8);
    _ = dispatch_semaphore_signal(playing);
    _ = dispatch_semaphore_wait(done, ~@as(c_ulonglong, 0));
    return 0;
}
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 20);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 2);
pub const __clang_version__ = "20.1.2 (https://github.com/ziglang/zig-bootstrap 6442c8c9c7fa9dde3439d0d6347c2b4777ed2d60)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 20.1.2 (https://github.com/ziglang/zig-bootstrap 6442c8c9c7fa9dde3439d0d6347c2b4777ed2d60)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __block = @compileError("unable to translate macro: undefined identifier `__blocks__`");
// (no file):42:9
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 1);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):97:9
pub const __INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):104:9
pub const __UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub inline fn __INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub inline fn __INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub inline fn __INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):208:9
pub const __INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub inline fn __UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub inline fn __UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):233:9
pub const __UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):242:9
pub const __UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`");
// (no file):334:9
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`");
// (no file):369:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`");
// (no file):370:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`");
// (no file):371:9
pub const TARGET_OS_WIN32 = @as(c_int, 0);
pub const TARGET_OS_WINDOWS = @as(c_int, 0);
pub const TARGET_OS_LINUX = @as(c_int, 0);
pub const TARGET_OS_UNIX = @as(c_int, 0);
pub const TARGET_OS_MAC = @as(c_int, 1);
pub const TARGET_OS_OSX = @as(c_int, 1);
pub const TARGET_OS_IPHONE = @as(c_int, 0);
pub const TARGET_OS_IOS = @as(c_int, 0);
pub const TARGET_OS_TV = @as(c_int, 0);
pub const TARGET_OS_WATCH = @as(c_int, 0);
pub const TARGET_OS_VISION = @as(c_int, 0);
pub const TARGET_OS_DRIVERKIT = @as(c_int, 0);
pub const TARGET_OS_MACCATALYST = @as(c_int, 0);
pub const TARGET_OS_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_EMBEDDED = @as(c_int, 0);
pub const TARGET_OS_NANO = @as(c_int, 0);
pub const TARGET_IPHONE_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_UIKITFORMAC = @as(c_int, 0);
pub const __AARCH64EL__ = @as(c_int, 1);
pub const __aarch64__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __AARCH64_CMODEL_SMALL__ = @as(c_int, 1);
pub inline fn __ARM_ACLE_VERSION(year: anytype, quarter: anytype, patch: anytype) @TypeOf(((@as(c_int, 100) * year) + (@as(c_int, 10) * quarter)) + patch) {
    _ = &year;
    _ = &quarter;
    _ = &patch;
    return ((@as(c_int, 100) * year) + (@as(c_int, 10) * quarter)) + patch;
}
pub const __ARM_ACLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 202420, .decimal);
pub const __FUNCTION_MULTI_VERSIONING_SUPPORT_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 202430, .decimal);
pub const __ARM_ARCH = @as(c_int, 8);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_64BIT_STATE = @as(c_int, 1);
pub const __ARM_PCS_AAPCS64 = @as(c_int, 1);
pub const __ARM_ARCH_ISA_A64 = @as(c_int, 1);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FEATURE_FMA = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xF);
pub const __ARM_FEATURE_IDIV = @as(c_int, 1);
pub const __ARM_FEATURE_DIV = @as(c_int, 1);
pub const __ARM_FEATURE_NUMERIC_MAXMIN = @as(c_int, 1);
pub const __ARM_FEATURE_DIRECTED_ROUNDING = @as(c_int, 1);
pub const __ARM_ALIGN_MAX_STACK_PWR = @as(c_int, 4);
pub const __ARM_STATE_ZA = @as(c_int, 1);
pub const __ARM_STATE_ZT0 = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xE);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_NEON_SVE_BRIDGE = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_NEON = @as(c_int, 1);
pub const __ARM_NEON_FP = @as(c_int, 0xE);
pub const __ARM_FEATURE_CRC32 = @as(c_int, 1);
pub const __ARM_FEATURE_RCPC = @as(c_int, 1);
pub const __ARM_FEATURE_CRYPTO = @as(c_int, 1);
pub const __ARM_FEATURE_AES = @as(c_int, 1);
pub const __ARM_FEATURE_SHA2 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA3 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA512 = @as(c_int, 1);
pub const __ARM_FEATURE_PAUTH = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_DOTPROD = @as(c_int, 1);
pub const __ARM_FEATURE_ATOMICS = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_FML = @as(c_int, 1);
pub const __ARM_FEATURE_COMPLEX = @as(c_int, 1);
pub const __ARM_FEATURE_JCVT = @as(c_int, 1);
pub const __ARM_FEATURE_QRDMX = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __FP_FAST_FMA = @as(c_int, 1);
pub const __FP_FAST_FMAF = @as(c_int, 1);
pub const __AARCH64_SIMD__ = @as(c_int, 1);
pub const __ARM64_ARCH_8__ = @as(c_int, 1);
pub const __ARM_NEON__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __arm64 = @as(c_int, 1);
pub const __arm64__ = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __weak = @compileError("unable to translate macro: undefined identifier `objc_gc`");
// (no file):452:9
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150401, .decimal);
pub const __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150401, .decimal);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const BEEP_H = "";
pub const AudioUnit_AudioUnit_h = "";
pub const AUDIO_UNIT_VERSION = @as(c_int, 1070);
pub const AudioUnit_AUComponent_h = "";
pub const AudioUnit_AudioComponent_h = "";
pub const __TARGETCONDITIONALS__ = "";
pub const TARGET_OS_RTKIT = @as(c_int, 0);
pub const TARGET_RT_LITTLE_ENDIAN = @as(c_int, 1);
pub const TARGET_RT_BIG_ENDIAN = @as(c_int, 0);
pub const TARGET_RT_64_BIT = @as(c_int, 1);
pub const TARGET_RT_MAC_CFM = @as(c_int, 0);
pub const TARGET_RT_MAC_MACHO = @as(c_int, 1);
pub const TARGET_CPU_ARM64 = @as(c_int, 1);
pub const TARGET_CPU_PPC = @as(c_int, 0);
pub const TARGET_CPU_PPC64 = @as(c_int, 0);
pub const TARGET_CPU_68K = @as(c_int, 0);
pub const TARGET_CPU_X86 = @as(c_int, 0);
pub const TARGET_CPU_X86_64 = @as(c_int, 0);
pub const TARGET_CPU_ARM = @as(c_int, 0);
pub const TARGET_CPU_MIPS = @as(c_int, 0);
pub const TARGET_CPU_SPARC = @as(c_int, 0);
pub const TARGET_CPU_ALPHA = @as(c_int, 0);
pub const TARGET_ABI_USES_IOS_VALUES = !(TARGET_CPU_X86_64 != 0) or ((TARGET_OS_IPHONE != 0) and !(TARGET_OS_MACCATALYST != 0));
pub const __AVAILABILITY__ = "";
pub const __API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACCATALYST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_VISIONOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_KERNELKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITY_VERSIONS__ = "";
pub const __MAC_10_0 = @as(c_int, 1000);
pub const __MAC_10_1 = @as(c_int, 1010);
pub const __MAC_10_2 = @as(c_int, 1020);
pub const __MAC_10_3 = @as(c_int, 1030);
pub const __MAC_10_4 = @as(c_int, 1040);
pub const __MAC_10_5 = @as(c_int, 1050);
pub const __MAC_10_6 = @as(c_int, 1060);
pub const __MAC_10_7 = @as(c_int, 1070);
pub const __MAC_10_8 = @as(c_int, 1080);
pub const __MAC_10_9 = @as(c_int, 1090);
pub const __MAC_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const __MAC_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const __MAC_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const __MAC_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const __MAC_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const __MAC_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const __MAC_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const __MAC_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const __MAC_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const __MAC_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const __MAC_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const __MAC_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const __MAC_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const __MAC_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const __MAC_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const __MAC_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const __MAC_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const __MAC_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const __MAC_10_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101405, .decimal);
pub const __MAC_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const __MAC_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const __MAC_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const __MAC_10_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101504, .decimal);
pub const __MAC_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const __MAC_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __MAC_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __MAC_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __MAC_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __MAC_11_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110500, .decimal);
pub const __MAC_11_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110600, .decimal);
pub const __MAC_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __MAC_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __MAC_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __MAC_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __MAC_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __MAC_12_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120500, .decimal);
pub const __MAC_12_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120600, .decimal);
pub const __MAC_12_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120700, .decimal);
pub const __MAC_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __MAC_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __MAC_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __MAC_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __MAC_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __MAC_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __MAC_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __MAC_13_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130700, .decimal);
pub const __MAC_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __MAC_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __MAC_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __MAC_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __MAC_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140400, .decimal);
pub const __MAC_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __MAC_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __MAC_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __MAC_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __MAC_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __MAC_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __MAC_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __MAC_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __IPHONE_2_0 = @as(c_int, 20000);
pub const __IPHONE_2_1 = @as(c_int, 20100);
pub const __IPHONE_2_2 = @as(c_int, 20200);
pub const __IPHONE_3_0 = @as(c_int, 30000);
pub const __IPHONE_3_1 = @as(c_int, 30100);
pub const __IPHONE_3_2 = @as(c_int, 30200);
pub const __IPHONE_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __IPHONE_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __IPHONE_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __IPHONE_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __IPHONE_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __IPHONE_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __IPHONE_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __IPHONE_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __IPHONE_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __IPHONE_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __IPHONE_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __IPHONE_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __IPHONE_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __IPHONE_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __IPHONE_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __IPHONE_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __IPHONE_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __IPHONE_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __IPHONE_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __IPHONE_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __IPHONE_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __IPHONE_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __IPHONE_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __IPHONE_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __IPHONE_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __IPHONE_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __IPHONE_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __IPHONE_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __IPHONE_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __IPHONE_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __IPHONE_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __IPHONE_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __IPHONE_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __IPHONE_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __IPHONE_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __IPHONE_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __IPHONE_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __IPHONE_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __IPHONE_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __IPHONE_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __IPHONE_13_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130700, .decimal);
pub const __IPHONE_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __IPHONE_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __IPHONE_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __IPHONE_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __IPHONE_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __IPHONE_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140400, .decimal);
pub const __IPHONE_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __IPHONE_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __IPHONE_14_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140800, .decimal);
pub const __IPHONE_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __IPHONE_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __IPHONE_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __IPHONE_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __IPHONE_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __IPHONE_15_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150500, .decimal);
pub const __IPHONE_15_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150600, .decimal);
pub const __IPHONE_15_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150700, .decimal);
pub const __IPHONE_15_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150800, .decimal);
pub const __IPHONE_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __IPHONE_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __IPHONE_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __IPHONE_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __IPHONE_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __IPHONE_16_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160500, .decimal);
pub const __IPHONE_16_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160600, .decimal);
pub const __IPHONE_16_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160700, .decimal);
pub const __IPHONE_17_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170000, .decimal);
pub const __IPHONE_17_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170100, .decimal);
pub const __IPHONE_17_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170200, .decimal);
pub const __IPHONE_17_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170300, .decimal);
pub const __IPHONE_17_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170400, .decimal);
pub const __IPHONE_17_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170500, .decimal);
pub const __IPHONE_17_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170600, .decimal);
pub const __IPHONE_17_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170700, .decimal);
pub const __IPHONE_18_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180000, .decimal);
pub const __IPHONE_18_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180100, .decimal);
pub const __IPHONE_18_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180200, .decimal);
pub const __IPHONE_18_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180300, .decimal);
pub const __IPHONE_18_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180400, .decimal);
pub const __WATCHOS_1_0 = @as(c_int, 10000);
pub const __WATCHOS_2_0 = @as(c_int, 20000);
pub const __WATCHOS_2_1 = @as(c_int, 20100);
pub const __WATCHOS_2_2 = @as(c_int, 20200);
pub const __WATCHOS_3_0 = @as(c_int, 30000);
pub const __WATCHOS_3_1 = @as(c_int, 30100);
pub const __WATCHOS_3_1_1 = @as(c_int, 30101);
pub const __WATCHOS_3_2 = @as(c_int, 30200);
pub const __WATCHOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __WATCHOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __WATCHOS_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __WATCHOS_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __WATCHOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __WATCHOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __WATCHOS_5_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50200, .decimal);
pub const __WATCHOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __WATCHOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __WATCHOS_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __WATCHOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __WATCHOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __WATCHOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __WATCHOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __WATCHOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __WATCHOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __WATCHOS_7_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70500, .decimal);
pub const __WATCHOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __WATCHOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __WATCHOS_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __WATCHOS_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __WATCHOS_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __WATCHOS_8_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80500, .decimal);
pub const __WATCHOS_8_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80600, .decimal);
pub const __WATCHOS_8_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80700, .decimal);
pub const __WATCHOS_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80800, .decimal);
pub const __WATCHOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __WATCHOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __WATCHOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __WATCHOS_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __WATCHOS_9_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90400, .decimal);
pub const __WATCHOS_9_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90500, .decimal);
pub const __WATCHOS_9_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90600, .decimal);
pub const __WATCHOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __WATCHOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __WATCHOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __WATCHOS_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __WATCHOS_10_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100400, .decimal);
pub const __WATCHOS_10_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100500, .decimal);
pub const __WATCHOS_10_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100600, .decimal);
pub const __WATCHOS_10_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100700, .decimal);
pub const __WATCHOS_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __WATCHOS_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __WATCHOS_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __WATCHOS_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __WATCHOS_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __TVOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __TVOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __TVOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __TVOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __TVOS_10_0_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const __TVOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __TVOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __TVOS_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __TVOS_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __TVOS_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __TVOS_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __TVOS_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __TVOS_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __TVOS_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __TVOS_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __TVOS_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __TVOS_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __TVOS_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __TVOS_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __TVOS_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __TVOS_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __TVOS_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __TVOS_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __TVOS_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __TVOS_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __TVOS_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __TVOS_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __TVOS_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __TVOS_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __TVOS_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __TVOS_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __TVOS_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __TVOS_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __TVOS_15_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150500, .decimal);
pub const __TVOS_15_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150600, .decimal);
pub const __TVOS_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __TVOS_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __TVOS_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __TVOS_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __TVOS_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __TVOS_16_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160500, .decimal);
pub const __TVOS_16_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160600, .decimal);
pub const __TVOS_17_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170000, .decimal);
pub const __TVOS_17_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170100, .decimal);
pub const __TVOS_17_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170200, .decimal);
pub const __TVOS_17_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170300, .decimal);
pub const __TVOS_17_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170400, .decimal);
pub const __TVOS_17_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170500, .decimal);
pub const __TVOS_17_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170600, .decimal);
pub const __TVOS_18_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180000, .decimal);
pub const __TVOS_18_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180100, .decimal);
pub const __TVOS_18_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180200, .decimal);
pub const __TVOS_18_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180300, .decimal);
pub const __TVOS_18_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 180400, .decimal);
pub const __BRIDGEOS_2_0 = @as(c_int, 20000);
pub const __BRIDGEOS_3_0 = @as(c_int, 30000);
pub const __BRIDGEOS_3_1 = @as(c_int, 30100);
pub const __BRIDGEOS_3_4 = @as(c_int, 30400);
pub const __BRIDGEOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __BRIDGEOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __BRIDGEOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __BRIDGEOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __BRIDGEOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __BRIDGEOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __BRIDGEOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __BRIDGEOS_6_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60400, .decimal);
pub const __BRIDGEOS_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60500, .decimal);
pub const __BRIDGEOS_6_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60600, .decimal);
pub const __BRIDGEOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __BRIDGEOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __BRIDGEOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __BRIDGEOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __BRIDGEOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __BRIDGEOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __BRIDGEOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __BRIDGEOS_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __BRIDGEOS_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __BRIDGEOS_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __BRIDGEOS_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __BRIDGEOS_8_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80500, .decimal);
pub const __BRIDGEOS_8_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80600, .decimal);
pub const __BRIDGEOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __BRIDGEOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __BRIDGEOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __BRIDGEOS_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __BRIDGEOS_9_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90400, .decimal);
pub const __DRIVERKIT_19_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 190000, .decimal);
pub const __DRIVERKIT_20_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 200000, .decimal);
pub const __DRIVERKIT_21_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 210000, .decimal);
pub const __DRIVERKIT_22_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220000, .decimal);
pub const __DRIVERKIT_22_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220400, .decimal);
pub const __DRIVERKIT_22_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220500, .decimal);
pub const __DRIVERKIT_22_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220600, .decimal);
pub const __DRIVERKIT_23_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230000, .decimal);
pub const __DRIVERKIT_23_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230100, .decimal);
pub const __DRIVERKIT_23_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230200, .decimal);
pub const __DRIVERKIT_23_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230300, .decimal);
pub const __DRIVERKIT_23_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230400, .decimal);
pub const __DRIVERKIT_23_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230500, .decimal);
pub const __DRIVERKIT_23_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230600, .decimal);
pub const __DRIVERKIT_24_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 240000, .decimal);
pub const __DRIVERKIT_24_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 240100, .decimal);
pub const __DRIVERKIT_24_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 240200, .decimal);
pub const __DRIVERKIT_24_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 240300, .decimal);
pub const __DRIVERKIT_24_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 240400, .decimal);
pub const __VISIONOS_1_0 = @as(c_int, 10000);
pub const __VISIONOS_1_1 = @as(c_int, 10100);
pub const __VISIONOS_1_2 = @as(c_int, 10200);
pub const __VISIONOS_1_3 = @as(c_int, 10300);
pub const __VISIONOS_2_0 = @as(c_int, 20000);
pub const __VISIONOS_2_1 = @as(c_int, 20100);
pub const __VISIONOS_2_2 = @as(c_int, 20200);
pub const __VISIONOS_2_3 = @as(c_int, 20300);
pub const __VISIONOS_2_4 = @as(c_int, 20400);
pub const MAC_OS_X_VERSION_10_0 = __MAC_10_0;
pub const MAC_OS_X_VERSION_10_1 = __MAC_10_1;
pub const MAC_OS_X_VERSION_10_2 = __MAC_10_2;
pub const MAC_OS_X_VERSION_10_3 = __MAC_10_3;
pub const MAC_OS_X_VERSION_10_4 = __MAC_10_4;
pub const MAC_OS_X_VERSION_10_5 = __MAC_10_5;
pub const MAC_OS_X_VERSION_10_6 = __MAC_10_6;
pub const MAC_OS_X_VERSION_10_7 = __MAC_10_7;
pub const MAC_OS_X_VERSION_10_8 = __MAC_10_8;
pub const MAC_OS_X_VERSION_10_9 = __MAC_10_9;
pub const MAC_OS_X_VERSION_10_10 = __MAC_10_10;
pub const MAC_OS_X_VERSION_10_10_2 = __MAC_10_10_2;
pub const MAC_OS_X_VERSION_10_10_3 = __MAC_10_10_3;
pub const MAC_OS_X_VERSION_10_11 = __MAC_10_11;
pub const MAC_OS_X_VERSION_10_11_2 = __MAC_10_11_2;
pub const MAC_OS_X_VERSION_10_11_3 = __MAC_10_11_3;
pub const MAC_OS_X_VERSION_10_11_4 = __MAC_10_11_4;
pub const MAC_OS_X_VERSION_10_12 = __MAC_10_12;
pub const MAC_OS_X_VERSION_10_12_1 = __MAC_10_12_1;
pub const MAC_OS_X_VERSION_10_12_2 = __MAC_10_12_2;
pub const MAC_OS_X_VERSION_10_12_4 = __MAC_10_12_4;
pub const MAC_OS_X_VERSION_10_13 = __MAC_10_13;
pub const MAC_OS_X_VERSION_10_13_1 = __MAC_10_13_1;
pub const MAC_OS_X_VERSION_10_13_2 = __MAC_10_13_2;
pub const MAC_OS_X_VERSION_10_13_4 = __MAC_10_13_4;
pub const MAC_OS_X_VERSION_10_14 = __MAC_10_14;
pub const MAC_OS_X_VERSION_10_14_1 = __MAC_10_14_1;
pub const MAC_OS_X_VERSION_10_14_4 = __MAC_10_14_4;
pub const MAC_OS_X_VERSION_10_14_5 = __MAC_10_14_5;
pub const MAC_OS_X_VERSION_10_14_6 = __MAC_10_14_6;
pub const MAC_OS_X_VERSION_10_15 = __MAC_10_15;
pub const MAC_OS_X_VERSION_10_15_1 = __MAC_10_15_1;
pub const MAC_OS_X_VERSION_10_15_4 = __MAC_10_15_4;
pub const MAC_OS_X_VERSION_10_16 = __MAC_10_16;
pub const MAC_OS_VERSION_11_0 = __MAC_11_0;
pub const MAC_OS_VERSION_11_1 = __MAC_11_1;
pub const MAC_OS_VERSION_11_3 = __MAC_11_3;
pub const MAC_OS_VERSION_11_4 = __MAC_11_4;
pub const MAC_OS_VERSION_11_5 = __MAC_11_5;
pub const MAC_OS_VERSION_11_6 = __MAC_11_6;
pub const MAC_OS_VERSION_12_0 = __MAC_12_0;
pub const MAC_OS_VERSION_12_1 = __MAC_12_1;
pub const MAC_OS_VERSION_12_2 = __MAC_12_2;
pub const MAC_OS_VERSION_12_3 = __MAC_12_3;
pub const MAC_OS_VERSION_12_4 = __MAC_12_4;
pub const MAC_OS_VERSION_12_5 = __MAC_12_5;
pub const MAC_OS_VERSION_12_6 = __MAC_12_6;
pub const MAC_OS_VERSION_12_7 = __MAC_12_7;
pub const MAC_OS_VERSION_13_0 = __MAC_13_0;
pub const MAC_OS_VERSION_13_1 = __MAC_13_1;
pub const MAC_OS_VERSION_13_2 = __MAC_13_2;
pub const MAC_OS_VERSION_13_3 = __MAC_13_3;
pub const MAC_OS_VERSION_13_4 = __MAC_13_4;
pub const MAC_OS_VERSION_13_5 = __MAC_13_5;
pub const MAC_OS_VERSION_13_6 = __MAC_13_6;
pub const MAC_OS_VERSION_13_7 = __MAC_13_7;
pub const MAC_OS_VERSION_14_0 = __MAC_14_0;
pub const MAC_OS_VERSION_14_1 = __MAC_14_1;
pub const MAC_OS_VERSION_14_2 = __MAC_14_2;
pub const MAC_OS_VERSION_14_3 = __MAC_14_3;
pub const MAC_OS_VERSION_14_4 = __MAC_14_4;
pub const MAC_OS_VERSION_14_5 = __MAC_14_5;
pub const MAC_OS_VERSION_14_6 = __MAC_14_6;
pub const MAC_OS_VERSION_14_7 = __MAC_14_7;
pub const MAC_OS_VERSION_15_0 = __MAC_15_0;
pub const MAC_OS_VERSION_15_1 = __MAC_15_1;
pub const MAC_OS_VERSION_15_2 = __MAC_15_2;
pub const MAC_OS_VERSION_15_3 = __MAC_15_3;
pub const MAC_OS_VERSION_15_4 = __MAC_15_4;
pub const __AVAILABILITY_VERSIONS_VERSION_HASH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 93585900, .decimal);
pub const __AVAILABILITY_VERSIONS_VERSION_STRING = "Local";
pub const __AVAILABILITY_FILE = "AvailabilityVersions.h";
pub const __AVAILABILITY_INTERNAL__ = "";
pub const __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_15_4;
pub const __AVAILABILITY_INTERNAL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:130:9
pub const __AVAILABILITY_INTERNAL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:133:17
pub const __AVAILABILITY_INTERNAL_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `unavailable`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:142:9
pub const __AVAILABILITY_INTERNAL_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `weak_import`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:143:9
pub const __AVAILABILITY_INTERNAL_REGULAR = "";
pub const __API_AVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:148:12
pub const __API_DEPRECATED_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:149:12
pub const __API_OBSOLETED_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:150:12
pub const __API_UNAVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:151:12
pub const __API_AVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:152:12
pub const __API_DEPRECATED_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:153:12
pub const __API_OBSOLETED_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:154:12
pub const __API_UNAVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:155:12
pub const __API_AVAILABLE_PLATFORM_macOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `macOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:156:12
pub const __API_DEPRECATED_PLATFORM_macOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `macOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:157:12
pub const __API_OBSOLETED_PLATFORM_macOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `macOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:158:12
pub const __API_UNAVAILABLE_PLATFORM_macOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `macOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:159:12
pub const __API_AVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:160:12
pub const __API_DEPRECATED_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:161:12
pub const __API_OBSOLETED_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:162:12
pub const __API_UNAVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:163:12
pub const __API_AVAILABLE_PLATFORM_iOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `iOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:164:12
pub const __API_DEPRECATED_PLATFORM_iOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `iOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:165:12
pub const __API_OBSOLETED_PLATFORM_iOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `iOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:166:12
pub const __API_UNAVAILABLE_PLATFORM_iOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `iOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:167:12
pub const __API_AVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:168:12
pub const __API_DEPRECATED_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:169:12
pub const __API_OBSOLETED_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:170:12
pub const __API_UNAVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:171:12
pub const __API_AVAILABLE_PLATFORM_macCatalystApplicationExtension = @compileError("unable to translate macro: undefined identifier `macCatalystApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:172:12
pub const __API_DEPRECATED_PLATFORM_macCatalystApplicationExtension = @compileError("unable to translate macro: undefined identifier `macCatalystApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:173:12
pub const __API_OBSOLETED_PLATFORM_macCatalystApplicationExtension = @compileError("unable to translate macro: undefined identifier `macCatalystApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:174:12
pub const __API_UNAVAILABLE_PLATFORM_macCatalystApplicationExtension = @compileError("unable to translate macro: undefined identifier `macCatalystApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:175:12
pub const __API_AVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:176:12
pub const __API_DEPRECATED_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:177:12
pub const __API_OBSOLETED_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:178:12
pub const __API_UNAVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:179:12
pub const __API_AVAILABLE_PLATFORM_watchOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `watchOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:180:12
pub const __API_DEPRECATED_PLATFORM_watchOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `watchOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:181:12
pub const __API_OBSOLETED_PLATFORM_watchOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `watchOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:182:12
pub const __API_UNAVAILABLE_PLATFORM_watchOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `watchOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:183:12
pub const __API_AVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:184:12
pub const __API_DEPRECATED_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:185:12
pub const __API_OBSOLETED_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:186:12
pub const __API_UNAVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:187:12
pub const __API_AVAILABLE_PLATFORM_tvOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `tvOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:188:12
pub const __API_DEPRECATED_PLATFORM_tvOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `tvOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:189:12
pub const __API_OBSOLETED_PLATFORM_tvOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `tvOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:190:12
pub const __API_UNAVAILABLE_PLATFORM_tvOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `tvOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:191:12
pub const __API_AVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:193:12
pub const __API_DEPRECATED_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:194:12
pub const __API_OBSOLETED_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:195:12
pub const __API_UNAVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:196:12
pub const __API_AVAILABLE_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:197:12
pub const __API_DEPRECATED_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:198:12
pub const __API_OBSOLETED_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:199:12
pub const __API_UNAVAILABLE_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:200:12
pub const __API_AVAILABLE_PLATFORM_visionOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `visionOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:201:12
pub const __API_DEPRECATED_PLATFORM_visionOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `visionOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:202:12
pub const __API_OBSOLETED_PLATFORM_visionOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `visionOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:203:12
pub const __API_UNAVAILABLE_PLATFORM_visionOSApplicationExtension = @compileError("unable to translate macro: undefined identifier `visionOSApplicationExtension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:204:12
pub const __API_UNAVAILABLE_PLATFORM_kernelkit = @compileError("unable to translate macro: undefined identifier `kernelkit`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:206:12
pub const __API_APPLY_TO = @compileError("unable to translate macro: undefined identifier `any`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:216:11
pub inline fn __API_RANGE_STRINGIFY(x: anytype) @TypeOf(__API_RANGE_STRINGIFY2(x)) {
    _ = &x;
    return __API_RANGE_STRINGIFY2(x);
}
pub const __API_RANGE_STRINGIFY2 = @compileError("unable to translate C expr: unexpected token '#'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:218:11
pub const __API_A = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:232:13
pub inline fn __API_AVAILABLE0(arg0: anytype) @TypeOf(__API_A(arg0)) {
    _ = &arg0;
    return __API_A(arg0);
}
pub inline fn __API_AVAILABLE1(arg0: anytype, arg1: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1)) {
    _ = &arg0;
    _ = &arg1;
    return __API_A(arg0) ++ __API_A(arg1);
}
pub inline fn __API_AVAILABLE2(arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2);
}
pub inline fn __API_AVAILABLE3(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3);
}
pub inline fn __API_AVAILABLE4(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4);
}
pub inline fn __API_AVAILABLE5(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5);
}
pub inline fn __API_AVAILABLE6(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6);
}
pub inline fn __API_AVAILABLE7(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7);
}
pub inline fn __API_AVAILABLE8(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8);
}
pub inline fn __API_AVAILABLE9(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9);
}
pub inline fn __API_AVAILABLE10(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10);
}
pub inline fn __API_AVAILABLE11(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11);
}
pub inline fn __API_AVAILABLE12(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12);
}
pub inline fn __API_AVAILABLE13(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13);
}
pub inline fn __API_AVAILABLE14(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13) ++ __API_A(arg14)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13) ++ __API_A(arg14);
}
pub inline fn __API_AVAILABLE15(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13) ++ __API_A(arg14) ++ __API_A(arg15)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_A(arg0) ++ __API_A(arg1) ++ __API_A(arg2) ++ __API_A(arg3) ++ __API_A(arg4) ++ __API_A(arg5) ++ __API_A(arg6) ++ __API_A(arg7) ++ __API_A(arg8) ++ __API_A(arg9) ++ __API_A(arg10) ++ __API_A(arg11) ++ __API_A(arg12) ++ __API_A(arg13) ++ __API_A(arg14) ++ __API_A(arg15);
}
pub const __API_AVAILABLE_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:250:13
pub const __API_A_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:252:13
pub inline fn __API_AVAILABLE_BEGIN0(arg0: anytype) @TypeOf(__API_A_BEGIN(arg0)) {
    _ = &arg0;
    return __API_A_BEGIN(arg0);
}
pub inline fn __API_AVAILABLE_BEGIN1(arg0: anytype, arg1: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1)) {
    _ = &arg0;
    _ = &arg1;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1);
}
pub inline fn __API_AVAILABLE_BEGIN2(arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2);
}
pub inline fn __API_AVAILABLE_BEGIN3(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3);
}
pub inline fn __API_AVAILABLE_BEGIN4(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4);
}
pub inline fn __API_AVAILABLE_BEGIN5(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5);
}
pub inline fn __API_AVAILABLE_BEGIN6(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6);
}
pub inline fn __API_AVAILABLE_BEGIN7(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7);
}
pub inline fn __API_AVAILABLE_BEGIN8(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8);
}
pub inline fn __API_AVAILABLE_BEGIN9(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9);
}
pub inline fn __API_AVAILABLE_BEGIN10(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10);
}
pub inline fn __API_AVAILABLE_BEGIN11(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11);
}
pub inline fn __API_AVAILABLE_BEGIN12(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12);
}
pub inline fn __API_AVAILABLE_BEGIN13(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13);
}
pub inline fn __API_AVAILABLE_BEGIN14(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13) ++ __API_A_BEGIN(arg14)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13) ++ __API_A_BEGIN(arg14);
}
pub inline fn __API_AVAILABLE_BEGIN15(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13) ++ __API_A_BEGIN(arg14) ++ __API_A_BEGIN(arg15)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_A_BEGIN(arg0) ++ __API_A_BEGIN(arg1) ++ __API_A_BEGIN(arg2) ++ __API_A_BEGIN(arg3) ++ __API_A_BEGIN(arg4) ++ __API_A_BEGIN(arg5) ++ __API_A_BEGIN(arg6) ++ __API_A_BEGIN(arg7) ++ __API_A_BEGIN(arg8) ++ __API_A_BEGIN(arg9) ++ __API_A_BEGIN(arg10) ++ __API_A_BEGIN(arg11) ++ __API_A_BEGIN(arg12) ++ __API_A_BEGIN(arg13) ++ __API_A_BEGIN(arg14) ++ __API_A_BEGIN(arg15);
}
pub const __API_AVAILABLE_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:270:13
pub const __API_D = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:274:13
pub inline fn __API_DEPRECATED_MSG0(msg: anytype, arg0: anytype) @TypeOf(__API_D(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_D(msg, arg0);
}
pub inline fn __API_DEPRECATED_MSG1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1);
}
pub inline fn __API_DEPRECATED_MSG2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2);
}
pub inline fn __API_DEPRECATED_MSG3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3);
}
pub inline fn __API_DEPRECATED_MSG4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4);
}
pub inline fn __API_DEPRECATED_MSG5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5);
}
pub inline fn __API_DEPRECATED_MSG6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6);
}
pub inline fn __API_DEPRECATED_MSG7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7);
}
pub inline fn __API_DEPRECATED_MSG8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8);
}
pub inline fn __API_DEPRECATED_MSG9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9);
}
pub inline fn __API_DEPRECATED_MSG10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10);
}
pub inline fn __API_DEPRECATED_MSG11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11);
}
pub inline fn __API_DEPRECATED_MSG12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12);
}
pub inline fn __API_DEPRECATED_MSG13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13);
}
pub inline fn __API_DEPRECATED_MSG14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13) ++ __API_D(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13) ++ __API_D(msg, arg14);
}
pub inline fn __API_DEPRECATED_MSG15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13) ++ __API_D(msg, arg14) ++ __API_D(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_D(msg, arg0) ++ __API_D(msg, arg1) ++ __API_D(msg, arg2) ++ __API_D(msg, arg3) ++ __API_D(msg, arg4) ++ __API_D(msg, arg5) ++ __API_D(msg, arg6) ++ __API_D(msg, arg7) ++ __API_D(msg, arg8) ++ __API_D(msg, arg9) ++ __API_D(msg, arg10) ++ __API_D(msg, arg11) ++ __API_D(msg, arg12) ++ __API_D(msg, arg13) ++ __API_D(msg, arg14) ++ __API_D(msg, arg15);
}
pub const __API_DEPRECATED_MSG_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:292:13
pub const __API_D_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:294:13
pub inline fn __API_DEPRECATED_BEGIN0(msg: anytype, arg0: anytype) @TypeOf(__API_D_BEGIN(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_D_BEGIN(msg, arg0);
}
pub inline fn __API_DEPRECATED_BEGIN1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1);
}
pub inline fn __API_DEPRECATED_BEGIN2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2);
}
pub inline fn __API_DEPRECATED_BEGIN3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3);
}
pub inline fn __API_DEPRECATED_BEGIN4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4);
}
pub inline fn __API_DEPRECATED_BEGIN5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5);
}
pub inline fn __API_DEPRECATED_BEGIN6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6);
}
pub inline fn __API_DEPRECATED_BEGIN7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7);
}
pub inline fn __API_DEPRECATED_BEGIN8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8);
}
pub inline fn __API_DEPRECATED_BEGIN9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9);
}
pub inline fn __API_DEPRECATED_BEGIN10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10);
}
pub inline fn __API_DEPRECATED_BEGIN11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11);
}
pub inline fn __API_DEPRECATED_BEGIN12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12);
}
pub inline fn __API_DEPRECATED_BEGIN13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13);
}
pub inline fn __API_DEPRECATED_BEGIN14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13) ++ __API_D_BEGIN(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13) ++ __API_D_BEGIN(msg, arg14);
}
pub inline fn __API_DEPRECATED_BEGIN15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13) ++ __API_D_BEGIN(msg, arg14) ++ __API_D_BEGIN(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_D_BEGIN(msg, arg0) ++ __API_D_BEGIN(msg, arg1) ++ __API_D_BEGIN(msg, arg2) ++ __API_D_BEGIN(msg, arg3) ++ __API_D_BEGIN(msg, arg4) ++ __API_D_BEGIN(msg, arg5) ++ __API_D_BEGIN(msg, arg6) ++ __API_D_BEGIN(msg, arg7) ++ __API_D_BEGIN(msg, arg8) ++ __API_D_BEGIN(msg, arg9) ++ __API_D_BEGIN(msg, arg10) ++ __API_D_BEGIN(msg, arg11) ++ __API_D_BEGIN(msg, arg12) ++ __API_D_BEGIN(msg, arg13) ++ __API_D_BEGIN(msg, arg14) ++ __API_D_BEGIN(msg, arg15);
}
pub const __API_DEPRECATED_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:312:13
pub const __API_DR = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:315:17
pub inline fn __API_DEPRECATED_REP0(msg: anytype, arg0: anytype) @TypeOf(__API_DR(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_DR(msg, arg0);
}
pub inline fn __API_DEPRECATED_REP1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1);
}
pub inline fn __API_DEPRECATED_REP2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2);
}
pub inline fn __API_DEPRECATED_REP3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3);
}
pub inline fn __API_DEPRECATED_REP4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4);
}
pub inline fn __API_DEPRECATED_REP5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5);
}
pub inline fn __API_DEPRECATED_REP6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6);
}
pub inline fn __API_DEPRECATED_REP7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7);
}
pub inline fn __API_DEPRECATED_REP8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8);
}
pub inline fn __API_DEPRECATED_REP9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9);
}
pub inline fn __API_DEPRECATED_REP10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10);
}
pub inline fn __API_DEPRECATED_REP11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11);
}
pub inline fn __API_DEPRECATED_REP12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12);
}
pub inline fn __API_DEPRECATED_REP13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13);
}
pub inline fn __API_DEPRECATED_REP14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13) ++ __API_DR(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13) ++ __API_DR(msg, arg14);
}
pub inline fn __API_DEPRECATED_REP15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13) ++ __API_DR(msg, arg14) ++ __API_DR(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_DR(msg, arg0) ++ __API_DR(msg, arg1) ++ __API_DR(msg, arg2) ++ __API_DR(msg, arg3) ++ __API_DR(msg, arg4) ++ __API_DR(msg, arg5) ++ __API_DR(msg, arg6) ++ __API_DR(msg, arg7) ++ __API_DR(msg, arg8) ++ __API_DR(msg, arg9) ++ __API_DR(msg, arg10) ++ __API_DR(msg, arg11) ++ __API_DR(msg, arg12) ++ __API_DR(msg, arg13) ++ __API_DR(msg, arg14) ++ __API_DR(msg, arg15);
}
pub const __API_DEPRECATED_REP_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:336:13
pub const __API_DR_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:339:17
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN0(msg: anytype, arg0: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_DR_BEGIN(msg, arg0);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13) ++ __API_DR_BEGIN(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13) ++ __API_DR_BEGIN(msg, arg14);
}
pub inline fn __API_DEPRECATED_WITH_REPLACEMENT_BEGIN15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13) ++ __API_DR_BEGIN(msg, arg14) ++ __API_DR_BEGIN(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_DR_BEGIN(msg, arg0) ++ __API_DR_BEGIN(msg, arg1) ++ __API_DR_BEGIN(msg, arg2) ++ __API_DR_BEGIN(msg, arg3) ++ __API_DR_BEGIN(msg, arg4) ++ __API_DR_BEGIN(msg, arg5) ++ __API_DR_BEGIN(msg, arg6) ++ __API_DR_BEGIN(msg, arg7) ++ __API_DR_BEGIN(msg, arg8) ++ __API_DR_BEGIN(msg, arg9) ++ __API_DR_BEGIN(msg, arg10) ++ __API_DR_BEGIN(msg, arg11) ++ __API_DR_BEGIN(msg, arg12) ++ __API_DR_BEGIN(msg, arg13) ++ __API_DR_BEGIN(msg, arg14) ++ __API_DR_BEGIN(msg, arg15);
}
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:360:13
pub const __API_O = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:364:9
pub inline fn __API_OBSOLETED_MSG0(msg: anytype, arg0: anytype) @TypeOf(__API_O(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_O(msg, arg0);
}
pub inline fn __API_OBSOLETED_MSG1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1);
}
pub inline fn __API_OBSOLETED_MSG2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2);
}
pub inline fn __API_OBSOLETED_MSG3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3);
}
pub inline fn __API_OBSOLETED_MSG4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4);
}
pub inline fn __API_OBSOLETED_MSG5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5);
}
pub inline fn __API_OBSOLETED_MSG6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6);
}
pub inline fn __API_OBSOLETED_MSG7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7);
}
pub inline fn __API_OBSOLETED_MSG8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8);
}
pub inline fn __API_OBSOLETED_MSG9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9);
}
pub inline fn __API_OBSOLETED_MSG10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10);
}
pub inline fn __API_OBSOLETED_MSG11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11);
}
pub inline fn __API_OBSOLETED_MSG12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12);
}
pub inline fn __API_OBSOLETED_MSG13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13);
}
pub inline fn __API_OBSOLETED_MSG14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13) ++ __API_O(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13) ++ __API_O(msg, arg14);
}
pub inline fn __API_OBSOLETED_MSG15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13) ++ __API_O(msg, arg14) ++ __API_O(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_O(msg, arg0) ++ __API_O(msg, arg1) ++ __API_O(msg, arg2) ++ __API_O(msg, arg3) ++ __API_O(msg, arg4) ++ __API_O(msg, arg5) ++ __API_O(msg, arg6) ++ __API_O(msg, arg7) ++ __API_O(msg, arg8) ++ __API_O(msg, arg9) ++ __API_O(msg, arg10) ++ __API_O(msg, arg11) ++ __API_O(msg, arg12) ++ __API_O(msg, arg13) ++ __API_O(msg, arg14) ++ __API_O(msg, arg15);
}
pub const __API_OBSOLETED_MSG_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:382:13
pub const __API_O_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:384:9
pub inline fn __API_OBSOLETED_BEGIN0(msg: anytype, arg0: anytype) @TypeOf(__API_O_BEGIN(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_O_BEGIN(msg, arg0);
}
pub inline fn __API_OBSOLETED_BEGIN1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1);
}
pub inline fn __API_OBSOLETED_BEGIN2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2);
}
pub inline fn __API_OBSOLETED_BEGIN3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3);
}
pub inline fn __API_OBSOLETED_BEGIN4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4);
}
pub inline fn __API_OBSOLETED_BEGIN5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5);
}
pub inline fn __API_OBSOLETED_BEGIN6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6);
}
pub inline fn __API_OBSOLETED_BEGIN7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7);
}
pub inline fn __API_OBSOLETED_BEGIN8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8);
}
pub inline fn __API_OBSOLETED_BEGIN9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9);
}
pub inline fn __API_OBSOLETED_BEGIN10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10);
}
pub inline fn __API_OBSOLETED_BEGIN11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11);
}
pub inline fn __API_OBSOLETED_BEGIN12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12);
}
pub inline fn __API_OBSOLETED_BEGIN13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13);
}
pub inline fn __API_OBSOLETED_BEGIN14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13) ++ __API_O_BEGIN(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13) ++ __API_O_BEGIN(msg, arg14);
}
pub inline fn __API_OBSOLETED_BEGIN15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13) ++ __API_O_BEGIN(msg, arg14) ++ __API_O_BEGIN(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_O_BEGIN(msg, arg0) ++ __API_O_BEGIN(msg, arg1) ++ __API_O_BEGIN(msg, arg2) ++ __API_O_BEGIN(msg, arg3) ++ __API_O_BEGIN(msg, arg4) ++ __API_O_BEGIN(msg, arg5) ++ __API_O_BEGIN(msg, arg6) ++ __API_O_BEGIN(msg, arg7) ++ __API_O_BEGIN(msg, arg8) ++ __API_O_BEGIN(msg, arg9) ++ __API_O_BEGIN(msg, arg10) ++ __API_O_BEGIN(msg, arg11) ++ __API_O_BEGIN(msg, arg12) ++ __API_O_BEGIN(msg, arg13) ++ __API_O_BEGIN(msg, arg14) ++ __API_O_BEGIN(msg, arg15);
}
pub const __API_OBSOLETED_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:402:13
pub const __API_OR = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:405:13
pub inline fn __API_OBSOLETED_REP0(msg: anytype, arg0: anytype) @TypeOf(__API_OR(msg, arg0)) {
    _ = &msg;
    _ = &arg0;
    return __API_OR(msg, arg0);
}
pub inline fn __API_OBSOLETED_REP1(msg: anytype, arg0: anytype, arg1: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1);
}
pub inline fn __API_OBSOLETED_REP2(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2);
}
pub inline fn __API_OBSOLETED_REP3(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3);
}
pub inline fn __API_OBSOLETED_REP4(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4);
}
pub inline fn __API_OBSOLETED_REP5(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5);
}
pub inline fn __API_OBSOLETED_REP6(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6);
}
pub inline fn __API_OBSOLETED_REP7(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7);
}
pub inline fn __API_OBSOLETED_REP8(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8);
}
pub inline fn __API_OBSOLETED_REP9(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9);
}
pub inline fn __API_OBSOLETED_REP10(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10);
}
pub inline fn __API_OBSOLETED_REP11(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11);
}
pub inline fn __API_OBSOLETED_REP12(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12);
}
pub inline fn __API_OBSOLETED_REP13(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13);
}
pub inline fn __API_OBSOLETED_REP14(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13) ++ __API_OR(msg, arg14)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13) ++ __API_OR(msg, arg14);
}
pub inline fn __API_OBSOLETED_REP15(msg: anytype, arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13) ++ __API_OR(msg, arg14) ++ __API_OR(msg, arg15)) {
    _ = &msg;
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_OR(msg, arg0) ++ __API_OR(msg, arg1) ++ __API_OR(msg, arg2) ++ __API_OR(msg, arg3) ++ __API_OR(msg, arg4) ++ __API_OR(msg, arg5) ++ __API_OR(msg, arg6) ++ __API_OR(msg, arg7) ++ __API_OR(msg, arg8) ++ __API_OR(msg, arg9) ++ __API_OR(msg, arg10) ++ __API_OR(msg, arg11) ++ __API_OR(msg, arg12) ++ __API_OR(msg, arg13) ++ __API_OR(msg, arg14) ++ __API_OR(msg, arg15);
}
pub const __API_OBSOLETED_REP_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:426:13
pub const __API_OR_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:429:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN0 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:434:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN1 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:435:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN2 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:436:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN3 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:437:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN4 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:438:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN5 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:439:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN6 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:440:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN7 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:441:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN8 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:442:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN9 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:443:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN10 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:444:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN11 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:445:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN12 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:446:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN13 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:447:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN14 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:448:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN15 = @compileError("unable to translate macro: undefined identifier `__API_R_BEGIN`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:449:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:450:13
pub const __API_U = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:461:13
pub inline fn __API_UNAVAILABLE0(arg0: anytype) @TypeOf(__API_U(arg0)) {
    _ = &arg0;
    return __API_U(arg0);
}
pub inline fn __API_UNAVAILABLE1(arg0: anytype, arg1: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1)) {
    _ = &arg0;
    _ = &arg1;
    return __API_U(arg0) ++ __API_U(arg1);
}
pub inline fn __API_UNAVAILABLE2(arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2);
}
pub inline fn __API_UNAVAILABLE3(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3);
}
pub inline fn __API_UNAVAILABLE4(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4);
}
pub inline fn __API_UNAVAILABLE5(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5);
}
pub inline fn __API_UNAVAILABLE6(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6);
}
pub inline fn __API_UNAVAILABLE7(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7);
}
pub inline fn __API_UNAVAILABLE8(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8);
}
pub inline fn __API_UNAVAILABLE9(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9);
}
pub inline fn __API_UNAVAILABLE10(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10);
}
pub inline fn __API_UNAVAILABLE11(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11);
}
pub inline fn __API_UNAVAILABLE12(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12);
}
pub inline fn __API_UNAVAILABLE13(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13);
}
pub inline fn __API_UNAVAILABLE14(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13) ++ __API_U(arg14)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13) ++ __API_U(arg14);
}
pub inline fn __API_UNAVAILABLE15(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13) ++ __API_U(arg14) ++ __API_U(arg15)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_U(arg0) ++ __API_U(arg1) ++ __API_U(arg2) ++ __API_U(arg3) ++ __API_U(arg4) ++ __API_U(arg5) ++ __API_U(arg6) ++ __API_U(arg7) ++ __API_U(arg8) ++ __API_U(arg9) ++ __API_U(arg10) ++ __API_U(arg11) ++ __API_U(arg12) ++ __API_U(arg13) ++ __API_U(arg14) ++ __API_U(arg15);
}
pub const __API_UNAVAILABLE_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:479:13
pub const __API_U_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:481:13
pub inline fn __API_UNAVAILABLE_BEGIN0(arg0: anytype) @TypeOf(__API_U_BEGIN(arg0)) {
    _ = &arg0;
    return __API_U_BEGIN(arg0);
}
pub inline fn __API_UNAVAILABLE_BEGIN1(arg0: anytype, arg1: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1)) {
    _ = &arg0;
    _ = &arg1;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1);
}
pub inline fn __API_UNAVAILABLE_BEGIN2(arg0: anytype, arg1: anytype, arg2: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2);
}
pub inline fn __API_UNAVAILABLE_BEGIN3(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3);
}
pub inline fn __API_UNAVAILABLE_BEGIN4(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4);
}
pub inline fn __API_UNAVAILABLE_BEGIN5(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5);
}
pub inline fn __API_UNAVAILABLE_BEGIN6(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6);
}
pub inline fn __API_UNAVAILABLE_BEGIN7(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7);
}
pub inline fn __API_UNAVAILABLE_BEGIN8(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8);
}
pub inline fn __API_UNAVAILABLE_BEGIN9(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9);
}
pub inline fn __API_UNAVAILABLE_BEGIN10(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10);
}
pub inline fn __API_UNAVAILABLE_BEGIN11(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11);
}
pub inline fn __API_UNAVAILABLE_BEGIN12(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12);
}
pub inline fn __API_UNAVAILABLE_BEGIN13(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13);
}
pub inline fn __API_UNAVAILABLE_BEGIN14(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13) ++ __API_U_BEGIN(arg14)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13) ++ __API_U_BEGIN(arg14);
}
pub inline fn __API_UNAVAILABLE_BEGIN15(arg0: anytype, arg1: anytype, arg2: anytype, arg3: anytype, arg4: anytype, arg5: anytype, arg6: anytype, arg7: anytype, arg8: anytype, arg9: anytype, arg10: anytype, arg11: anytype, arg12: anytype, arg13: anytype, arg14: anytype, arg15: anytype) @TypeOf(__API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13) ++ __API_U_BEGIN(arg14) ++ __API_U_BEGIN(arg15)) {
    _ = &arg0;
    _ = &arg1;
    _ = &arg2;
    _ = &arg3;
    _ = &arg4;
    _ = &arg5;
    _ = &arg6;
    _ = &arg7;
    _ = &arg8;
    _ = &arg9;
    _ = &arg10;
    _ = &arg11;
    _ = &arg12;
    _ = &arg13;
    _ = &arg14;
    _ = &arg15;
    return __API_U_BEGIN(arg0) ++ __API_U_BEGIN(arg1) ++ __API_U_BEGIN(arg2) ++ __API_U_BEGIN(arg3) ++ __API_U_BEGIN(arg4) ++ __API_U_BEGIN(arg5) ++ __API_U_BEGIN(arg6) ++ __API_U_BEGIN(arg7) ++ __API_U_BEGIN(arg8) ++ __API_U_BEGIN(arg9) ++ __API_U_BEGIN(arg10) ++ __API_U_BEGIN(arg11) ++ __API_U_BEGIN(arg12) ++ __API_U_BEGIN(arg13) ++ __API_U_BEGIN(arg14) ++ __API_U_BEGIN(arg15);
}
pub const __API_UNAVAILABLE_BEGIN_GET_MACRO_93585900 = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:499:13
pub const __swift_compiler_version_at_least = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternal.h:521:13
pub const __AVAILABILITY_INTERNAL_LEGACY__ = "";
pub const __ENABLE_LEGACY_MAC_AVAILABILITY = @as(c_int, 1);
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2833:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2834:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2835:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2837:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2841:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2843:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2848:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2852:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2853:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2855:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2859:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2861:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2865:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2867:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2872:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2876:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2877:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2879:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2883:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2885:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2889:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2891:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2896:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2901:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2905:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2907:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2911:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2913:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2917:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2919:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2923:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2925:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2929:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2931:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2935:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2937:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2941:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2943:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2947:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2949:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2953:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2954:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2955:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2956:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2957:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2958:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2960:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2964:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2966:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2971:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2975:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2976:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2978:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2982:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2984:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2988:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2990:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2995:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:2999:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3000:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3002:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3006:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3008:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3012:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3014:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3019:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3023:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3024:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3026:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3030:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3032:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3036:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3038:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3042:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3044:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3048:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3050:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3054:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3056:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3060:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3062:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3066:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3068:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3072:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3074:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3075:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3076:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3077:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3079:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3083:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3085:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3090:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3094:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3095:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3097:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3101:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3103:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3107:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3109:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3114:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3118:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3119:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3121:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3125:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3127:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3131:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3133:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3138:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3142:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3143:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3145:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3149:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3151:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3155:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3157:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3161:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3163:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3167:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3169:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3173:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3175:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3179:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3181:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3185:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3186:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3187:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3188:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3189:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3190:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3192:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3196:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3198:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3203:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3207:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3208:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3210:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3214:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3216:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3220:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3222:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3227:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3231:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3232:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3234:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3238:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3240:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3244:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3246:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3251:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3255:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3256:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3258:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3262:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3264:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3268:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3270:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3274:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3276:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3280:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3282:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3286:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3288:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3292:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3293:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3294:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3295:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3296:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3297:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3298:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3300:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3304:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3306:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3311:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3315:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3316:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3318:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3322:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3324:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3328:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3330:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3335:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3339:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3340:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3342:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3346:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3348:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3352:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3354:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3359:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3363:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3365:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3369:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3371:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3375:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3377:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3381:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3383:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3387:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3389:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3393:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3394:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3395:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3396:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3397:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3398:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3400:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3404:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3406:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3411:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3415:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3416:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3418:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3422:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3424:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3428:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3430:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3435:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3439:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3440:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3442:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3446:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3448:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3452:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3454:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3459:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3463:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3464:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3466:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3470:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3472:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3476:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3478:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3482:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3484:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3488:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3489:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3490:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3491:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3492:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3493:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3495:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3499:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3501:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3506:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3510:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3511:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3513:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3517:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3519:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3523:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3525:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3530:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3534:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3535:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3537:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3541:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3543:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3547:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3549:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3554:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3558:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3559:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3561:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3565:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3567:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3571:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3573:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3577:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3578:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3579:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3580:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3581:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3582:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3584:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3588:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3590:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3595:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3599:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3600:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3602:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3606:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3608:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3612:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3614:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3619:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3623:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3624:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3626:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3630:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3632:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3636:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3638:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3643:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3647:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3648:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3650:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3654:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3656:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3660:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3661:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3662:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3663:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3664:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3665:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3667:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3671:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3673:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3678:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3682:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3683:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3685:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3689:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3691:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3695:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3697:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3702:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3706:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3707:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3709:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3713:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3715:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3719:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3721:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3726:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3730:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3731:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3732:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3734:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3738:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3739:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3740:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3741:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3743:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3747:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3748:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3749:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3751:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3755:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3757:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3762:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3766:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3767:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3769:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3773:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3775:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3779:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3781:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3786:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3790:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3791:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3793:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3797:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3799:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3803:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3805:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3810:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3814:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3816:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3820:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3822:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3826:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3828:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3832:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3834:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3838:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3840:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3844:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3846:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3850:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3852:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3856:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3858:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3862:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3864:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3869:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3873:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3874:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3875:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3876:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3877:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3878:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3880:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3884:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3886:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3890:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3891:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3893:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3897:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3899:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3903:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3905:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3910:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3914:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3915:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3917:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3921:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3923:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3927:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3929:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3934:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3938:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3939:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3940:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3941:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3943:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3947:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3948:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3950:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3954:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3956:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3960:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3962:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3967:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3971:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3972:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3974:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3978:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3980:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3984:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3986:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3991:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3995:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3996:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3997:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3998:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:3999:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4001:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4005:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4007:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4012:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4016:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4017:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4019:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4023:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4025:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4029:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4031:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4036:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4040:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4041:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4043:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4047:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4049:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4053:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4055:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4060:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4064:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4066:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4070:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4071:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4072:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4074:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4075:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4077:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4081:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4083:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4087:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4089:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4093:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4094:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4096:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4100:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4102:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4106:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4108:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4113:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4117:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4118:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4119:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4120:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4122:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4126:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4128:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4132:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4133:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4135:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4139:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4141:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4145:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4147:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4152:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4156:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4157:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4158:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4159:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4161:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4165:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4166:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4168:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4172:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4174:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4178:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4180:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4185:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4189:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4190:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4191:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4192:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4193:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4195:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4199:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4201:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4205:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4207:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4212:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4216:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4217:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4219:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4223:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4225:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4229:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4231:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4236:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4240:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4241:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4242:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4243:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4244:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4246:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4250:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4252:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4256:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4258:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4262:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4263:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4264:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4265:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4267:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4271:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4273:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4277:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4279:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4280:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4282:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4286:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4287:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4288:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4289:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4291:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4295:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4297:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4301:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4303:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4308:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4312:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4314:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4318:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4319:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4320:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4321:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4322:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4323:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4324:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4325:21
pub const __AVAILABILITY_INTERNAL__MAC_10_15 = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4326:21
pub const __AVAILABILITY_INTERNAL__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4328:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4329:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4330:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4332:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4333:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4334:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4335:21
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4338:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4339:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityInternalLegacy.h:4340:22
pub const __OSX_AVAILABLE_STARTING = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:237:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:238:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:240:17
pub const __OS_AVAILABILITY = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:263:13
pub const __OS_AVAILABILITY_MSG = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:264:13
pub const __OSX_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx_app_extension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:281:13
pub const __IOS_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios_app_extension`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:282:13
pub inline fn __OS_EXTENSION_UNAVAILABLE(_msg: anytype) @TypeOf(__OSX_EXTENSION_UNAVAILABLE(_msg) ++ __IOS_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __OSX_EXTENSION_UNAVAILABLE(_msg) ++ __IOS_EXTENSION_UNAVAILABLE(_msg);
}
pub const __OSX_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:299:13
pub const __OSX_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:300:13
pub const __OSX_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macosx`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:301:13
pub const __IOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:325:13
pub const __IOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:327:15
pub const __IOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:329:13
pub const __IOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:330:13
pub const __TVOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:354:13
pub const __TVOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:356:15
pub const __TVOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:358:13
pub const __TVOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `tvos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:359:13
pub const __WATCHOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:383:13
pub const __WATCHOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:385:15
pub const __WATCHOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:387:13
pub const __WATCHOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `watchos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:388:13
pub const __SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `swift`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:411:13
pub const __SWIFT_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `swift`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:412:13
pub const __API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:457:13
pub const __API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:459:13
pub const __API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:460:13
pub const __API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:480:13
pub const __API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:481:13
pub const __API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:483:13
pub const __API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:484:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:486:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:487:13
pub const __API_OBSOLETED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:490:13
pub const __API_OBSOLETED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:491:13
pub const __API_OBSOLETED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:493:13
pub const __API_OBSOLETED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:494:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:496:13
pub const __API_OBSOLETED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:497:13
pub const __API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:507:13
pub const __API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:509:13
pub const __API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:510:13
pub const __SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:595:11
pub const __SPI_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:599:11
pub const __SPI_AVAILABLE_END = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:603:11
pub const __SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:607:11
pub const __SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Availability.h:611:11
pub const CoreAudioTypes_CoreAudioBaseTypes_h = "";
pub const COREAUDIOTYPES_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20211130, .decimal);
pub const __COREFOUNDATION_CFBASE__ = @as(c_int, 1);
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stddef_offsetof.h:16:9
pub const __COREFOUNDATION_CFAVAILABILITY__ = @as(c_int, 1);
pub const __OS_AVAILABILITY__ = "";
pub const API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_VISIONOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:104:13
pub const API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:105:13
pub const API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:106:13
pub const API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:127:13
pub const API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:128:13
pub const API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:130:13
pub const API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:131:13
pub const API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:133:13
pub const API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:134:13
pub const API_OBSOLETED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:154:13
pub const API_OBSOLETED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:155:13
pub const API_OBSOLETED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:157:13
pub const API_OBSOLETED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:158:13
pub const API_OBSOLETED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:160:13
pub const API_OBSOLETED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:161:13
pub const API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:172:13
pub const API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:174:13
pub const API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:175:13
pub const SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:264:11
pub const SPI_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:268:11
pub const SPI_AVAILABLE_END = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:272:11
pub const SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:276:11
pub const SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/availability.h:280:11
pub const __AVAILABILITYMACROS__ = "";
pub const MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const MAC_OS_X_VERSION_MAX_ALLOWED = MAC_OS_X_VERSION_MIN_REQUIRED;
pub const WEAK_IMPORT_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `weak_import`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityMacros.h:138:13
pub const DEPRECATED_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityMacros.h:150:17
pub const DEPRECATED_MSG_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityMacros.h:152:21
pub const UNAVAILABLE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `unavailable`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityMacros.h:176:13
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER = "";
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED = DEPRECATED_ATTRIBUTE;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER = DEPRECATED_ATTRIBUTE;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY = @as(c_int, 1);
pub const __IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__IPHONE_NA`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/AvailabilityMacros.h:214:9
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_13 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_14_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_14, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_15_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_15, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_14_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_14_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const CF_AVAILABLE = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:46:9
pub const CF_AVAILABLE_MAC = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:47:9
pub const CF_AVAILABLE_IOS = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:48:9
pub const CF_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:49:9
pub const CF_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:50:9
pub const CF_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:51:9
pub inline fn CF_AVAILABLE_IPHONE(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    _ = &_ios;
    return CF_AVAILABLE_IOS(_ios);
}
pub inline fn CF_DEPRECATED_IPHONE(_iosIntro: anytype, _iosDep: anytype) @TypeOf(CF_DEPRECATED_IOS(_iosIntro, _iosDep)) {
    _ = &_iosIntro;
    _ = &_iosDep;
    return CF_DEPRECATED_IOS(_iosIntro, _iosDep);
}
pub inline fn CF_ENUM_AVAILABLE(_mac: anytype, _ios: anytype) @TypeOf(CF_AVAILABLE(_mac, _ios)) {
    _ = &_mac;
    _ = &_ios;
    return CF_AVAILABLE(_mac, _ios);
}
pub inline fn CF_ENUM_AVAILABLE_MAC(_mac: anytype) @TypeOf(CF_AVAILABLE_MAC(_mac)) {
    _ = &_mac;
    return CF_AVAILABLE_MAC(_mac);
}
pub inline fn CF_ENUM_AVAILABLE_IOS(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    _ = &_ios;
    return CF_AVAILABLE_IOS(_ios);
}
pub const CF_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:100:9
pub const CF_ENUM_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:101:9
pub const CF_ENUM_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:102:9
pub const __CF_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `enum_extensibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:125:9
pub const __CF_CLOSED_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `enum_extensibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:126:9
pub const __CF_OPTIONS_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `flag_enum`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:127:9
pub const __CF_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:134:9
pub const __CF_ENUM_FIXED_IS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `__cplusplus`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:136:9
pub const __CF_NAMED_ENUM = @compileError("unable to translate C expr: unexpected token ';'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:151:9
pub const __CF_ANON_ENUM = @compileError("unable to translate C expr: expected 'an identifier' instead got ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:152:9
pub const CF_CLOSED_ENUM = @compileError("unable to translate C expr: unexpected token ';'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:153:9
pub const CF_OPTIONS = @compileError("unable to translate C expr: unexpected token ';'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:154:9
pub const CF_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:169:9
pub const _CF_TYPED_ENUM = @compileError("unable to translate macro: undefined identifier `swift_wrapper`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:172:9
pub const _CF_TYPED_EXTENSIBLE_ENUM = @compileError("unable to translate macro: undefined identifier `swift_wrapper`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:178:9
pub const CF_STRING_ENUM = _CF_TYPED_ENUM;
pub const CF_EXTENSIBLE_STRING_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const CF_TYPED_ENUM = _CF_TYPED_ENUM;
pub const CF_TYPED_EXTENSIBLE_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const __CF_ERROR_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:189:9
pub inline fn __CF_NAMED_ERROR_ENUM(_domain: anytype, _name: anytype) @TypeOf(__CF_NAMED_ENUM(CFIndex, _name)) {
    _ = &_domain;
    _ = &_name;
    return __CF_NAMED_ENUM(CFIndex, _name);
}
pub inline fn __CF_ANON_ERROR_ENUM(_domain: anytype) @TypeOf(__CF_ANON_ENUM(CFIndex)) {
    _ = &_domain;
    return __CF_ANON_ENUM(CFIndex);
}
pub const CF_ERROR_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:210:9
pub const CF_SWIFT_BRIDGED_TYPEDEF = @compileError("unable to translate macro: undefined identifier `swift_bridged_typedef`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:214:9
pub inline fn CF_EXTENSION_UNAVAILABLE(_msg: anytype) @TypeOf(__OS_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __OS_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_MAC(_msg: anytype) @TypeOf(__OSX_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __OSX_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_IOS(_msg: anytype) @TypeOf(__IOS_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __IOS_EXTENSION_UNAVAILABLE(_msg);
}
pub const CF_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `availability`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:227:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H_ = "";
pub const __WORDSIZE = @as(c_int, 64);
pub const _INT8_T = "";
pub const _INT16_T = "";
pub const _INT32_T = "";
pub const _INT64_T = "";
pub const _UINT8_T = "";
pub const _UINT16_T = "";
pub const _UINT32_T = "";
pub const _UINT64_T = "";
pub const _SYS__TYPES_H_ = "";
pub const _CDEFS_H_ = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __has_cpp_attribute(x: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &x;
    return @as(c_int, 0);
}
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    _ = &protos;
    return protos;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:116:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:117:9
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:119:9
pub const __signed = c_int;
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:121:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:165:9
pub const __pure2 = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:166:9
pub const __stateful_pure = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:167:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:172:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__used__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:177:9
pub const __cold = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:183:9
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `returns_nonnull`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:190:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__visibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:200:9
pub const __exported_push = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:201:9
pub const __exported_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:202:9
pub const __deprecated = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:214:9
pub const __deprecated_msg = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:218:10
pub inline fn __deprecated_enum_msg(_msg: anytype) @TypeOf(__deprecated_msg(_msg)) {
    _ = &_msg;
    return __deprecated_msg(_msg);
}
pub const __kpi_deprecated = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:229:9
pub const __unavailable = @compileError("unable to translate macro: undefined identifier `__unavailable__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:235:9
pub const __kpi_unavailable = "";
pub const __kpi_deprecated_arm64_macos_unavailable = "";
pub const __dead = "";
pub const __pure = "";
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:257:9
pub const __disable_tail_calls = @compileError("unable to translate macro: undefined identifier `__disable_tail_calls__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:290:9
pub const __not_tail_called = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:302:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:313:9
pub const __swift_unavailable = @compileError("unable to translate macro: undefined identifier `__availability__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:323:9
pub const __swift_unavailable_from_async = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:332:9
pub const __swift_nonisolated = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:333:9
pub const __swift_nonisolated_unsafe = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:334:9
pub const __abortlike = __dead2 ++ __cold ++ __not_tail_called;
pub const __header_inline = @compileError("unable to translate C expr: unexpected token 'inline'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:370:10
pub const __header_always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:383:10
pub const __unreachable_ok_push = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:396:10
pub const __unreachable_ok_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:399:10
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:420:9
pub const __printf0like = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:422:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:424:9
pub const __osloglike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:426:9
pub const __IDSTRING = @compileError("unable to translate C expr: unexpected token 'static'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:429:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `copyright`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:432:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `rcsid`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:436:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `sccsid`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:440:9
pub const __PROJECT_VERSION = @compileError("unable to translate macro: undefined identifier `project_version`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:444:9
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:449:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:453:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:457:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:461:9
pub const __alloc_align = @compileError("unable to translate macro: undefined identifier `alloc_align`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:470:9
pub const __alloc_size = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:491:9
pub const __has_safe_buffers = @as(c_int, 1);
pub const __unsafe_buffer_usage = @compileError("unable to translate macro: undefined identifier `__unsafe_buffer_usage__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:572:9
pub const __unsafe_buffer_usage_begin = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:578:9
pub const __unsafe_buffer_usage_end = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:579:9
pub const __DARWIN_ONLY_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const __DARWIN_ONLY_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_UNIX03 = @as(c_int, 1);
pub const __DARWIN_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_NON_CANCELABLE = @as(c_int, 0);
pub const __DARWIN_SUF_UNIX03 = "";
pub const __DARWIN_SUF_64_BIT_INO_T = "";
pub const __DARWIN_SUF_1050 = "";
pub const __DARWIN_SUF_NON_CANCELABLE = "";
pub const __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
pub const __DARWIN_ALIAS = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:764:9
pub const __DARWIN_ALIAS_C = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:765:9
pub const __DARWIN_ALIAS_I = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:766:9
pub const __DARWIN_NOCANCEL = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:767:9
pub const __DARWIN_INODE64 = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:768:9
pub const __DARWIN_1050 = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:770:9
pub const __DARWIN_1050ALIAS = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:771:9
pub const __DARWIN_1050ALIAS_C = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:772:9
pub const __DARWIN_1050ALIAS_I = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:773:9
pub const __DARWIN_1050INODE64 = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:774:9
pub const __DARWIN_EXTSN = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:776:9
pub const __DARWIN_EXTSN_C = @compileError("unable to translate C expr: unexpected token '__asm'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:777:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:35:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:41:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:47:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:53:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:59:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:65:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:71:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:77:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:83:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:89:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:95:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:101:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:107:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:113:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:119:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:125:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:131:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:137:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:143:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:149:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:155:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:161:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:167:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:173:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:179:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:185:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:191:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:197:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:203:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:209:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:215:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:221:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:227:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:233:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:239:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:245:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:251:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:257:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:263:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:269:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:275:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:281:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:287:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:293:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_5 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:299:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_6 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:305:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_7 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:311:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:317:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:323:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:329:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:335:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_5 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:341:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:347:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_6 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:359:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_7 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:365:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_8 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:371:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:377:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:383:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:389:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:395:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:401:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_5 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:407:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_6 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:413:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_7 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:419:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_8 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:425:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:431:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:437:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:443:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:449:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:455:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_5 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:461:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_6 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:467:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_7 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:473:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:479:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:485:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:491:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:497:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:503:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_5 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:509:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_6 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:515:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_7 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:521:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_18_0 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:527:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_18_1 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:533:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_18_2 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:539:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_18_3 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:545:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_18_4 = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_symbol_aliasing.h:551:9
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_16(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_7(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_7(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_7(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_15_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_15_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_15_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_15_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_15_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const __DARWIN_ALIAS_STARTING = @compileError("unable to translate macro: undefined identifier `__DARWIN_ALIAS_STARTING_MAC_`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:787:9
pub const ___POSIX_C_DEPRECATED_STARTING_198808L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199009L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199209L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199309L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199506L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200112L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200809L = "";
pub const __POSIX_C_DEPRECATED = @compileError("unable to translate macro: undefined identifier `___POSIX_C_DEPRECATED_STARTING_`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:850:9
pub const __DARWIN_C_ANSI = @as(c_long, 0o10000);
pub const __DARWIN_C_FULL = @as(c_long, 900000);
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const __STDC_WANT_LIB_EXT1__ = @as(c_int, 1);
pub const __DARWIN_NO_LONG_LONG = @as(c_int, 0);
pub const _DARWIN_FEATURE_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_VERS_1050 = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = @as(c_int, 3);
pub const __CAST_AWAY_QUALIFIER = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:948:9
pub const __XNU_PRIVATE_EXTERN = @compileError("unable to translate macro: undefined identifier `visibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:962:9
pub const __has_ptrcheck = @as(c_int, 0);
pub const __single = "";
pub const __unsafe_indexable = "";
pub const __counted_by = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:981:9
pub const __counted_by_or_null = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:982:9
pub const __sized_by = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:983:9
pub const __sized_by_or_null = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:984:9
pub const __ended_by = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:985:9
pub const __terminated_by = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:986:9
pub const __null_terminated = "";
pub const __ptrcheck_abi_assume_single = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:996:9
pub const __ptrcheck_abi_assume_unsafe_indexable = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:997:9
pub inline fn __unsafe_forge_bidi_indexable(T: anytype, P: anytype, S: anytype) @TypeOf(T(P)) {
    _ = &T;
    _ = &P;
    _ = &S;
    return T(P);
}
pub const __unsafe_forge_single = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn __unsafe_forge_terminated_by(T: anytype, P: anytype, E: anytype) @TypeOf(T(P)) {
    _ = &T;
    _ = &P;
    _ = &E;
    return T(P);
}
pub const __unsafe_forge_null_terminated = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn __terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __unsafe_terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __unsafe_null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub const __unsafe_terminated_by_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1008:9
pub const __unsafe_null_terminated_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1009:9
pub const __array_decay_dicards_count_in_parameters = "";
pub const __unsafe_late_const = "";
pub const __ptrcheck_unavailable = "";
pub const __ptrcheck_unavailable_r = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1018:9
pub const __ASSUME_PTR_ABI_SINGLE_BEGIN = __ptrcheck_abi_assume_single();
pub const __ASSUME_PTR_ABI_SINGLE_END = __ptrcheck_abi_assume_unsafe_indexable();
pub const __header_indexable = "";
pub const __header_bidi_indexable = "";
pub const __compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1047:9
pub const __enum_open = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1050:9
pub const __enum_closed = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1051:9
pub const __enum_options = @compileError("unable to translate macro: undefined identifier `__flag_enum__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1058:9
pub const __enum_decl = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1071:9
pub const __enum_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1073:9
pub const __options_decl = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1075:9
pub const __options_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/cdefs.h:1077:9
pub const __kernel_ptr_semantics = "";
pub const __kernel_data_semantics = "";
pub const __kernel_dual_semantics = "";
pub const __xnu_data_size = "";
pub const __xnu_returns_data_pointer = "";
pub const _BSD_MACHINE__TYPES_H_ = "";
pub const _BSD_ARM__TYPES_H_ = "";
pub const USE_CLANG_TYPES = @as(c_int, 0);
pub const __DARWIN_NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _SYS__PTHREAD_TYPES_H_ = "";
pub const __PTHREAD_SIZE__ = @as(c_int, 8176);
pub const __PTHREAD_ATTR_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_MUTEXATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_MUTEX_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_CONDATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_COND_SIZE__ = @as(c_int, 40);
pub const __PTHREAD_ONCE_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_RWLOCK_SIZE__ = @as(c_int, 192);
pub const __PTHREAD_RWLOCKATTR_SIZE__ = @as(c_int, 16);
pub const __offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_types.h:97:9
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const _INTMAX_T = "";
pub const _UINTMAX_T = "";
pub inline fn INT8_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn INT16_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn INT32_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn UINT16_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -INT32_MAX - @as(c_int, 1);
pub const INT64_MIN = -INT64_MAX - @as(c_int, 1);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = @as(c_ulonglong, 18446744073709551615);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INTPTR_MIN = -INTPTR_MAX - @as(c_int, 1);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MAX = INTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = UINTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTMAX_MIN = -INTMAX_MAX - @as(c_int, 1);
pub const PTRDIFF_MIN = INTMAX_MIN;
pub const PTRDIFF_MAX = INTMAX_MAX;
pub const SIZE_MAX = UINTPTR_MAX;
pub const RSIZE_MAX = SIZE_MAX >> @as(c_int, 1);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = -WCHAR_MAX - @as(c_int, 1);
pub const WINT_MIN = INT32_MIN;
pub const WINT_MAX = INT32_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const _Block_H_ = "";
pub const BLOCK_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Block.h:17:16
pub const Block_copy = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Block.h:52:9
pub const Block_release = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/Block.h:53:9
pub const __MACTYPES__ = "";
pub const __CONDITIONALMACROS__ = "";
pub const UNIVERSAL_INTERFACES_VERSION = @as(c_int, 0x0400);
pub const PRAGMA_IMPORT = @as(c_int, 0);
pub const PRAGMA_ONCE = @as(c_int, 0);
pub const PRAGMA_STRUCT_PACK = @as(c_int, 1);
pub const PRAGMA_STRUCT_PACKPUSH = @as(c_int, 1);
pub const PRAGMA_STRUCT_ALIGN = @as(c_int, 0);
pub const PRAGMA_ENUM_PACK = @as(c_int, 0);
pub const PRAGMA_ENUM_ALWAYSINT = @as(c_int, 0);
pub const PRAGMA_ENUM_OPTIONS = @as(c_int, 0);
pub inline fn FOUR_CHAR_CODE(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const TYPE_EXTENDED = @as(c_int, 0);
pub const TYPE_LONGDOUBLE_IS_DOUBLE = @as(c_int, 0);
pub const TYPE_LONGLONG = @as(c_int, 1);
pub const FUNCTION_PASCAL = @as(c_int, 0);
pub const FUNCTION_DECLSPEC = @as(c_int, 0);
pub const FUNCTION_WIN32CC = @as(c_int, 0);
pub const EXTERN_API = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:367:13
pub const EXTERN_API_C = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:368:13
pub const EXTERN_API_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:369:13
pub const EXTERN_API_C_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:370:13
pub inline fn DEFINE_API(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_C(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_STDCALL(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_C_STDCALL(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn CALLBACK_API(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub const pascal = "";
pub const TARGET_API_MAC_OS8 = @as(c_int, 0);
pub const TARGET_API_MAC_CARBON = @as(c_int, 1);
pub const TARGET_API_MAC_OSX = @as(c_int, 1);
pub const TARGET_CARBON = @as(c_int, 1);
pub const PRAGMA_ALIGN_SUPPORTED = @compileError("unable to translate macro: undefined identifier `PRAGMA_ALIGN_SUPPORTED_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:478:9
pub const GENERATINGPOWERPC = @compileError("unable to translate macro: undefined identifier `GENERATINGPOWERPC_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:479:9
pub const GENERATING68K = @compileError("unable to translate macro: undefined identifier `GENERATING68K_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:480:9
pub const GENERATING68881 = @compileError("unable to translate macro: undefined identifier `GENERATING68881_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:481:9
pub const GENERATINGCFM = @compileError("unable to translate macro: undefined identifier `GENERATINGCFM_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:482:9
pub const CFMSYSTEMCALLS = @compileError("unable to translate macro: undefined identifier `CFMSYSTEMCALLS_is_obsolete`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:483:9
pub const OLDROUTINENAMES = @as(c_int, 0);
pub const ONEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:535:11
pub const TWOWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:536:11
pub const THREEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:537:12
pub const FOURWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:538:11
pub const FIVEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:539:13
pub const SIXWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:540:10
pub const SEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:541:12
pub const EIGHTWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:542:11
pub const NINEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:543:12
pub const TENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:544:10
pub const ELEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:545:11
pub const TWELVEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/ConditionalMacros.h:546:12
pub const OPAQUE_TOOLBOX_STRUCTS = @as(c_int, 1);
pub const OPAQUE_UPP_TYPES = @as(c_int, 1);
pub const ACCESSOR_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const CALL_NOT_IN_CARBON = @as(c_int, 0);
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const _SYS_TYPES_H_ = "";
pub const __SYS_APPLEAPIOPTS_H__ = "";
pub const __APPLE_API_STANDARD = "";
pub const __APPLE_API_STABLE = "";
pub const __APPLE_API_EVOLVING = "";
pub const __APPLE_API_UNSTABLE = "";
pub const __APPLE_API_PRIVATE = "";
pub const __APPLE_API_OBSOLETE = "";
pub const _BSD_MACHINE_TYPES_H_ = "";
pub const _ARM_MACHTYPES_H_ = "";
pub const _MACHTYPES_H_ = "";
pub const _U_INT8_T = "";
pub const _U_INT16_T = "";
pub const _U_INT32_T = "";
pub const _U_INT64_T = "";
pub const USER_ADDR_NULL = @import("std").zig.c_translation.cast(user_addr_t, @as(c_int, 0));
pub inline fn CAST_USER_ADDR_T(a_ptr: anytype) user_addr_t {
    _ = &a_ptr;
    return @import("std").zig.c_translation.cast(user_addr_t, @import("std").zig.c_translation.cast(usize, a_ptr));
}
pub const _BSD_MACHINE_ENDIAN_H_ = "";
pub const _ARM__ENDIAN_H_ = "";
pub const _QUAD_HIGHWORD = @as(c_int, 1);
pub const _QUAD_LOWWORD = @as(c_int, 0);
pub const _SYS__ENDIAN_H_ = "";
pub const _BSD_MACHINE__ENDIAN_H_ = "";
pub const _ARM___ENDIAN_H_ = "";
pub const _SYS___ENDIAN_H_ = "";
pub const __DARWIN_LITTLE_ENDIAN = @as(c_int, 1234);
pub const __DARWIN_BIG_ENDIAN = @as(c_int, 4321);
pub const __DARWIN_PDP_ENDIAN = @as(c_int, 3412);
pub const LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
pub const BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
pub const PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
pub const __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
pub const BYTE_ORDER = __DARWIN_BYTE_ORDER;
pub const _OS__OSBYTEORDER_H = "";
pub inline fn __DARWIN_OSSwapConstInt16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0xff00)) >> @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0x00ff)) << @as(c_int, 8)));
}
pub inline fn __DARWIN_OSSwapConstInt32(x: anytype) __uint32_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint32_t, ((((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x000000ff)) << @as(c_int, 24)));
}
pub inline fn __DARWIN_OSSwapConstInt64(x: anytype) __uint64_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint64_t, ((((((((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56)));
}
pub const _OS__OSBYTEORDERARM_H = "";
pub const __DARWIN_OS_INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/libkern/arm/_OSByteOrder.h:38:17
pub inline fn __DARWIN_OSSwapInt16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt16(x) else _OSSwapInt16(x));
}
pub inline fn __DARWIN_OSSwapInt32(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x)) {
    _ = &x;
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x);
}
pub inline fn __DARWIN_OSSwapInt64(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x)) {
    _ = &x;
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x);
}
pub inline fn ntohs(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn htons(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn ntohl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn htonl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn ntohll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn htonll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub const NTOHL = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:144:9
pub const NTOHS = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:145:9
pub const NTOHLL = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:146:9
pub const HTONL = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:147:9
pub const HTONS = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:148:9
pub const HTONLL = @compileError("unable to translate C expr: unexpected token '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_endian.h:149:9
pub const _U_CHAR = "";
pub const _U_SHORT = "";
pub const _U_INT = "";
pub const _U_LONG = "";
pub const __DARWIN_UINT = "";
pub const _CADDR_T = "";
pub const _DEV_T = "";
pub const _BLKCNT_T = "";
pub const _BLKSIZE_T = "";
pub const _GID_T = "";
pub const _IN_ADDR_T = "";
pub const _IN_PORT_T = "";
pub const _INO_T = "";
pub const _INO64_T = "";
pub const _KEY_T = "";
pub const _MODE_T = "";
pub const _NLINK_T = "";
pub const _ID_T = "";
pub const _PID_T = "";
pub const _OFF_T = "";
pub const _UID_T = "";
pub inline fn major(x: anytype) i32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(i32, (@import("std").zig.c_translation.cast(u_int32_t, x) >> @as(c_int, 24)) & @as(c_int, 0xff));
}
pub inline fn minor(x: anytype) i32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(i32, x & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff, .hex));
}
pub inline fn makedev(x: anytype, y: anytype) dev_t {
    _ = &x;
    _ = &y;
    return @import("std").zig.c_translation.cast(dev_t, (x << @as(c_int, 24)) | y);
}
pub const _CLOCK_T = "";
pub const USE_CLANG_STDDEF = @as(c_int, 0);
pub const _SSIZE_T = "";
pub const _TIME_T = "";
pub const _USECONDS_T = "";
pub const _SUSECONDS_T = "";
pub const _RSIZE_T = "";
pub const _ERRNO_T = "";
pub const _FD_SET = "";
pub const __DARWIN_FD_SETSIZE = @as(c_int, 1024);
pub const __DARWIN_NBBY = @as(c_int, 8);
pub const __DARWIN_NFDBITS = @import("std").zig.c_translation.sizeof(__int32_t) * __DARWIN_NBBY;
pub inline fn __DARWIN_howmany(x: anytype, y: anytype) @TypeOf(if (@import("std").zig.c_translation.MacroArithmetic.rem(x, y) == @as(c_int, 0)) @import("std").zig.c_translation.MacroArithmetic.div(x, y) else @import("std").zig.c_translation.MacroArithmetic.div(x, y) + @as(c_int, 1)) {
    _ = &x;
    _ = &y;
    return if (@import("std").zig.c_translation.MacroArithmetic.rem(x, y) == @as(c_int, 0)) @import("std").zig.c_translation.MacroArithmetic.div(x, y) else @import("std").zig.c_translation.MacroArithmetic.div(x, y) + @as(c_int, 1);
}
pub inline fn __DARWIN_FD_SET(n: anytype, p: anytype) @TypeOf(__darwin_fd_set(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_set(n, p);
}
pub inline fn __DARWIN_FD_CLR(n: anytype, p: anytype) @TypeOf(__darwin_fd_clr(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_clr(n, p);
}
pub inline fn __DARWIN_FD_ISSET(n: anytype, p: anytype) @TypeOf(__darwin_fd_isset(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_isset(n, p);
}
pub const __DARWIN_FD_ZERO = @compileError("unable to translate macro: undefined identifier `__builtin_bzero`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_types/_fd_def.h:115:9
pub const __DARWIN_FD_COPY = @compileError("unable to translate C expr: unexpected token '*'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_types/_fd_def.h:120:9
pub const NBBY = __DARWIN_NBBY;
pub const NFDBITS = __DARWIN_NFDBITS;
pub inline fn howmany(x: anytype, y: anytype) @TypeOf(__DARWIN_howmany(x, y)) {
    _ = &x;
    _ = &y;
    return __DARWIN_howmany(x, y);
}
pub const FD_SETSIZE = __DARWIN_FD_SETSIZE;
pub inline fn FD_SET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_SET(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_SET(n, p);
}
pub inline fn FD_CLR(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_CLR(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_CLR(n, p);
}
pub inline fn FD_ZERO(p: anytype) @TypeOf(__DARWIN_FD_ZERO(p)) {
    _ = &p;
    return __DARWIN_FD_ZERO(p);
}
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_ISSET(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_ISSET(n, p);
}
pub inline fn FD_COPY(f: anytype, t: anytype) @TypeOf(__DARWIN_FD_COPY(f, t)) {
    _ = &f;
    _ = &t;
    return __DARWIN_FD_COPY(f, t);
}
pub const _PTHREAD_ATTR_T = "";
pub const _PTHREAD_COND_T = "";
pub const _PTHREAD_CONDATTR_T = "";
pub const _PTHREAD_MUTEX_T = "";
pub const _PTHREAD_MUTEXATTR_T = "";
pub const _PTHREAD_ONCE_T = "";
pub const _PTHREAD_RWLOCK_T = "";
pub const _PTHREAD_RWLOCKATTR_T = "";
pub const _PTHREAD_T = "";
pub const _PTHREAD_KEY_T = "";
pub const _FSBLKCNT_T = "";
pub const _FSFILCNT_T = "";
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY = @as(c_int, 0);
pub const ALLOW_OBSOLETE_CARBON_OSUTILS = @as(c_int, 0);
pub const nil = __DARWIN_NULL;
pub const kInvalidID = @as(c_int, 0);
pub const StrLength = @compileError("unable to translate C expr: unexpected token 'const'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/MacTypes.h:509:9
pub const _CF_TYPED_ALLOC = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:100:9
pub const CF_HAS_TYPED_ALLOCATOR = @as(c_int, 0);
pub const CF_EXTERN_C_BEGIN = "";
pub const CF_EXTERN_C_END = "";
pub const CF_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:169:9
pub const TRUE = @as(c_int, 1);
pub const FALSE = @as(c_int, 0);
pub const CF_INLINE = @compileError("unable to translate macro: undefined identifier `always_inline`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:192:17
pub const CF_RETURNS_RETAINED = @compileError("unable to translate macro: undefined identifier `cf_returns_retained`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:208:9
pub const CF_RETURNS_NOT_RETAINED = @compileError("unable to translate macro: undefined identifier `cf_returns_not_retained`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:218:9
pub const CF_RELEASES_ARGUMENT = @compileError("unable to translate macro: undefined identifier `cf_consumed`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:227:9
pub const CF_CONSUMED = @compileError("unable to translate macro: undefined identifier `cf_consumed`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:236:9
pub const CF_AUTOMATED_REFCOUNT_UNAVAILABLE = "";
pub const CF_IMPLICIT_BRIDGING_ENABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:251:9
pub const CF_IMPLICIT_BRIDGING_DISABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:259:9
pub const CF_BRIDGED_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:284:9
pub const CF_BRIDGED_MUTABLE_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge_mutable`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:285:9
pub const CF_RELATED_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge_related`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:286:9
pub const CF_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:295:9
pub const CF_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:296:9
pub const CF_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `swift_private`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:317:10
pub const CF_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `swift_name`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:324:10
pub const CF_SWIFT_UNAVAILABLE_FROM_ASYNC = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:330:11
pub const CF_NOESCAPE = @compileError("unable to translate macro: undefined identifier `noescape`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:336:9
pub const CF_NO_TAIL_CALL = @compileError("unable to translate macro: undefined identifier `not_tail_called`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:342:9
pub const CF_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `warn_unused_result`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:348:9
pub const CF_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `fallthrough`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:354:9
pub const __covariant = "";
pub const __contravariant = "";
pub const kCFCoreFoundationVersionNumber10_0 = @as(f64, 196.40);
pub const kCFCoreFoundationVersionNumber10_0_3 = @as(f64, 196.50);
pub const kCFCoreFoundationVersionNumber10_1 = @as(f64, 226.00);
pub const kCFCoreFoundationVersionNumber10_1_1 = @as(f64, 226.00);
pub const kCFCoreFoundationVersionNumber10_1_2 = @as(f64, 227.20);
pub const kCFCoreFoundationVersionNumber10_1_3 = @as(f64, 227.20);
pub const kCFCoreFoundationVersionNumber10_1_4 = @as(f64, 227.30);
pub const kCFCoreFoundationVersionNumber10_2 = @as(f64, 263.00);
pub const kCFCoreFoundationVersionNumber10_2_1 = @as(f64, 263.10);
pub const kCFCoreFoundationVersionNumber10_2_2 = @as(f64, 263.10);
pub const kCFCoreFoundationVersionNumber10_2_3 = @as(f64, 263.30);
pub const kCFCoreFoundationVersionNumber10_2_4 = @as(f64, 263.30);
pub const kCFCoreFoundationVersionNumber10_2_5 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_6 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_7 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_8 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_3 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_1 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_2 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_3 = @as(f64, 299.30);
pub const kCFCoreFoundationVersionNumber10_3_4 = @as(f64, 299.31);
pub const kCFCoreFoundationVersionNumber10_3_5 = @as(f64, 299.31);
pub const kCFCoreFoundationVersionNumber10_3_6 = @as(f64, 299.32);
pub const kCFCoreFoundationVersionNumber10_3_7 = @as(f64, 299.33);
pub const kCFCoreFoundationVersionNumber10_3_8 = @as(f64, 299.33);
pub const kCFCoreFoundationVersionNumber10_3_9 = @as(f64, 299.35);
pub const kCFCoreFoundationVersionNumber10_4 = @as(f64, 368.00);
pub const kCFCoreFoundationVersionNumber10_4_1 = @as(f64, 368.10);
pub const kCFCoreFoundationVersionNumber10_4_2 = @as(f64, 368.11);
pub const kCFCoreFoundationVersionNumber10_4_3 = @as(f64, 368.18);
pub const kCFCoreFoundationVersionNumber10_4_4_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_5_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_6_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_7 = @as(f64, 368.27);
pub const kCFCoreFoundationVersionNumber10_4_8 = @as(f64, 368.27);
pub const kCFCoreFoundationVersionNumber10_4_9 = @as(f64, 368.28);
pub const kCFCoreFoundationVersionNumber10_4_10 = @as(f64, 368.28);
pub const kCFCoreFoundationVersionNumber10_4_11 = @as(f64, 368.31);
pub const kCFCoreFoundationVersionNumber10_5 = @as(f64, 476.00);
pub const kCFCoreFoundationVersionNumber10_5_1 = @as(f64, 476.00);
pub const kCFCoreFoundationVersionNumber10_5_2 = @as(f64, 476.10);
pub const kCFCoreFoundationVersionNumber10_5_3 = @as(f64, 476.13);
pub const kCFCoreFoundationVersionNumber10_5_4 = @as(f64, 476.14);
pub const kCFCoreFoundationVersionNumber10_5_5 = @as(f64, 476.15);
pub const kCFCoreFoundationVersionNumber10_5_6 = @as(f64, 476.17);
pub const kCFCoreFoundationVersionNumber10_5_7 = @as(f64, 476.18);
pub const kCFCoreFoundationVersionNumber10_5_8 = @as(f64, 476.19);
pub const kCFCoreFoundationVersionNumber10_6 = @as(f64, 550.00);
pub const kCFCoreFoundationVersionNumber10_6_1 = @as(f64, 550.00);
pub const kCFCoreFoundationVersionNumber10_6_2 = @as(f64, 550.13);
pub const kCFCoreFoundationVersionNumber10_6_3 = @as(f64, 550.19);
pub const kCFCoreFoundationVersionNumber10_6_4 = @as(f64, 550.29);
pub const kCFCoreFoundationVersionNumber10_6_5 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_6 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_7 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_8 = @as(f64, 550.43);
pub const kCFCoreFoundationVersionNumber10_7 = @as(f64, 635.00);
pub const kCFCoreFoundationVersionNumber10_7_1 = @as(f64, 635.00);
pub const kCFCoreFoundationVersionNumber10_7_2 = @as(f64, 635.15);
pub const kCFCoreFoundationVersionNumber10_7_3 = @as(f64, 635.19);
pub const kCFCoreFoundationVersionNumber10_7_4 = @as(f64, 635.21);
pub const kCFCoreFoundationVersionNumber10_7_5 = @as(f64, 635.21);
pub const kCFCoreFoundationVersionNumber10_8 = @as(f64, 744.00);
pub const kCFCoreFoundationVersionNumber10_8_1 = @as(f64, 744.00);
pub const kCFCoreFoundationVersionNumber10_8_2 = @as(f64, 744.12);
pub const kCFCoreFoundationVersionNumber10_8_3 = @as(f64, 744.18);
pub const kCFCoreFoundationVersionNumber10_8_4 = @as(f64, 744.19);
pub const kCFCoreFoundationVersionNumber10_9 = @as(f64, 855.11);
pub const kCFCoreFoundationVersionNumber10_9_1 = @as(f64, 855.11);
pub const kCFCoreFoundationVersionNumber10_9_2 = @as(f64, 855.14);
pub const kCFCoreFoundationVersionNumber10_10 = @as(f64, 1151.16);
pub const kCFCoreFoundationVersionNumber10_10_1 = @as(f64, 1151.16);
pub const kCFCoreFoundationVersionNumber10_10_2 = @as(c_int, 1152);
pub const kCFCoreFoundationVersionNumber10_10_3 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_4 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_5 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_Max = @as(c_int, 1199);
pub const kCFCoreFoundationVersionNumber10_11 = @as(c_int, 1253);
pub const kCFCoreFoundationVersionNumber10_11_1 = @as(f64, 1255.1);
pub const kCFCoreFoundationVersionNumber10_11_2 = @as(f64, 1256.14);
pub const kCFCoreFoundationVersionNumber10_11_3 = @as(f64, 1256.14);
pub const kCFCoreFoundationVersionNumber10_11_4 = @as(f64, 1258.1);
pub const kCFCoreFoundationVersionNumber10_11_Max = @as(c_int, 1299);
pub const __PTRAUTH_H = "";
pub const ptrauth_strip = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:264:9
pub const ptrauth_blend_discriminator = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:270:9
pub const ptrauth_sign_constant = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:277:9
pub const ptrauth_sign_unauthenticated = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:284:9
pub const ptrauth_auth_and_resign = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:291:9
pub const ptrauth_auth_function = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:301:9
pub const ptrauth_auth_data = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:308:9
pub const ptrauth_string_discriminator = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:315:9
pub inline fn ptrauth_type_discriminator(__type: anytype) ptrauth_extra_data_t {
    _ = &__type;
    return @import("std").zig.c_translation.cast(ptrauth_extra_data_t, @as(c_int, 0));
}
pub const ptrauth_sign_generic_data = @compileError("unable to translate C expr: unexpected token '{'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:323:9
pub const ptrauth_cxx_vtable_pointer = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/ptrauth.h:331:9
pub const __ptrauth_objc_isa_pointer = "";
pub const ISA_PTRAUTH_DISCRIMINATOR = @as(c_int, 0x6AE1);
pub const __ptrauth_cf_objc_isa_pointer = "";
pub const CA_CANONICAL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreAudioTypes.framework/Headers/CoreAudioBaseTypes.h:29:13
pub inline fn TestAudioFormatNativeEndian(f: anytype) @TypeOf((f.mFormatID == kAudioFormatLinearPCM) and ((f.mFormatFlags & kAudioFormatFlagIsBigEndian) == kAudioFormatFlagsNativeEndian)) {
    _ = &f;
    return (f.mFormatID == kAudioFormatLinearPCM) and ((f.mFormatFlags & kAudioFormatFlagIsBigEndian) == kAudioFormatFlagsNativeEndian);
}
pub const __SMPTETime__ = "";
pub const CoreAudioTypes_AudioSessionTypes_h = "";
pub const __COREFOUNDATION_COREFOUNDATION__ = @as(c_int, 1);
pub const __COREFOUNDATION__ = @as(c_int, 1);
pub const __need___va_list = "";
pub const __need_va_list = "";
pub const __need_va_arg = "";
pub const __need___va_copy = "";
pub const __need_va_copy = "";
pub const __STDARG_H = "";
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST = "";
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stdarg_va_arg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stdarg_va_arg.h:19:9
pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stdarg_va_arg.h:20:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stdarg___va_copy.h:11:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /Users/Omar/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig/aarch64-macos-0.15.0-dev.828+3ce8d19f7/lib/include/__stdarg_va_copy.h:11:9
pub const __ASSERT_H_ = "";
pub const _LIBC_BOUNDS_H_ = "";
pub const _LIBC_COUNT = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:47:9
pub const _LIBC_COUNT_OR_NULL = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:48:9
pub const _LIBC_SIZE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:49:9
pub const _LIBC_SIZE_OR_NULL = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:50:9
pub const _LIBC_ENDED_BY = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:51:9
pub const _LIBC_SINGLE = "";
pub const _LIBC_UNSAFE_INDEXABLE = "";
pub const _LIBC_CSTR = "";
pub const _LIBC_NULL_TERMINATED = "";
pub inline fn _LIBC_FLEX_COUNT(FIELD: anytype, INTCOUNT: anytype) @TypeOf(INTCOUNT) {
    _ = &FIELD;
    _ = &INTCOUNT;
    return INTCOUNT;
}
pub const _LIBC_SINGLE_BY_DEFAULT = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:58:9
pub const _LIBC_PTRCHECK_REPLACED = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_bounds.h:59:9
pub const __assert = @compileError("unable to translate C expr: unexpected token 'const'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_assert.h:74:9
pub const __ASSERT_FILE_NAME = @compileError("unable to translate macro: undefined identifier `__FILE_NAME__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/assert.h:61:9
pub const assert = @compileError("unable to translate macro: undefined identifier `__LINE__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/assert.h:74:9
pub const _ASSERT_H_ = "";
pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_static_assert.h:29:9
pub const _CTYPE_H_ = "";
pub const __CTYPE_H_ = "";
pub const _RUNETYPE_H_ = "";
pub const __TYPES_H_ = "";
pub const __strfmonlike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_types.h:34:9
pub const __strftimelike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_types.h:36:9
pub const __DARWIN_WCHAR_MAX = __WCHAR_MAX__;
pub const __DARWIN_WCHAR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex) - @as(c_int, 1);
pub const __DARWIN_WEOF = @import("std").zig.c_translation.cast(__darwin_wint_t, -@as(c_int, 1));
pub const _FORTIFY_SOURCE = @as(c_int, 2);
pub const _CT_RUNE_T = "";
pub const _RUNE_T = "";
pub const _WINT_T = "";
pub const _CACHED_RUNES = @as(c_int, 1) << @as(c_int, 8);
pub const _CRMASK = ~(_CACHED_RUNES - @as(c_int, 1));
pub const _RUNE_MAGIC_A = "RuneMagA";
pub const _CTYPE_A = @as(c_long, 0x00000100);
pub const _CTYPE_C = @as(c_long, 0x00000200);
pub const _CTYPE_D = @as(c_long, 0x00000400);
pub const _CTYPE_G = @as(c_long, 0x00000800);
pub const _CTYPE_L = @as(c_long, 0x00001000);
pub const _CTYPE_P = @as(c_long, 0x00002000);
pub const _CTYPE_S = @as(c_long, 0x00004000);
pub const _CTYPE_U = @as(c_long, 0x00008000);
pub const _CTYPE_X = @as(c_long, 0x00010000);
pub const _CTYPE_B = @as(c_long, 0x00020000);
pub const _CTYPE_R = @as(c_long, 0x00040000);
pub const _CTYPE_I = @as(c_long, 0x00080000);
pub const _CTYPE_T = @as(c_long, 0x00100000);
pub const _CTYPE_Q = @as(c_long, 0x00200000);
pub const _CTYPE_SW0 = @as(c_long, 0x20000000);
pub const _CTYPE_SW1 = @as(c_long, 0x40000000);
pub const _CTYPE_SW2 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x80000000, .hex);
pub const _CTYPE_SW3 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xc0000000, .hex);
pub const _CTYPE_SWM = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xe0000000, .hex);
pub const _CTYPE_SWS = @as(c_int, 30);
pub const __DARWIN_CTYPE_inline = __header_inline;
pub const __DARWIN_CTYPE_TOP_inline = __header_inline;
pub inline fn _tolower(c: anytype) @TypeOf(__tolower(c)) {
    _ = &c;
    return __tolower(c);
}
pub inline fn _toupper(c: anytype) @TypeOf(__toupper(c)) {
    _ = &c;
    return __toupper(c);
}
pub const _SYS_ERRNO_H_ = "";
pub const errno = __error().*;
pub const EPERM = @as(c_int, 1);
pub const ENOENT = @as(c_int, 2);
pub const ESRCH = @as(c_int, 3);
pub const EINTR = @as(c_int, 4);
pub const EIO = @as(c_int, 5);
pub const ENXIO = @as(c_int, 6);
pub const E2BIG = @as(c_int, 7);
pub const ENOEXEC = @as(c_int, 8);
pub const EBADF = @as(c_int, 9);
pub const ECHILD = @as(c_int, 10);
pub const EDEADLK = @as(c_int, 11);
pub const ENOMEM = @as(c_int, 12);
pub const EACCES = @as(c_int, 13);
pub const EFAULT = @as(c_int, 14);
pub const ENOTBLK = @as(c_int, 15);
pub const EBUSY = @as(c_int, 16);
pub const EEXIST = @as(c_int, 17);
pub const EXDEV = @as(c_int, 18);
pub const ENODEV = @as(c_int, 19);
pub const ENOTDIR = @as(c_int, 20);
pub const EISDIR = @as(c_int, 21);
pub const EINVAL = @as(c_int, 22);
pub const ENFILE = @as(c_int, 23);
pub const EMFILE = @as(c_int, 24);
pub const ENOTTY = @as(c_int, 25);
pub const ETXTBSY = @as(c_int, 26);
pub const EFBIG = @as(c_int, 27);
pub const ENOSPC = @as(c_int, 28);
pub const ESPIPE = @as(c_int, 29);
pub const EROFS = @as(c_int, 30);
pub const EMLINK = @as(c_int, 31);
pub const EPIPE = @as(c_int, 32);
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const EAGAIN = @as(c_int, 35);
pub const EWOULDBLOCK = EAGAIN;
pub const EINPROGRESS = @as(c_int, 36);
pub const EALREADY = @as(c_int, 37);
pub const ENOTSOCK = @as(c_int, 38);
pub const EDESTADDRREQ = @as(c_int, 39);
pub const EMSGSIZE = @as(c_int, 40);
pub const EPROTOTYPE = @as(c_int, 41);
pub const ENOPROTOOPT = @as(c_int, 42);
pub const EPROTONOSUPPORT = @as(c_int, 43);
pub const ESOCKTNOSUPPORT = @as(c_int, 44);
pub const ENOTSUP = @as(c_int, 45);
pub const EPFNOSUPPORT = @as(c_int, 46);
pub const EAFNOSUPPORT = @as(c_int, 47);
pub const EADDRINUSE = @as(c_int, 48);
pub const EADDRNOTAVAIL = @as(c_int, 49);
pub const ENETDOWN = @as(c_int, 50);
pub const ENETUNREACH = @as(c_int, 51);
pub const ENETRESET = @as(c_int, 52);
pub const ECONNABORTED = @as(c_int, 53);
pub const ECONNRESET = @as(c_int, 54);
pub const ENOBUFS = @as(c_int, 55);
pub const EISCONN = @as(c_int, 56);
pub const ENOTCONN = @as(c_int, 57);
pub const ESHUTDOWN = @as(c_int, 58);
pub const ETOOMANYREFS = @as(c_int, 59);
pub const ETIMEDOUT = @as(c_int, 60);
pub const ECONNREFUSED = @as(c_int, 61);
pub const ELOOP = @as(c_int, 62);
pub const ENAMETOOLONG = @as(c_int, 63);
pub const EHOSTDOWN = @as(c_int, 64);
pub const EHOSTUNREACH = @as(c_int, 65);
pub const ENOTEMPTY = @as(c_int, 66);
pub const EPROCLIM = @as(c_int, 67);
pub const EUSERS = @as(c_int, 68);
pub const EDQUOT = @as(c_int, 69);
pub const ESTALE = @as(c_int, 70);
pub const EREMOTE = @as(c_int, 71);
pub const EBADRPC = @as(c_int, 72);
pub const ERPCMISMATCH = @as(c_int, 73);
pub const EPROGUNAVAIL = @as(c_int, 74);
pub const EPROGMISMATCH = @as(c_int, 75);
pub const EPROCUNAVAIL = @as(c_int, 76);
pub const ENOLCK = @as(c_int, 77);
pub const ENOSYS = @as(c_int, 78);
pub const EFTYPE = @as(c_int, 79);
pub const EAUTH = @as(c_int, 80);
pub const ENEEDAUTH = @as(c_int, 81);
pub const EPWROFF = @as(c_int, 82);
pub const EDEVERR = @as(c_int, 83);
pub const EOVERFLOW = @as(c_int, 84);
pub const EBADEXEC = @as(c_int, 85);
pub const EBADARCH = @as(c_int, 86);
pub const ESHLIBVERS = @as(c_int, 87);
pub const EBADMACHO = @as(c_int, 88);
pub const ECANCELED = @as(c_int, 89);
pub const EIDRM = @as(c_int, 90);
pub const ENOMSG = @as(c_int, 91);
pub const EILSEQ = @as(c_int, 92);
pub const ENOATTR = @as(c_int, 93);
pub const EBADMSG = @as(c_int, 94);
pub const EMULTIHOP = @as(c_int, 95);
pub const ENODATA = @as(c_int, 96);
pub const ENOLINK = @as(c_int, 97);
pub const ENOSR = @as(c_int, 98);
pub const ENOSTR = @as(c_int, 99);
pub const EPROTO = @as(c_int, 100);
pub const ETIME = @as(c_int, 101);
pub const EOPNOTSUPP = @as(c_int, 102);
pub const ENOPOLICY = @as(c_int, 103);
pub const ENOTRECOVERABLE = @as(c_int, 104);
pub const EOWNERDEAD = @as(c_int, 105);
pub const EQFULL = @as(c_int, 106);
pub const ELAST = @as(c_int, 106);
pub const __CLANG_FLOAT_H = "";
pub const _FLOAT_H_ = "";
pub const __FLOAT_H = "";
pub const FLT_EVAL_METHOD = @compileError("unable to translate macro: undefined identifier `__FLT_EVAL_METHOD__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/float.h:84:9
pub const FLT_ROUNDS = @compileError("unable to translate macro: undefined identifier `__builtin_flt_rounds`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/float.h:85:9
pub const FLT_RADIX = __FLT_RADIX__;
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub const FLT_DIG = __FLT_DIG__;
pub const DBL_DIG = __DBL_DIG__;
pub const LDBL_DIG = __LDBL_DIG__;
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const FLT_MAX = __FLT_MAX__;
pub const DBL_MAX = __DBL_MAX__;
pub const LDBL_MAX = __LDBL_MAX__;
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const FLT_MIN = __FLT_MIN__;
pub const DBL_MIN = __DBL_MIN__;
pub const LDBL_MIN = __LDBL_MIN__;
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const FLT_HAS_SUBNORM = @as(c_int, 1);
pub const DBL_HAS_SUBNORM = @as(c_int, 1);
pub const LDBL_HAS_SUBNORM = @as(c_int, 1);
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const INFINITY = __builtin_inff();
pub const NAN = __builtin_nanf("");
pub const FLT_NORM_MAX = __FLT_NORM_MAX__;
pub const DBL_NORM_MAX = __DBL_NORM_MAX__;
pub const LDBL_NORM_MAX = __LDBL_NORM_MAX__;
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _LIMITS_H_ = "";
pub const _BSD_MACHINE_LIMITS_H_ = "";
pub const _ARM_LIMITS_H_ = "";
pub const _ARM__LIMITS_H_ = "";
pub const __DARWIN_CLK_TCK = @as(c_int, 100);
pub const USE_CLANG_LIMITS = @as(c_int, 0);
pub const MB_LEN_MAX = @as(c_int, 6);
pub const CLK_TCK = __DARWIN_CLK_TCK;
pub const CHAR_BIT = @as(c_int, 8);
pub const SCHAR_MAX = @as(c_int, 127);
pub const SCHAR_MIN = -@as(c_int, 128);
pub const UCHAR_MAX = @as(c_int, 255);
pub const CHAR_MAX = @as(c_int, 127);
pub const CHAR_MIN = -@as(c_int, 128);
pub const USHRT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const SHRT_MAX = @as(c_int, 32767);
pub const SHRT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const UINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex);
pub const INT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const ULONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 0xffffffffffffffff, .hex);
pub const LONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hex);
pub const LONG_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hex) - @as(c_int, 1);
pub const ULLONG_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const LLONG_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const LLONG_MIN = -@as(c_longlong, 0x7fffffffffffffff) - @as(c_int, 1);
pub const LONG_BIT = @as(c_int, 64);
pub const SSIZE_MAX = LONG_MAX;
pub const WORD_BIT = @as(c_int, 32);
pub const SIZE_T_MAX = ULONG_MAX;
pub const UQUAD_MAX = ULLONG_MAX;
pub const QUAD_MAX = LLONG_MAX;
pub const QUAD_MIN = LLONG_MIN;
pub const _SYS_SYSLIMITS_H_ = "";
pub const ARG_MAX = @as(c_int, 1024) * @as(c_int, 1024);
pub const CHILD_MAX = @as(c_int, 266);
pub const GID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const LINK_MAX = @as(c_int, 32767);
pub const MAX_CANON = @as(c_int, 1024);
pub const MAX_INPUT = @as(c_int, 1024);
pub const NAME_MAX = @as(c_int, 255);
pub const NGROUPS_MAX = @as(c_int, 16);
pub const UID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const OPEN_MAX = @as(c_int, 10240);
pub const PATH_MAX = @as(c_int, 1024);
pub const PIPE_BUF = @as(c_int, 512);
pub const BC_BASE_MAX = @as(c_int, 99);
pub const BC_DIM_MAX = @as(c_int, 2048);
pub const BC_SCALE_MAX = @as(c_int, 99);
pub const BC_STRING_MAX = @as(c_int, 1000);
pub const CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const EQUIV_CLASS_MAX = @as(c_int, 2);
pub const EXPR_NEST_MAX = @as(c_int, 32);
pub const LINE_MAX = @as(c_int, 2048);
pub const RE_DUP_MAX = @as(c_int, 255);
pub const NZERO = @as(c_int, 20);
pub const _POSIX_ARG_MAX = @as(c_int, 4096);
pub const _POSIX_CHILD_MAX = @as(c_int, 25);
pub const _POSIX_LINK_MAX = @as(c_int, 8);
pub const _POSIX_MAX_CANON = @as(c_int, 255);
pub const _POSIX_MAX_INPUT = @as(c_int, 255);
pub const _POSIX_NAME_MAX = @as(c_int, 14);
pub const _POSIX_NGROUPS_MAX = @as(c_int, 8);
pub const _POSIX_OPEN_MAX = @as(c_int, 20);
pub const _POSIX_PATH_MAX = @as(c_int, 256);
pub const _POSIX_PIPE_BUF = @as(c_int, 512);
pub const _POSIX_SSIZE_MAX = @as(c_int, 32767);
pub const _POSIX_STREAM_MAX = @as(c_int, 8);
pub const _POSIX_TZNAME_MAX = @as(c_int, 6);
pub const _POSIX2_BC_BASE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_DIM_MAX = @as(c_int, 2048);
pub const _POSIX2_BC_SCALE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_STRING_MAX = @as(c_int, 1000);
pub const _POSIX2_EQUIV_CLASS_MAX = @as(c_int, 2);
pub const _POSIX2_EXPR_NEST_MAX = @as(c_int, 32);
pub const _POSIX2_LINE_MAX = @as(c_int, 2048);
pub const _POSIX2_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX_AIO_LISTIO_MAX = @as(c_int, 2);
pub const _POSIX_AIO_MAX = @as(c_int, 1);
pub const _POSIX_DELAYTIMER_MAX = @as(c_int, 32);
pub const _POSIX_MQ_OPEN_MAX = @as(c_int, 8);
pub const _POSIX_MQ_PRIO_MAX = @as(c_int, 32);
pub const _POSIX_RTSIG_MAX = @as(c_int, 8);
pub const _POSIX_SEM_NSEMS_MAX = @as(c_int, 256);
pub const _POSIX_SEM_VALUE_MAX = @as(c_int, 32767);
pub const _POSIX_SIGQUEUE_MAX = @as(c_int, 32);
pub const _POSIX_TIMER_MAX = @as(c_int, 32);
pub const _POSIX_CLOCKRES_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20000000, .decimal);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const _POSIX_THREAD_KEYS_MAX = @as(c_int, 128);
pub const _POSIX_THREAD_THREADS_MAX = @as(c_int, 64);
pub const PTHREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const PTHREAD_KEYS_MAX = @as(c_int, 512);
pub const PTHREAD_STACK_MIN = @as(c_int, 16384);
pub const _POSIX_HOST_NAME_MAX = @as(c_int, 255);
pub const _POSIX_LOGIN_NAME_MAX = @as(c_int, 9);
pub const _POSIX_SS_REPL_MAX = @as(c_int, 4);
pub const _POSIX_SYMLINK_MAX = @as(c_int, 255);
pub const _POSIX_SYMLOOP_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_EVENT_NAME_MAX = @as(c_int, 30);
pub const _POSIX_TRACE_NAME_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_SYS_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_USER_EVENT_MAX = @as(c_int, 32);
pub const _POSIX_TTY_NAME_MAX = @as(c_int, 9);
pub const _POSIX2_CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const _POSIX2_COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;
pub const OFF_MIN = LLONG_MIN;
pub const OFF_MAX = LLONG_MAX;
pub const PASS_MAX = @as(c_int, 128);
pub const NL_ARGMAX = @as(c_int, 9);
pub const NL_LANGMAX = @as(c_int, 14);
pub const NL_MSGMAX = @as(c_int, 32767);
pub const NL_NMAX = @as(c_int, 1);
pub const NL_SETMAX = @as(c_int, 255);
pub const NL_TEXTMAX = @as(c_int, 2048);
pub const _XOPEN_IOV_MAX = @as(c_int, 16);
pub const IOV_MAX = @as(c_int, 1024);
pub const _XOPEN_NAME_MAX = @as(c_int, 255);
pub const _XOPEN_PATH_MAX = @as(c_int, 1024);
pub const LONG_LONG_MAX = __LONG_LONG_MAX__;
pub const LONG_LONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const ULONG_LONG_MAX = (__LONG_LONG_MAX__ * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const _LOCALE_H_ = "";
pub const __LOCALE_H_ = "";
pub const LC_ALL_MASK = ((((LC_COLLATE_MASK | LC_CTYPE_MASK) | LC_MESSAGES_MASK) | LC_MONETARY_MASK) | LC_NUMERIC_MASK) | LC_TIME_MASK;
pub const LC_COLLATE_MASK = @as(c_int, 1) << @as(c_int, 0);
pub const LC_CTYPE_MASK = @as(c_int, 1) << @as(c_int, 1);
pub const LC_MESSAGES_MASK = @as(c_int, 1) << @as(c_int, 2);
pub const LC_MONETARY_MASK = @as(c_int, 1) << @as(c_int, 3);
pub const LC_NUMERIC_MASK = @as(c_int, 1) << @as(c_int, 4);
pub const LC_TIME_MASK = @as(c_int, 1) << @as(c_int, 5);
pub const _LC_NUM_MASK = @as(c_int, 6);
pub const _LC_LAST_MASK = @as(c_int, 1) << (_LC_NUM_MASK - @as(c_int, 1));
pub const LC_GLOBAL_LOCALE = @import("std").zig.c_translation.cast(locale_t, -@as(c_int, 1));
pub const LC_C_LOCALE = @import("std").zig.c_translation.cast(locale_t, NULL);
pub const _LOCALE_T = "";
pub const LC_ALL = @as(c_int, 0);
pub const LC_COLLATE = @as(c_int, 1);
pub const LC_CTYPE = @as(c_int, 2);
pub const LC_MONETARY = @as(c_int, 3);
pub const LC_NUMERIC = @as(c_int, 4);
pub const LC_TIME = @as(c_int, 5);
pub const LC_MESSAGES = @as(c_int, 6);
pub const _LC_LAST = @as(c_int, 7);
pub const __MATH_H__ = "";
pub const __MATH__ = "";
pub const HUGE_VAL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:63:15
pub const HUGE_VALF = __builtin_huge_valf();
pub const HUGE_VALL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:65:15
pub const FP_NAN = @as(c_int, 1);
pub const FP_INFINITE = @as(c_int, 2);
pub const FP_ZERO = @as(c_int, 3);
pub const FP_NORMAL = @as(c_int, 4);
pub const FP_SUBNORMAL = @as(c_int, 5);
pub const FP_SUPERNORMAL = @as(c_int, 6);
pub const FP_FAST_FMA = @as(c_int, 1);
pub const FP_FAST_FMAF = @as(c_int, 1);
pub const FP_FAST_FMAL = @as(c_int, 1);
pub const FP_ILOGB0 = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const FP_ILOGBNAN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const MATH_ERRNO = @as(c_int, 1);
pub const MATH_ERREXCEPT = @as(c_int, 2);
pub const math_errhandling = __math_errhandling();
pub const fpclassify = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:132:9
pub const isnormal = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:155:9
pub const isfinite = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:160:9
pub const isinf = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:165:9
pub const isnan = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:170:9
pub const signbit = @compileError("unable to translate: TODO long double");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:175:9
pub const isgreater = @compileError("unable to translate macro: undefined identifier `__builtin_isgreater`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:549:9
pub const isgreaterequal = @compileError("unable to translate macro: undefined identifier `__builtin_isgreaterequal`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:550:9
pub const isless = @compileError("unable to translate macro: undefined identifier `__builtin_isless`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:551:9
pub const islessequal = @compileError("unable to translate macro: undefined identifier `__builtin_islessequal`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:552:9
pub const islessgreater = @compileError("unable to translate macro: undefined identifier `__builtin_islessgreater`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:553:9
pub const isunordered = @compileError("unable to translate macro: undefined identifier `__builtin_isunordered`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/math.h:554:9
pub const M_E = @as(f64, 2.71828182845904523536028747135266250);
pub const M_LOG2E = @as(f64, 1.44269504088896340735992468100189214);
pub const M_LOG10E = @as(f64, 0.434294481903251827651128918916605082);
pub const M_LN2 = @as(f64, 0.693147180559945309417232121458176568);
pub const M_LN10 = @as(f64, 2.30258509299404568401799145468436421);
pub const M_PI = @as(f64, 3.14159265358979323846264338327950288);
pub const M_PI_2 = @as(f64, 1.57079632679489661923132169163975144);
pub const M_PI_4 = @as(f64, 0.785398163397448309615660845819875721);
pub const M_1_PI = @as(f64, 0.318309886183790671537767526745028724);
pub const M_2_PI = @as(f64, 0.636619772367581343075535053490057448);
pub const M_2_SQRTPI = @as(f64, 1.12837916709551257389615890312154517);
pub const M_SQRT2 = @as(f64, 1.41421356237309504880168872420969808);
pub const M_SQRT1_2 = @as(f64, 0.707106781186547524400844362104849039);
pub const MAXFLOAT = @as(f32, 0x1.fffffep+127);
pub const FP_SNAN = FP_NAN;
pub const FP_QNAN = FP_NAN;
pub const HUGE = MAXFLOAT;
pub const X_TLOSS = @as(f64, 1.41484755040568800000e+16);
pub const DOMAIN = @as(c_int, 1);
pub const SING = @as(c_int, 2);
pub const OVERFLOW = @as(c_int, 3);
pub const UNDERFLOW = @as(c_int, 4);
pub const TLOSS = @as(c_int, 5);
pub const PLOSS = @as(c_int, 6);
pub const _BSD_SETJMP_H = "";
pub const _JBLEN = ((@as(c_int, 14) + @as(c_int, 8)) + @as(c_int, 2)) * @as(c_int, 2);
pub const _USER_SIGNAL_H = "";
pub const _SYS_SIGNAL_H_ = "";
pub const __DARWIN_NSIG = @as(c_int, 32);
pub const NSIG = __DARWIN_NSIG;
pub const _BSD_MACHINE_SIGNAL_H_ = "";
pub const _ARM_SIGNAL_ = @as(c_int, 1);
pub const SIGHUP = @as(c_int, 1);
pub const SIGINT = @as(c_int, 2);
pub const SIGQUIT = @as(c_int, 3);
pub const SIGILL = @as(c_int, 4);
pub const SIGTRAP = @as(c_int, 5);
pub const SIGABRT = @as(c_int, 6);
pub const SIGIOT = SIGABRT;
pub const SIGEMT = @as(c_int, 7);
pub const SIGFPE = @as(c_int, 8);
pub const SIGKILL = @as(c_int, 9);
pub const SIGBUS = @as(c_int, 10);
pub const SIGSEGV = @as(c_int, 11);
pub const SIGSYS = @as(c_int, 12);
pub const SIGPIPE = @as(c_int, 13);
pub const SIGALRM = @as(c_int, 14);
pub const SIGTERM = @as(c_int, 15);
pub const SIGURG = @as(c_int, 16);
pub const SIGSTOP = @as(c_int, 17);
pub const SIGTSTP = @as(c_int, 18);
pub const SIGCONT = @as(c_int, 19);
pub const SIGCHLD = @as(c_int, 20);
pub const SIGTTIN = @as(c_int, 21);
pub const SIGTTOU = @as(c_int, 22);
pub const SIGIO = @as(c_int, 23);
pub const SIGXCPU = @as(c_int, 24);
pub const SIGXFSZ = @as(c_int, 25);
pub const SIGVTALRM = @as(c_int, 26);
pub const SIGPROF = @as(c_int, 27);
pub const SIGWINCH = @as(c_int, 28);
pub const SIGINFO = @as(c_int, 29);
pub const SIGUSR1 = @as(c_int, 30);
pub const SIGUSR2 = @as(c_int, 31);
pub const SIG_DFL = @compileError("unable to translate C expr: expected ')' instead got '('");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/signal.h:131:9
pub const SIG_IGN = @compileError("unable to translate C expr: expected ')' instead got '('");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/signal.h:132:9
pub const SIG_HOLD = @compileError("unable to translate C expr: expected ')' instead got '('");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/signal.h:133:9
pub const SIG_ERR = @compileError("unable to translate C expr: expected ')' instead got '('");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/signal.h:134:9
pub const _BSD_MACHINE__MCONTEXT_H_ = "";
pub const __ARM_MCONTEXT_H_ = "";
pub const _MACH_MACHINE__STRUCTS_H_ = "";
pub const _MACH_ARM__STRUCTS_H_ = "";
pub const _STRUCT_ARM_EXCEPTION_STATE = struct___darwin_arm_exception_state;
pub const _STRUCT_ARM_EXCEPTION_STATE64 = struct___darwin_arm_exception_state64;
pub const _STRUCT_ARM_EXCEPTION_STATE64_V2 = struct___darwin_arm_exception_state64_v2;
pub const _STRUCT_ARM_THREAD_STATE = struct___darwin_arm_thread_state;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64 = @as(c_int, 0);
pub const _STRUCT_ARM_THREAD_STATE64 = struct___darwin_arm_thread_state64;
pub inline fn __darwin_arm_thread_state64_get_pc(ts: anytype) @TypeOf(ts.__pc) {
    _ = &ts;
    return ts.__pc;
}
pub inline fn __darwin_arm_thread_state64_get_pc_fptr(ts: anytype) ?*anyopaque {
    _ = &ts;
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__pc));
}
pub const __darwin_arm_thread_state64_set_pc_fptr = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:436:9
pub const __darwin_arm_thread_state64_set_pc_presigned_fptr = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:439:9
pub inline fn __darwin_arm_thread_state64_get_lr(ts: anytype) @TypeOf(ts.__lr) {
    _ = &ts;
    return ts.__lr;
}
pub inline fn __darwin_arm_thread_state64_get_lr_fptr(ts: anytype) ?*anyopaque {
    _ = &ts;
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__lr));
}
pub const __darwin_arm_thread_state64_set_lr_fptr = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:448:9
pub const __darwin_arm_thread_state64_set_lr_presigned_fptr = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:451:9
pub inline fn __darwin_arm_thread_state64_get_sp(ts: anytype) @TypeOf(ts.__sp) {
    _ = &ts;
    return ts.__sp;
}
pub const __darwin_arm_thread_state64_set_sp = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:457:9
pub inline fn __darwin_arm_thread_state64_get_fp(ts: anytype) @TypeOf(ts.__fp) {
    _ = &ts;
    return ts.__fp;
}
pub const __darwin_arm_thread_state64_set_fp = @compileError("unable to translate C expr: expected ')' instead got '='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/_structs.h:463:9
pub const __darwin_arm_thread_state64_ptrauth_strip = @import("std").zig.c_translation.Macros.DISCARD;
pub const _STRUCT_ARM_VFP_STATE = struct___darwin_arm_vfp_state;
pub const _STRUCT_ARM_NEON_STATE64 = struct___darwin_arm_neon_state64;
pub const _STRUCT_ARM_NEON_STATE = struct___darwin_arm_neon_state;
pub const _STRUCT_ARM_PAGEIN_STATE = struct___arm_pagein_state;
pub const _STRUCT_ARM_SME_STATE = struct___darwin_arm_sme_state;
pub const _STRUCT_ARM_SVE_Z_STATE = struct___darwin_arm_sve_z_state;
pub const _STRUCT_ARM_SVE_P_STATE = struct___darwin_arm_sve_p_state;
pub const _STRUCT_ARM_SME_ZA_STATE = struct___darwin_arm_sme_za_state;
pub const _STRUCT_ARM_SME2_STATE = struct___darwin_arm_sme2_state;
pub const _STRUCT_ARM_LEGACY_DEBUG_STATE = struct___arm_legacy_debug_state;
pub const _STRUCT_ARM_DEBUG_STATE32 = struct___darwin_arm_debug_state32;
pub const _STRUCT_ARM_DEBUG_STATE64 = struct___darwin_arm_debug_state64;
pub const _STRUCT_ARM_CPMU_STATE64 = struct___darwin_arm_cpmu_state64;
pub const _STRUCT_MCONTEXT32 = struct___darwin_mcontext32;
pub const _STRUCT_MCONTEXT64 = struct___darwin_mcontext64;
pub const _MCONTEXT_T = "";
pub const _STRUCT_MCONTEXT = _STRUCT_MCONTEXT64;
pub const _STRUCT_SIGALTSTACK = struct___darwin_sigaltstack;
pub const _STRUCT_UCONTEXT = struct___darwin_ucontext;
pub const _SIGSET_T = "";
pub const SIGEV_NONE = @as(c_int, 0);
pub const SIGEV_SIGNAL = @as(c_int, 1);
pub const SIGEV_THREAD = @as(c_int, 3);
pub const ILL_NOOP = @as(c_int, 0);
pub const ILL_ILLOPC = @as(c_int, 1);
pub const ILL_ILLTRP = @as(c_int, 2);
pub const ILL_PRVOPC = @as(c_int, 3);
pub const ILL_ILLOPN = @as(c_int, 4);
pub const ILL_ILLADR = @as(c_int, 5);
pub const ILL_PRVREG = @as(c_int, 6);
pub const ILL_COPROC = @as(c_int, 7);
pub const ILL_BADSTK = @as(c_int, 8);
pub const FPE_NOOP = @as(c_int, 0);
pub const FPE_FLTDIV = @as(c_int, 1);
pub const FPE_FLTOVF = @as(c_int, 2);
pub const FPE_FLTUND = @as(c_int, 3);
pub const FPE_FLTRES = @as(c_int, 4);
pub const FPE_FLTINV = @as(c_int, 5);
pub const FPE_FLTSUB = @as(c_int, 6);
pub const FPE_INTDIV = @as(c_int, 7);
pub const FPE_INTOVF = @as(c_int, 8);
pub const SEGV_NOOP = @as(c_int, 0);
pub const SEGV_MAPERR = @as(c_int, 1);
pub const SEGV_ACCERR = @as(c_int, 2);
pub const BUS_NOOP = @as(c_int, 0);
pub const BUS_ADRALN = @as(c_int, 1);
pub const BUS_ADRERR = @as(c_int, 2);
pub const BUS_OBJERR = @as(c_int, 3);
pub const TRAP_BRKPT = @as(c_int, 1);
pub const TRAP_TRACE = @as(c_int, 2);
pub const CLD_NOOP = @as(c_int, 0);
pub const CLD_EXITED = @as(c_int, 1);
pub const CLD_KILLED = @as(c_int, 2);
pub const CLD_DUMPED = @as(c_int, 3);
pub const CLD_TRAPPED = @as(c_int, 4);
pub const CLD_STOPPED = @as(c_int, 5);
pub const CLD_CONTINUED = @as(c_int, 6);
pub const POLL_IN = @as(c_int, 1);
pub const POLL_OUT = @as(c_int, 2);
pub const POLL_MSG = @as(c_int, 3);
pub const POLL_ERR = @as(c_int, 4);
pub const POLL_PRI = @as(c_int, 5);
pub const POLL_HUP = @as(c_int, 6);
pub const sa_handler = __sigaction_u.__sa_handler;
pub const sa_sigaction = __sigaction_u.__sa_sigaction;
pub const SA_ONSTACK = @as(c_int, 0x0001);
pub const SA_RESTART = @as(c_int, 0x0002);
pub const SA_RESETHAND = @as(c_int, 0x0004);
pub const SA_NOCLDSTOP = @as(c_int, 0x0008);
pub const SA_NODEFER = @as(c_int, 0x0010);
pub const SA_NOCLDWAIT = @as(c_int, 0x0020);
pub const SA_SIGINFO = @as(c_int, 0x0040);
pub const SA_USERTRAMP = @as(c_int, 0x0100);
pub const SA_64REGSET = @as(c_int, 0x0200);
pub const SA_USERSPACE_MASK = (((((SA_ONSTACK | SA_RESTART) | SA_RESETHAND) | SA_NOCLDSTOP) | SA_NODEFER) | SA_NOCLDWAIT) | SA_SIGINFO;
pub const SIG_BLOCK = @as(c_int, 1);
pub const SIG_UNBLOCK = @as(c_int, 2);
pub const SIG_SETMASK = @as(c_int, 3);
pub const SI_USER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10001, .hex);
pub const SI_QUEUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10002, .hex);
pub const SI_TIMER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10003, .hex);
pub const SI_ASYNCIO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004, .hex);
pub const SI_MESGQ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10005, .hex);
pub const SS_ONSTACK = @as(c_int, 0x0001);
pub const SS_DISABLE = @as(c_int, 0x0004);
pub const MINSIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const SV_ONSTACK = SA_ONSTACK;
pub const SV_INTERRUPT = SA_RESTART;
pub const SV_RESETHAND = SA_RESETHAND;
pub const SV_NODEFER = SA_NODEFER;
pub const SV_NOCLDSTOP = SA_NOCLDSTOP;
pub const SV_SIGINFO = SA_SIGINFO;
pub const sv_onstack = @compileError("unable to translate macro: undefined identifier `sv_flags`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/signal.h:361:9
pub inline fn sigmask(m: anytype) @TypeOf(@as(c_int, 1) << (m - @as(c_int, 1))) {
    _ = &m;
    return @as(c_int, 1) << (m - @as(c_int, 1));
}
pub const BADSIG = SIG_ERR;
pub const __need_rsize_t = "";
pub const _STDIO_H_ = "";
pub const __STDIO_H_ = "";
pub const _VA_LIST_T = "";
pub const USE_CLANG_STDARG = @as(c_int, 0);
pub const _SYS_STDIO_H_ = "";
pub const RENAME_SECLUDE = @as(c_int, 0x00000001);
pub const RENAME_SWAP = @as(c_int, 0x00000002);
pub const RENAME_EXCL = @as(c_int, 0x00000004);
pub const RENAME_RESERVED1 = @as(c_int, 0x00000008);
pub const RENAME_NOFOLLOW_ANY = @as(c_int, 0x00000010);
pub const __PRINTF_H_ = "";
pub const _FSTDIO = "";
pub const _SEEK_SET_H_ = "";
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const SEEK_HOLE = @as(c_int, 3);
pub const SEEK_DATA = @as(c_int, 4);
pub const __SLBF = @as(c_int, 0x0001);
pub const __SNBF = @as(c_int, 0x0002);
pub const __SRD = @as(c_int, 0x0004);
pub const __SWR = @as(c_int, 0x0008);
pub const __SRW = @as(c_int, 0x0010);
pub const __SEOF = @as(c_int, 0x0020);
pub const __SERR = @as(c_int, 0x0040);
pub const __SMBF = @as(c_int, 0x0080);
pub const __SAPP = @as(c_int, 0x0100);
pub const __SSTR = @as(c_int, 0x0200);
pub const __SOPT = @as(c_int, 0x0400);
pub const __SNPT = @as(c_int, 0x0800);
pub const __SOFF = @as(c_int, 0x1000);
pub const __SMOD = @as(c_int, 0x2000);
pub const __SALC = @as(c_int, 0x4000);
pub const __SIGN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 1024);
pub const EOF = -@as(c_int, 1);
pub const FOPEN_MAX = @as(c_int, 20);
pub const FILENAME_MAX = @as(c_int, 1024);
pub const P_tmpdir = "/var/tmp/";
pub const L_tmpnam = @as(c_int, 1024);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 308915776, .decimal);
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdio.h:217:9: warning: macro 'stdin' contains a runtime value, translated to function
pub inline fn stdin() @TypeOf(__stdinp) {
    return __stdinp;
}
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdio.h:218:9: warning: macro 'stdout' contains a runtime value, translated to function
pub inline fn stdout() @TypeOf(__stdoutp) {
    return __stdoutp;
}
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdio.h:219:9: warning: macro 'stderr' contains a runtime value, translated to function
pub inline fn stderr() @TypeOf(__stderrp) {
    return __stderrp;
}
pub const _CTERMID_H_ = "";
pub const L_ctermid = @as(c_int, 1024);
pub const __sgetc = @compileError("TODO unary inc/dec expr");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdio.h:359:9
pub inline fn __sfeof(p: anytype) @TypeOf((p.*._flags & __SEOF) != @as(c_int, 0)) {
    _ = &p;
    return (p.*._flags & __SEOF) != @as(c_int, 0);
}
pub inline fn __sferror(p: anytype) @TypeOf((p.*._flags & __SERR) != @as(c_int, 0)) {
    _ = &p;
    return (p.*._flags & __SERR) != @as(c_int, 0);
}
pub const __sclearerr = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdio.h:383:9
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    _ = &p;
    return p.*._file;
}
pub inline fn fropen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0))) {
    _ = &cookie;
    _ = &@"fn";
    return funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
}
pub inline fn fwopen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0))) {
    _ = &cookie;
    _ = &@"fn";
    return funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0));
}
pub inline fn feof_unlocked(p: anytype) @TypeOf(__sfeof(p)) {
    _ = &p;
    return __sfeof(p);
}
pub inline fn ferror_unlocked(p: anytype) @TypeOf(__sferror(p)) {
    _ = &p;
    return __sferror(p);
}
pub inline fn clearerr_unlocked(p: anytype) @TypeOf(__sclearerr(p)) {
    _ = &p;
    return __sclearerr(p);
}
pub inline fn fileno_unlocked(p: anytype) @TypeOf(__sfileno(p)) {
    _ = &p;
    return __sfileno(p);
}
pub const _SECURE__STDIO_H_ = "";
pub const _SECURE__COMMON_H_ = "";
pub const _USE_FORTIFY_LEVEL = @as(c_int, 2);
pub inline fn __darwin_obsz0(object: anytype) @TypeOf(__builtin_object_size(object, @as(c_int, 0))) {
    _ = &object;
    return __builtin_object_size(object, @as(c_int, 0));
}
pub inline fn __darwin_obsz(object: anytype) @TypeOf(__builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0))) {
    _ = &object;
    return __builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0));
}
pub const _STDLIB_H_ = "";
pub const _LIBC_COUNT__MB_LEN_MAX = "";
pub const _LIBC_COUNT__PATH_MAX = "";
pub const _SYS_WAIT_H_ = "";
pub const _SYS_RESOURCE_H_ = "";
pub const _STRUCT_TIMEVAL = struct_timeval;
pub const PRIO_PROCESS = @as(c_int, 0);
pub const PRIO_PGRP = @as(c_int, 1);
pub const PRIO_USER = @as(c_int, 2);
pub const PRIO_DARWIN_THREAD = @as(c_int, 3);
pub const PRIO_DARWIN_PROCESS = @as(c_int, 4);
pub const PRIO_MIN = -@as(c_int, 20);
pub const PRIO_MAX = @as(c_int, 20);
pub const PRIO_DARWIN_BG = @as(c_int, 0x1000);
pub const PRIO_DARWIN_NONUI = @as(c_int, 0x1001);
pub const RUSAGE_SELF = @as(c_int, 0);
pub const RUSAGE_CHILDREN = -@as(c_int, 1);
pub const ru_first = @compileError("unable to translate macro: undefined identifier `ru_ixrss`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/resource.h:164:9
pub const ru_last = @compileError("unable to translate macro: undefined identifier `ru_nivcsw`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/resource.h:178:9
pub const RUSAGE_INFO_V0 = @as(c_int, 0);
pub const RUSAGE_INFO_V1 = @as(c_int, 1);
pub const RUSAGE_INFO_V2 = @as(c_int, 2);
pub const RUSAGE_INFO_V3 = @as(c_int, 3);
pub const RUSAGE_INFO_V4 = @as(c_int, 4);
pub const RUSAGE_INFO_V5 = @as(c_int, 5);
pub const RUSAGE_INFO_V6 = @as(c_int, 6);
pub const RUSAGE_INFO_CURRENT = RUSAGE_INFO_V6;
pub const RU_PROC_RUNS_RESLIDE = @as(c_int, 0x00000001);
pub const RLIM_INFINITY = (@import("std").zig.c_translation.cast(__uint64_t, @as(c_int, 1)) << @as(c_int, 63)) - @as(c_int, 1);
pub const RLIM_SAVED_MAX = RLIM_INFINITY;
pub const RLIM_SAVED_CUR = RLIM_INFINITY;
pub const RLIMIT_CPU = @as(c_int, 0);
pub const RLIMIT_FSIZE = @as(c_int, 1);
pub const RLIMIT_DATA = @as(c_int, 2);
pub const RLIMIT_STACK = @as(c_int, 3);
pub const RLIMIT_CORE = @as(c_int, 4);
pub const RLIMIT_AS = @as(c_int, 5);
pub const RLIMIT_RSS = RLIMIT_AS;
pub const RLIMIT_MEMLOCK = @as(c_int, 6);
pub const RLIMIT_NPROC = @as(c_int, 7);
pub const RLIMIT_NOFILE = @as(c_int, 8);
pub const RLIM_NLIMITS = @as(c_int, 9);
pub const _RLIMIT_POSIX_FLAG = @as(c_int, 0x1000);
pub const RLIMIT_WAKEUPS_MONITOR = @as(c_int, 0x1);
pub const RLIMIT_CPU_USAGE_MONITOR = @as(c_int, 0x2);
pub const RLIMIT_THREAD_CPULIMITS = @as(c_int, 0x3);
pub const RLIMIT_FOOTPRINT_INTERVAL = @as(c_int, 0x4);
pub const WAKEMON_ENABLE = @as(c_int, 0x01);
pub const WAKEMON_DISABLE = @as(c_int, 0x02);
pub const WAKEMON_GET_PARAMS = @as(c_int, 0x04);
pub const WAKEMON_SET_DEFAULTS = @as(c_int, 0x08);
pub const WAKEMON_MAKE_FATAL = @as(c_int, 0x10);
pub const CPUMON_MAKE_FATAL = @as(c_int, 0x1000);
pub const FOOTPRINT_INTERVAL_RESET = @as(c_int, 0x1);
pub const IOPOL_TYPE_DISK = @as(c_int, 0);
pub const IOPOL_TYPE_VFS_ATIME_UPDATES = @as(c_int, 2);
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = @as(c_int, 3);
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = @as(c_int, 4);
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE = @as(c_int, 5);
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = @as(c_int, 6);
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = @as(c_int, 7);
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = @as(c_int, 8);
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = @as(c_int, 9);
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = @as(c_int, 10);
pub const IOPOL_SCOPE_PROCESS = @as(c_int, 0);
pub const IOPOL_SCOPE_THREAD = @as(c_int, 1);
pub const IOPOL_SCOPE_DARWIN_BG = @as(c_int, 2);
pub const IOPOL_DEFAULT = @as(c_int, 0);
pub const IOPOL_IMPORTANT = @as(c_int, 1);
pub const IOPOL_PASSIVE = @as(c_int, 2);
pub const IOPOL_THROTTLE = @as(c_int, 3);
pub const IOPOL_UTILITY = @as(c_int, 4);
pub const IOPOL_STANDARD = @as(c_int, 5);
pub const IOPOL_APPLICATION = IOPOL_STANDARD;
pub const IOPOL_NORMAL = IOPOL_IMPORTANT;
pub const IOPOL_ATIME_UPDATES_DEFAULT = @as(c_int, 0);
pub const IOPOL_ATIME_UPDATES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = @as(c_int, 0);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON = @as(c_int, 2);
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = @as(c_int, 1);
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF = @as(c_int, 1);
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE = @as(c_int, 1);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF = @as(c_int, 0);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON = @as(c_int, 1);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = @as(c_int, 0);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON = @as(c_int, 1);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_IGNORE = @as(c_int, 2);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = @as(c_int, 0);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = @as(c_int, 1);
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = @as(c_int, 1);
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 0x00000001);
pub const WUNTRACED = @as(c_int, 0x00000002);
pub inline fn _W_INT(w: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]c_int, &w).*) {
    _ = &w;
    return @import("std").zig.c_translation.cast([*c]c_int, &w).*;
}
pub const WCOREFLAG = @as(c_int, 0o200);
pub inline fn _WSTATUS(x: anytype) @TypeOf(_W_INT(x) & @as(c_int, 0o177)) {
    _ = &x;
    return _W_INT(x) & @as(c_int, 0o177);
}
pub const _WSTOPPED = @as(c_int, 0o177);
pub inline fn WEXITSTATUS(x: anytype) @TypeOf((_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff)) {
    _ = &x;
    return (_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff);
}
pub inline fn WSTOPSIG(x: anytype) @TypeOf(_W_INT(x) >> @as(c_int, 8)) {
    _ = &x;
    return _W_INT(x) >> @as(c_int, 8);
}
pub inline fn WIFCONTINUED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13))) {
    _ = &x;
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13));
}
pub inline fn WIFSTOPPED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13))) {
    _ = &x;
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13));
}
pub inline fn WIFEXITED(x: anytype) @TypeOf(_WSTATUS(x) == @as(c_int, 0)) {
    _ = &x;
    return _WSTATUS(x) == @as(c_int, 0);
}
pub inline fn WIFSIGNALED(x: anytype) @TypeOf((_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0))) {
    _ = &x;
    return (_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0));
}
pub inline fn WTERMSIG(x: anytype) @TypeOf(_WSTATUS(x)) {
    _ = &x;
    return _WSTATUS(x);
}
pub inline fn WCOREDUMP(x: anytype) @TypeOf(_W_INT(x) & WCOREFLAG) {
    _ = &x;
    return _W_INT(x) & WCOREFLAG;
}
pub inline fn W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    _ = &ret;
    _ = &sig;
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | _WSTOPPED) {
    _ = &sig;
    return (sig << @as(c_int, 8)) | _WSTOPPED;
}
pub const WEXITED = @as(c_int, 0x00000004);
pub const WSTOPPED = @as(c_int, 0x00000008);
pub const WCONTINUED = @as(c_int, 0x00000010);
pub const WNOWAIT = @as(c_int, 0x00000020);
pub const WAIT_ANY = -@as(c_int, 1);
pub const WAIT_MYPGRP = @as(c_int, 0);
pub const w_termsig = @compileError("unable to translate macro: undefined identifier `w_T`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:229:9
pub const w_coredump = @compileError("unable to translate macro: undefined identifier `w_T`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:230:9
pub const w_retcode = @compileError("unable to translate macro: undefined identifier `w_T`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:231:9
pub const w_stopval = @compileError("unable to translate macro: undefined identifier `w_S`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:232:9
pub const w_stopsig = @compileError("unable to translate macro: undefined identifier `w_S`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/wait.h:233:9
pub const _ALLOCA_H_ = "";
pub const __alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/alloca.h:43:9
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:135:9: warning: macro 'MB_CUR_MAX' contains a runtime value, translated to function
pub inline fn MB_CUR_MAX() @TypeOf(__mb_cur_max) {
    return __mb_cur_max;
}
pub const _MALLOC_UNDERSCORE_MALLOC_H_ = "";
pub const _MALLOC_UNDERSCORE_MALLOC_TYPE_H_ = "";
pub const _MALLOC_UNDERSCORE_PTRCHECK_H_ = "";
pub const _MALLOC_TYPE_AVAILABILITY = @compileError("unable to translate macro: undefined identifier `macos`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/malloc/_malloc_type.h:45:9
pub const _MALLOC_TYPED = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/malloc/_malloc_type.h:85:9
pub const __ABORT_H_ = "";
pub const __bsearch_noescape = @compileError("unable to translate macro: undefined identifier `__noescape__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:297:9
pub const __sort_noescape = @compileError("unable to translate macro: undefined identifier `__noescape__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/_stdlib.h:330:9
pub const _STRING_H_ = "";
pub const __STRINGS_H_ = "";
pub const _SECURE__STRINGS_H_ = "";
pub const _SECURE__STRING_H_ = "";
pub const __HAS_FIXED_CHK_PROTOTYPES = @as(c_int, 1);
pub const _TIME_H_ = "";
pub const _STRUCT_TIMESPEC = struct_timespec;
pub const CLOCKS_PER_SEC = @import("std").zig.c_translation.cast(clock_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const __CLOCK_AVAILABILITY = __OSX_AVAILABLE(@as(f64, 10.12)) ++ __IOS_AVAILABLE(@as(f64, 10.0)) ++ __TVOS_AVAILABLE(@as(f64, 10.0)) ++ __WATCHOS_AVAILABLE(@as(f64, 3.0));
pub const CLOCK_REALTIME = _CLOCK_REALTIME;
pub const CLOCK_MONOTONIC = _CLOCK_MONOTONIC;
pub const CLOCK_MONOTONIC_RAW = _CLOCK_MONOTONIC_RAW;
pub const CLOCK_MONOTONIC_RAW_APPROX = _CLOCK_MONOTONIC_RAW_APPROX;
pub const CLOCK_UPTIME_RAW = _CLOCK_UPTIME_RAW;
pub const CLOCK_UPTIME_RAW_APPROX = _CLOCK_UPTIME_RAW_APPROX;
pub const CLOCK_PROCESS_CPUTIME_ID = _CLOCK_PROCESS_CPUTIME_ID;
pub const CLOCK_THREAD_CPUTIME_ID = _CLOCK_THREAD_CPUTIME_ID;
pub const TIME_UTC = @as(c_int, 1);
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H_ = "";
pub const __PRI_8_LENGTH_MODIFIER__ = "hh";
pub const __PRI_64_LENGTH_MODIFIER__ = "ll";
pub const __SCN_64_LENGTH_MODIFIER__ = "ll";
pub const __PRI_MAX_LENGTH_MODIFIER__ = "j";
pub const __SCN_MAX_LENGTH_MODIFIER__ = "j";
pub const PRId8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const PRIi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const PRIo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const PRIu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const PRIx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const PRIX8 = __PRI_8_LENGTH_MODIFIER__ ++ "X";
pub const PRId16 = "hd";
pub const PRIi16 = "hi";
pub const PRIo16 = "ho";
pub const PRIu16 = "hu";
pub const PRIx16 = "hx";
pub const PRIX16 = "hX";
pub const PRId32 = "d";
pub const PRIi32 = "i";
pub const PRIo32 = "o";
pub const PRIu32 = "u";
pub const PRIx32 = "x";
pub const PRIX32 = "X";
pub const PRId64 = __PRI_64_LENGTH_MODIFIER__ ++ "d";
pub const PRIi64 = __PRI_64_LENGTH_MODIFIER__ ++ "i";
pub const PRIo64 = __PRI_64_LENGTH_MODIFIER__ ++ "o";
pub const PRIu64 = __PRI_64_LENGTH_MODIFIER__ ++ "u";
pub const PRIx64 = __PRI_64_LENGTH_MODIFIER__ ++ "x";
pub const PRIX64 = __PRI_64_LENGTH_MODIFIER__ ++ "X";
pub const PRIdLEAST8 = PRId8;
pub const PRIiLEAST8 = PRIi8;
pub const PRIoLEAST8 = PRIo8;
pub const PRIuLEAST8 = PRIu8;
pub const PRIxLEAST8 = PRIx8;
pub const PRIXLEAST8 = PRIX8;
pub const PRIdLEAST16 = PRId16;
pub const PRIiLEAST16 = PRIi16;
pub const PRIoLEAST16 = PRIo16;
pub const PRIuLEAST16 = PRIu16;
pub const PRIxLEAST16 = PRIx16;
pub const PRIXLEAST16 = PRIX16;
pub const PRIdLEAST32 = PRId32;
pub const PRIiLEAST32 = PRIi32;
pub const PRIoLEAST32 = PRIo32;
pub const PRIuLEAST32 = PRIu32;
pub const PRIxLEAST32 = PRIx32;
pub const PRIXLEAST32 = PRIX32;
pub const PRIdLEAST64 = PRId64;
pub const PRIiLEAST64 = PRIi64;
pub const PRIoLEAST64 = PRIo64;
pub const PRIuLEAST64 = PRIu64;
pub const PRIxLEAST64 = PRIx64;
pub const PRIXLEAST64 = PRIX64;
pub const PRIdFAST8 = PRId8;
pub const PRIiFAST8 = PRIi8;
pub const PRIoFAST8 = PRIo8;
pub const PRIuFAST8 = PRIu8;
pub const PRIxFAST8 = PRIx8;
pub const PRIXFAST8 = PRIX8;
pub const PRIdFAST16 = PRId16;
pub const PRIiFAST16 = PRIi16;
pub const PRIoFAST16 = PRIo16;
pub const PRIuFAST16 = PRIu16;
pub const PRIxFAST16 = PRIx16;
pub const PRIXFAST16 = PRIX16;
pub const PRIdFAST32 = PRId32;
pub const PRIiFAST32 = PRIi32;
pub const PRIoFAST32 = PRIo32;
pub const PRIuFAST32 = PRIu32;
pub const PRIxFAST32 = PRIx32;
pub const PRIXFAST32 = PRIX32;
pub const PRIdFAST64 = PRId64;
pub const PRIiFAST64 = PRIi64;
pub const PRIoFAST64 = PRIo64;
pub const PRIuFAST64 = PRIu64;
pub const PRIxFAST64 = PRIx64;
pub const PRIXFAST64 = PRIX64;
pub const PRIdPTR = "ld";
pub const PRIiPTR = "li";
pub const PRIoPTR = "lo";
pub const PRIuPTR = "lu";
pub const PRIxPTR = "lx";
pub const PRIXPTR = "lX";
pub const PRIdMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "d";
pub const PRIiMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "i";
pub const PRIoMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "o";
pub const PRIuMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "u";
pub const PRIxMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "x";
pub const PRIXMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "X";
pub const SCNd8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const SCNi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const SCNo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const SCNu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const SCNx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const SCNd16 = "hd";
pub const SCNi16 = "hi";
pub const SCNo16 = "ho";
pub const SCNu16 = "hu";
pub const SCNx16 = "hx";
pub const SCNd32 = "d";
pub const SCNi32 = "i";
pub const SCNo32 = "o";
pub const SCNu32 = "u";
pub const SCNx32 = "x";
pub const SCNd64 = __SCN_64_LENGTH_MODIFIER__ ++ "d";
pub const SCNi64 = __SCN_64_LENGTH_MODIFIER__ ++ "i";
pub const SCNo64 = __SCN_64_LENGTH_MODIFIER__ ++ "o";
pub const SCNu64 = __SCN_64_LENGTH_MODIFIER__ ++ "u";
pub const SCNx64 = __SCN_64_LENGTH_MODIFIER__ ++ "x";
pub const SCNdLEAST8 = SCNd8;
pub const SCNiLEAST8 = SCNi8;
pub const SCNoLEAST8 = SCNo8;
pub const SCNuLEAST8 = SCNu8;
pub const SCNxLEAST8 = SCNx8;
pub const SCNdLEAST16 = SCNd16;
pub const SCNiLEAST16 = SCNi16;
pub const SCNoLEAST16 = SCNo16;
pub const SCNuLEAST16 = SCNu16;
pub const SCNxLEAST16 = SCNx16;
pub const SCNdLEAST32 = SCNd32;
pub const SCNiLEAST32 = SCNi32;
pub const SCNoLEAST32 = SCNo32;
pub const SCNuLEAST32 = SCNu32;
pub const SCNxLEAST32 = SCNx32;
pub const SCNdLEAST64 = SCNd64;
pub const SCNiLEAST64 = SCNi64;
pub const SCNoLEAST64 = SCNo64;
pub const SCNuLEAST64 = SCNu64;
pub const SCNxLEAST64 = SCNx64;
pub const SCNdFAST8 = SCNd8;
pub const SCNiFAST8 = SCNi8;
pub const SCNoFAST8 = SCNo8;
pub const SCNuFAST8 = SCNu8;
pub const SCNxFAST8 = SCNx8;
pub const SCNdFAST16 = SCNd16;
pub const SCNiFAST16 = SCNi16;
pub const SCNoFAST16 = SCNo16;
pub const SCNuFAST16 = SCNu16;
pub const SCNxFAST16 = SCNx16;
pub const SCNdFAST32 = SCNd32;
pub const SCNiFAST32 = SCNi32;
pub const SCNoFAST32 = SCNo32;
pub const SCNuFAST32 = SCNu32;
pub const SCNxFAST32 = SCNx32;
pub const SCNdFAST64 = SCNd64;
pub const SCNiFAST64 = SCNi64;
pub const SCNoFAST64 = SCNo64;
pub const SCNuFAST64 = SCNu64;
pub const SCNxFAST64 = SCNx64;
pub const SCNdPTR = "ld";
pub const SCNiPTR = "li";
pub const SCNoPTR = "lo";
pub const SCNuPTR = "lu";
pub const SCNxPTR = "lx";
pub const SCNdMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "d";
pub const SCNiMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "i";
pub const SCNoMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "o";
pub const SCNuMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "u";
pub const SCNxMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "x";
pub const __COREFOUNDATION_CFARRAY__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBAG__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBINARYHEAP__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBITVECTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBYTEORDER__ = @as(c_int, 1);
pub const _OS_OSBYTEORDER_H = "";
pub inline fn OSSwapConstInt16(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt16(x);
}
pub inline fn OSSwapConstInt32(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt32(x);
}
pub inline fn OSSwapConstInt64(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt64(x);
}
pub const _OS_OSBYTEORDERARM_H = "";
pub const OS_INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/_types/_os_inline.h:30:17
pub const _ARM_ARCH_H = "";
pub inline fn OSSwapInt16(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn OSSwapInt32(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn OSSwapInt64(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn OSReadBigInt(x: anytype, y: anytype) @TypeOf(OSReadBigInt32(x, y)) {
    _ = &x;
    _ = &y;
    return OSReadBigInt32(x, y);
}
pub inline fn OSWriteBigInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteBigInt32(x, y, z)) {
    _ = &x;
    _ = &y;
    _ = &z;
    return OSWriteBigInt32(x, y, z);
}
pub inline fn OSSwapBigToHostInt(x: anytype) @TypeOf(OSSwapBigToHostInt32(x)) {
    _ = &x;
    return OSSwapBigToHostInt32(x);
}
pub inline fn OSSwapHostToBigInt(x: anytype) @TypeOf(OSSwapHostToBigInt32(x)) {
    _ = &x;
    return OSSwapHostToBigInt32(x);
}
pub inline fn OSReadLittleInt(x: anytype, y: anytype) @TypeOf(OSReadLittleInt32(x, y)) {
    _ = &x;
    _ = &y;
    return OSReadLittleInt32(x, y);
}
pub inline fn OSWriteLittleInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteLittleInt32(x, y, z)) {
    _ = &x;
    _ = &y;
    _ = &z;
    return OSWriteLittleInt32(x, y, z);
}
pub inline fn OSSwapHostToLittleInt(x: anytype) @TypeOf(OSSwapHostToLittleInt32(x)) {
    _ = &x;
    return OSSwapHostToLittleInt32(x);
}
pub inline fn OSSwapLittleToHostInt(x: anytype) @TypeOf(OSSwapLittleToHostInt32(x)) {
    _ = &x;
    return OSSwapLittleToHostInt32(x);
}
pub inline fn OSReadBigInt16(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt16(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt16(base, byteOffset);
}
pub inline fn OSReadBigInt32(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt32(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt32(base, byteOffset);
}
pub inline fn OSReadBigInt64(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt64(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt64(base, byteOffset);
}
pub inline fn OSWriteBigInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt16(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt16(base, byteOffset, data);
}
pub inline fn OSWriteBigInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt32(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt32(base, byteOffset, data);
}
pub inline fn OSWriteBigInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt64(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt64(base, byteOffset, data);
}
pub inline fn OSReadLittleInt16(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt16(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt16(base, byteOffset);
}
pub inline fn OSReadLittleInt32(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt32(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt32(base, byteOffset);
}
pub inline fn OSReadLittleInt64(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt64(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt64(base, byteOffset);
}
pub inline fn OSWriteLittleInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt16(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt16(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt32(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt32(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt64(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt64(base, byteOffset, data);
}
pub inline fn OSSwapHostToBigConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    _ = &x;
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapHostToBigConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    _ = &x;
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapHostToBigConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    _ = &x;
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapHostToBigInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    _ = &x;
    return OSSwapInt16(x);
}
pub inline fn OSSwapHostToBigInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    _ = &x;
    return OSSwapInt32(x);
}
pub inline fn OSSwapHostToBigInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    _ = &x;
    return OSSwapInt64(x);
}
pub inline fn OSSwapHostToLittleConstInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleConstInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleConstInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapHostToLittleInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapBigToHostConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    _ = &x;
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapBigToHostConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    _ = &x;
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapBigToHostConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    _ = &x;
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapBigToHostInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    _ = &x;
    return OSSwapInt16(x);
}
pub inline fn OSSwapBigToHostInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    _ = &x;
    return OSSwapInt32(x);
}
pub inline fn OSSwapBigToHostInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    _ = &x;
    return OSSwapInt64(x);
}
pub inline fn OSSwapLittleToHostConstInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostConstInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostConstInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapLittleToHostInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub const CF_USE_OSBYTEORDER_H = @as(c_int, 1);
pub const __COREFOUNDATION_CFCALENDAR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFLOCALE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDICTIONARY__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATE__ = @as(c_int, 1);
pub const CF_CALENDAR_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:55:9
pub const CF_CALENDAR_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:56:9
pub const __COREFOUNDATION_CFTIMEZONE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATA__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFCHARACTERSET__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFERROR__ = @as(c_int, 1);
pub const kCFStringEncodingInvalidId = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const CFSTR = @compileError("unable to translate macro: undefined identifier `__builtin___CFStringMakeConstantString`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:158:9
pub const CF_FORMAT_FUNCTION = @compileError("unable to translate macro: undefined identifier `format`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:164:9
pub const CF_FORMAT_ARGUMENT = @compileError("unable to translate macro: undefined identifier `format_arg`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:165:9
pub const __kCFStringInlineBufferLength = @as(c_int, 64);
pub const __COREFOUNDATION_CFCGTYPES__ = @as(c_int, 1);
pub const CF_DEFINES_CG_TYPES = "";
pub const CF_BOXABLE = @compileError("unable to translate macro: undefined identifier `objc_boxable`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCGTypes.h:21:10
pub const CGFLOAT_TYPE = f64;
pub const CGFLOAT_IS_DOUBLE = @as(c_int, 1);
pub const CGFLOAT_MIN = DBL_MIN;
pub const CGFLOAT_MAX = DBL_MAX;
pub const CGFLOAT_EPSILON = DBL_EPSILON;
pub const CGFLOAT_DEFINED = @as(c_int, 1);
pub const CGVECTOR_DEFINED = @as(c_int, 1);
pub const CF_DEFINES_CGAFFINETRANSFORMCOMPONENTS = "";
pub const __COREFOUNDATION_CFDATEFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBERFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPREFERENCES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPROPERTYLIST__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTREAM__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURL__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFRUNLOOP__ = @as(c_int, 1);
pub const _MACH_PORT_H_ = "";
pub const _MACH_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_BOOLEAN_H_ = "";
pub const _MACH_ARM_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_VM_TYPES_H_ = "";
pub const _MACH_ARM_VM_TYPES_H_ = "";
pub const MACH_MSG_TYPE_INTEGER_T = @compileError("unable to translate macro: undefined identifier `MACH_MSG_TYPE_INTEGER_32`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/arm/vm_types.h:158:9
pub const _MACH_PORT_T = "";
pub const MACH_PORT_NULL = @as(c_int, 0);
pub const MACH_PORT_DEAD = @import("std").zig.c_translation.cast(mach_port_name_t, ~@as(c_int, 0));
pub inline fn MACH_PORT_VALID(name: anytype) @TypeOf((name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD)) {
    _ = &name;
    return (name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD);
}
pub inline fn MACH_PORT_INDEX(name: anytype) @TypeOf(name >> @as(c_int, 8)) {
    _ = &name;
    return name >> @as(c_int, 8);
}
pub inline fn MACH_PORT_GEN(name: anytype) @TypeOf((name & @as(c_int, 0xff)) << @as(c_int, 24)) {
    _ = &name;
    return (name & @as(c_int, 0xff)) << @as(c_int, 24);
}
pub inline fn MACH_PORT_MAKE(index_1: anytype, gen: anytype) @TypeOf((index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24))) {
    _ = &index_1;
    _ = &gen;
    return (index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24));
}
pub const MACH_PORT_RIGHT_SEND = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 0));
pub const MACH_PORT_RIGHT_RECEIVE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 1));
pub const MACH_PORT_RIGHT_SEND_ONCE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 2));
pub const MACH_PORT_RIGHT_PORT_SET = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 3));
pub const MACH_PORT_RIGHT_DEAD_NAME = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 4));
pub const MACH_PORT_RIGHT_LABELH = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 5));
pub const MACH_PORT_RIGHT_NUMBER = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 6));
pub inline fn MACH_PORT_TYPE(right: anytype) mach_port_type_t {
    _ = &right;
    return @import("std").zig.c_translation.cast(mach_port_type_t, @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_int, 1)) << (right + @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 16))));
}
pub const MACH_PORT_TYPE_NONE = @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_long, 0));
pub const MACH_PORT_TYPE_SEND = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND);
pub const MACH_PORT_TYPE_RECEIVE = MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE);
pub const MACH_PORT_TYPE_SEND_ONCE = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE);
pub const MACH_PORT_TYPE_PORT_SET = MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET);
pub const MACH_PORT_TYPE_DEAD_NAME = MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME);
pub const MACH_PORT_TYPE_LABELH = MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH);
pub const MACH_PORT_TYPE_DNREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const MACH_PORT_TYPE_SPREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const MACH_PORT_TYPE_SEND_RECEIVE = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_SEND_RIGHTS = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_SEND_ONCE;
pub const MACH_PORT_TYPE_PORT_RIGHTS = MACH_PORT_TYPE_SEND_RIGHTS | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_PORT_OR_DEAD = MACH_PORT_TYPE_PORT_RIGHTS | MACH_PORT_TYPE_DEAD_NAME;
pub const MACH_PORT_TYPE_ALL_RIGHTS = MACH_PORT_TYPE_PORT_OR_DEAD | MACH_PORT_TYPE_PORT_SET;
pub const MACH_PORT_SRIGHTS_NONE = @as(c_int, 0);
pub const MACH_PORT_SRIGHTS_PRESENT = @as(c_int, 1);
pub const MACH_PORT_QLIMIT_ZERO = @as(c_int, 0);
pub const MACH_PORT_QLIMIT_BASIC = @as(c_int, 5);
pub const MACH_PORT_QLIMIT_SMALL = @as(c_int, 16);
pub const MACH_PORT_QLIMIT_LARGE = @as(c_int, 1024);
pub const MACH_PORT_QLIMIT_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65534, .decimal);
pub const MACH_PORT_QLIMIT_MIN = MACH_PORT_QLIMIT_ZERO;
pub const MACH_PORT_QLIMIT_DEFAULT = MACH_PORT_QLIMIT_BASIC;
pub const MACH_PORT_QLIMIT_MAX = MACH_PORT_QLIMIT_LARGE;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER = @as(c_int, 0x01);
pub const MACH_PORT_STATUS_FLAG_GUARDED = @as(c_int, 0x02);
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD = @as(c_int, 0x04);
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION = @as(c_int, 0x08);
pub const MACH_PORT_STATUS_FLAG_REVIVE = @as(c_int, 0x10);
pub const MACH_PORT_STATUS_FLAG_TASKPTR = @as(c_int, 0x20);
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = @as(c_int, 0x40);
pub const MACH_PORT_STATUS_FLAG_NO_GRANT = @as(c_int, 0x80);
pub const MACH_PORT_LIMITS_INFO = @as(c_int, 1);
pub const MACH_PORT_RECEIVE_STATUS = @as(c_int, 2);
pub const MACH_PORT_DNREQUESTS_SIZE = @as(c_int, 3);
pub const MACH_PORT_TEMPOWNER = @as(c_int, 4);
pub const MACH_PORT_IMPORTANCE_RECEIVER = @as(c_int, 5);
pub const MACH_PORT_DENAP_RECEIVER = @as(c_int, 6);
pub const MACH_PORT_INFO_EXT = @as(c_int, 7);
pub const MACH_PORT_GUARD_INFO = @as(c_int, 8);
pub const MACH_PORT_SERVICE_THROTTLED = @as(c_int, 9);
pub const MACH_PORT_LIMITS_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_limits_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_RECEIVE_STATUS_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_status_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT = @as(c_int, 1);
pub const MACH_PORT_INFO_EXT_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_info_ext_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_GUARD_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_guard_info_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_SERVICE_THROTTLED_COUNT = @as(c_int, 1);
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = @as(c_int, 255);
pub const MACH_SERVICE_PORT_INFO_COUNT = @import("std").zig.c_translation.cast(u8, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_service_port_info_data_t), @import("std").zig.c_translation.sizeof(u8)));
pub const MPO_CONTEXT_AS_GUARD = @as(c_int, 0x01);
pub const MPO_QLIMIT = @as(c_int, 0x02);
pub const MPO_TEMPOWNER = @as(c_int, 0x04);
pub const MPO_IMPORTANCE_RECEIVER = @as(c_int, 0x08);
pub const MPO_INSERT_SEND_RIGHT = @as(c_int, 0x10);
pub const MPO_STRICT = @as(c_int, 0x20);
pub const MPO_DENAP_RECEIVER = @as(c_int, 0x40);
pub const MPO_IMMOVABLE_RECEIVE = @as(c_int, 0x80);
pub const MPO_FILTER_MSG = @as(c_int, 0x100);
pub const MPO_TG_BLOCK_TRACKING = @as(c_int, 0x200);
pub const MPO_SERVICE_PORT = @as(c_int, 0x400);
pub const MPO_CONNECTION_PORT = @as(c_int, 0x800);
pub const MPO_REPLY_PORT = @as(c_int, 0x1000);
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS = @as(c_int, 0x2000);
pub const MPO_PROVISIONAL_REPLY_PORT = @as(c_int, 0x4000);
pub const MPO_EXCEPTION_PORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const GUARD_TYPE_MACH_PORT = @as(c_int, 0x1);
pub const MAX_FATAL_kGUARD_EXC_CODE = kGUARD_EXC_MSG_FILTERED;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE = kGUARD_EXC_RCV_INVALID_NAME;
pub const MPG_FLAGS_NONE = @as(c_ulonglong, 0x00);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = @as(c_ulonglong, 0x08) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = @as(c_ulonglong, 0x10) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MASK = @as(c_ulonglong, 0xff) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_IMMOVABLE_PINNED = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_STRICT = @as(c_int, 0x01);
pub const MPG_IMMOVABLE_RECEIVE = @as(c_int, 0x02);
pub const __COREFOUNDATION_CFSOCKET__ = @as(c_int, 1);
pub const __DISPATCH_PUBLIC__ = "";
pub const __OS_BASE__ = "";
pub const OS_NORETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:45:9
pub const OS_NOTHROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:46:9
pub const OS_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:47:9
pub const OS_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:48:9
pub const OS_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:49:9
pub const OS_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:50:9
pub const OS_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:51:9
pub const OS_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:52:9
pub const OS_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:53:9
pub const OS_NONNULL8 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:54:9
pub const OS_NONNULL9 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:55:9
pub const OS_NONNULL10 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:56:9
pub const OS_NONNULL11 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:57:9
pub const OS_NONNULL12 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:58:9
pub const OS_NONNULL13 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:59:9
pub const OS_NONNULL14 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:60:9
pub const OS_NONNULL15 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:61:9
pub const OS_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:62:9
pub const OS_SENTINEL = @compileError("unable to translate macro: undefined identifier `__sentinel__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:63:9
pub const OS_PURE = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:64:9
pub const OS_CONST = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:65:9
pub const OS_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:66:9
pub const OS_MALLOC = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:67:9
pub const OS_USED = @compileError("unable to translate macro: undefined identifier `__used__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:68:9
pub const OS_UNUSED = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:69:9
pub const OS_COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:70:9
pub const OS_WEAK = @compileError("unable to translate macro: undefined identifier `__weak__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:71:9
pub const OS_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `__weak_import__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:72:9
pub const OS_NOINLINE = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:73:9
pub const OS_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:74:9
pub const OS_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__transparent_union__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:75:9
pub const OS_ALIGNED = @compileError("unable to translate macro: undefined identifier `__aligned__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:76:9
pub const OS_FORMAT_PRINTF = @compileError("unable to translate macro: undefined identifier `__format__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:77:9
pub const OS_EXPORT = @compileError("unable to translate macro: undefined identifier `__visibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:78:9
pub inline fn OS_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    _ = &x;
    _ = &v;
    return __builtin_expect(x, v);
}
pub const OS_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__noescape__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:121:9
pub const OS_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:129:9
pub const OS_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:135:9
pub const OS_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:136:9
pub inline fn OS_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    _ = &expr;
    return __builtin_assume(expr);
}
pub const OS_OVERLOADABLE = @compileError("unable to translate macro: undefined identifier `__overloadable__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:149:9
pub const OS_ANALYZER_SUPPRESS = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:157:9
pub const __OS_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `enum_extensibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:161:9
pub const __OS_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `enum_extensibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:162:9
pub const __OS_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `flag_enum`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:176:9
pub const OS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:183:9
pub const OS_CLOSED_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:185:9
pub const OS_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:187:9
pub const OS_CLOSED_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:189:9
pub const OS_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__availability__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:240:9
pub const OS_SWIFT_UNAVAILABLE_FROM_ASYNC = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:247:9
pub const OS_SWIFT_NONISOLATED = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:249:9
pub const OS_SWIFT_NONISOLATED_UNSAFE = @compileError("unable to translate macro: undefined identifier `__swift_attr__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:250:9
pub const OS_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__swift_private__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:258:10
pub const OS_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__swift_name__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:264:10
pub const __OS_STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:269:9
pub inline fn OS_STRINGIFY(s: anytype) @TypeOf(__OS_STRINGIFY(s)) {
    _ = &s;
    return __OS_STRINGIFY(s);
}
pub const __OS_CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:271:9
pub inline fn OS_CONCAT(x: anytype, y: anytype) @TypeOf(__OS_CONCAT(x, y)) {
    _ = &x;
    _ = &y;
    return __OS_CONCAT(x, y);
}
pub const os_prevent_tail_call_optimization = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:275:9
pub inline fn os_is_compile_time_constant(expr: anytype) @TypeOf(__builtin_constant_p(expr)) {
    _ = &expr;
    return __builtin_constant_p(expr);
}
pub const os_compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:277:9
pub const OS_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/base.h:285:9
pub const OS_ASSUME_PTR_ABI_SINGLE_BEGIN = __ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_ASSUME_PTR_ABI_SINGLE_END = __ASSUME_PTR_ABI_SINGLE_END;
pub const OS_UNSAFE_INDEXABLE = "";
pub const OS_HEADER_INDEXABLE = "";
pub inline fn OS_COUNTED_BY(N: anytype) @TypeOf(__counted_by(N)) {
    _ = &N;
    return __counted_by(N);
}
pub inline fn OS_SIZED_BY(N: anytype) @TypeOf(__sized_by(N)) {
    _ = &N;
    return __sized_by(N);
}
pub const _UNISTD_H_ = "";
pub const _SYS_UNISTD_H_ = "";
pub const _POSIX_VERSION = @as(c_long, 200112);
pub const _POSIX2_VERSION = @as(c_long, 200112);
pub const _POSIX_VDISABLE = @import("std").zig.c_translation.cast(u8, '\xff');
pub const F_OK = @as(c_int, 0);
pub const X_OK = @as(c_int, 1) << @as(c_int, 0);
pub const W_OK = @as(c_int, 1) << @as(c_int, 1);
pub const R_OK = @as(c_int, 1) << @as(c_int, 2);
pub const _READ_OK = @as(c_int, 1) << @as(c_int, 9);
pub const _WRITE_OK = @as(c_int, 1) << @as(c_int, 10);
pub const _EXECUTE_OK = @as(c_int, 1) << @as(c_int, 11);
pub const _DELETE_OK = @as(c_int, 1) << @as(c_int, 12);
pub const _APPEND_OK = @as(c_int, 1) << @as(c_int, 13);
pub const _RMFILE_OK = @as(c_int, 1) << @as(c_int, 14);
pub const _RATTR_OK = @as(c_int, 1) << @as(c_int, 15);
pub const _WATTR_OK = @as(c_int, 1) << @as(c_int, 16);
pub const _REXT_OK = @as(c_int, 1) << @as(c_int, 17);
pub const _WEXT_OK = @as(c_int, 1) << @as(c_int, 18);
pub const _RPERM_OK = @as(c_int, 1) << @as(c_int, 19);
pub const _WPERM_OK = @as(c_int, 1) << @as(c_int, 20);
pub const _CHOWN_OK = @as(c_int, 1) << @as(c_int, 21);
pub const _ACCESS_EXTENDED_MASK = (((((((((((_READ_OK | _WRITE_OK) | _EXECUTE_OK) | _DELETE_OK) | _APPEND_OK) | _RMFILE_OK) | _REXT_OK) | _WEXT_OK) | _RATTR_OK) | _WATTR_OK) | _RPERM_OK) | _WPERM_OK) | _CHOWN_OK;
pub const L_SET = SEEK_SET;
pub const L_INCR = SEEK_CUR;
pub const L_XTND = SEEK_END;
pub const ACCESSX_MAX_DESCRIPTORS = @as(c_int, 100);
pub const ACCESSX_MAX_TABLESIZE = @as(c_int, 16) * @as(c_int, 1024);
pub const _PC_LINK_MAX = @as(c_int, 1);
pub const _PC_MAX_CANON = @as(c_int, 2);
pub const _PC_MAX_INPUT = @as(c_int, 3);
pub const _PC_NAME_MAX = @as(c_int, 4);
pub const _PC_PATH_MAX = @as(c_int, 5);
pub const _PC_PIPE_BUF = @as(c_int, 6);
pub const _PC_CHOWN_RESTRICTED = @as(c_int, 7);
pub const _PC_NO_TRUNC = @as(c_int, 8);
pub const _PC_VDISABLE = @as(c_int, 9);
pub const _PC_NAME_CHARS_MAX = @as(c_int, 10);
pub const _PC_CASE_SENSITIVE = @as(c_int, 11);
pub const _PC_CASE_PRESERVING = @as(c_int, 12);
pub const _PC_EXTENDED_SECURITY_NP = @as(c_int, 13);
pub const _PC_AUTH_OPAQUE_NP = @as(c_int, 14);
pub const _PC_2_SYMLINKS = @as(c_int, 15);
pub const _PC_ALLOC_SIZE_MIN = @as(c_int, 16);
pub const _PC_ASYNC_IO = @as(c_int, 17);
pub const _PC_FILESIZEBITS = @as(c_int, 18);
pub const _PC_PRIO_IO = @as(c_int, 19);
pub const _PC_REC_INCR_XFER_SIZE = @as(c_int, 20);
pub const _PC_REC_MAX_XFER_SIZE = @as(c_int, 21);
pub const _PC_REC_MIN_XFER_SIZE = @as(c_int, 22);
pub const _PC_REC_XFER_ALIGN = @as(c_int, 23);
pub const _PC_SYMLINK_MAX = @as(c_int, 24);
pub const _PC_SYNC_IO = @as(c_int, 25);
pub const _PC_XATTR_SIZE_BITS = @as(c_int, 26);
pub const _PC_MIN_HOLE_SIZE = @as(c_int, 27);
pub const _CS_PATH = @as(c_int, 1);
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const _XOPEN_VERSION = @as(c_int, 600);
pub const _XOPEN_XCU_VERSION = @as(c_int, 4);
pub const _POSIX_ADVISORY_INFO = -@as(c_int, 1);
pub const _POSIX_ASYNCHRONOUS_IO = -@as(c_int, 1);
pub const _POSIX_BARRIERS = -@as(c_int, 1);
pub const _POSIX_CHOWN_RESTRICTED = @as(c_long, 200112);
pub const _POSIX_CLOCK_SELECTION = -@as(c_int, 1);
pub const _POSIX_CPUTIME = -@as(c_int, 1);
pub const _POSIX_FSYNC = @as(c_long, 200112);
pub const _POSIX_IPV6 = @as(c_long, 200112);
pub const _POSIX_JOB_CONTROL = @as(c_long, 200112);
pub const _POSIX_MAPPED_FILES = @as(c_long, 200112);
pub const _POSIX_MEMLOCK = -@as(c_int, 1);
pub const _POSIX_MEMLOCK_RANGE = -@as(c_int, 1);
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200112);
pub const _POSIX_MESSAGE_PASSING = -@as(c_int, 1);
pub const _POSIX_MONOTONIC_CLOCK = -@as(c_int, 1);
pub const _POSIX_NO_TRUNC = @as(c_long, 200112);
pub const _POSIX_PRIORITIZED_IO = -@as(c_int, 1);
pub const _POSIX_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_RAW_SOCKETS = -@as(c_int, 1);
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200112);
pub const _POSIX_REALTIME_SIGNALS = -@as(c_int, 1);
pub const _POSIX_REGEXP = @as(c_long, 200112);
pub const _POSIX_SAVED_IDS = @as(c_long, 200112);
pub const _POSIX_SEMAPHORES = -@as(c_int, 1);
pub const _POSIX_SHARED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX_SHELL = @as(c_long, 200112);
pub const _POSIX_SPAWN = @as(c_long, 200112);
pub const _POSIX_SPIN_LOCKS = -@as(c_int, 1);
pub const _POSIX_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_SYNCHRONIZED_IO = -@as(c_int, 1);
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200112);
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200112);
pub const _POSIX_THREAD_CPUTIME = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_INHERIT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_PROTECT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200112);
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200112);
pub const _POSIX_THREAD_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_THREADS = @as(c_long, 200112);
pub const _POSIX_TIMEOUTS = -@as(c_int, 1);
pub const _POSIX_TIMERS = -@as(c_int, 1);
pub const _POSIX_TRACE = -@as(c_int, 1);
pub const _POSIX_TRACE_EVENT_FILTER = -@as(c_int, 1);
pub const _POSIX_TRACE_INHERIT = -@as(c_int, 1);
pub const _POSIX_TRACE_LOG = -@as(c_int, 1);
pub const _POSIX_TYPED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX2_C_BIND = @as(c_long, 200112);
pub const _POSIX2_C_DEV = @as(c_long, 200112);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200112);
pub const _POSIX2_FORT_DEV = -@as(c_int, 1);
pub const _POSIX2_FORT_RUN = @as(c_long, 200112);
pub const _POSIX2_LOCALEDEF = @as(c_long, 200112);
pub const _POSIX2_PBS = -@as(c_int, 1);
pub const _POSIX2_PBS_ACCOUNTING = -@as(c_int, 1);
pub const _POSIX2_PBS_CHECKPOINT = -@as(c_int, 1);
pub const _POSIX2_PBS_LOCATE = -@as(c_int, 1);
pub const _POSIX2_PBS_MESSAGE = -@as(c_int, 1);
pub const _POSIX2_PBS_TRACK = -@as(c_int, 1);
pub const _POSIX2_SW_DEV = @as(c_long, 200112);
pub const _POSIX2_UPE = @as(c_long, 200112);
pub const __ILP32_OFF32 = -@as(c_int, 1);
pub const __ILP32_OFFBIG = -@as(c_int, 1);
pub const __LP64_OFF64 = @as(c_int, 1);
pub const __LPBIG_OFFBIG = @as(c_int, 1);
pub const _POSIX_V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V6_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _POSIX_V7_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V7_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V7_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V7_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _V6_LP64_OFF64 = __LP64_OFF64;
pub const _V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XBS5_ILP32_OFF32 = __ILP32_OFF32;
pub const _XBS5_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _XBS5_LP64_OFF64 = __LP64_OFF64;
pub const _XBS5_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XOPEN_CRYPT = @as(c_int, 1);
pub const _XOPEN_ENH_I18N = @as(c_int, 1);
pub const _XOPEN_LEGACY = -@as(c_int, 1);
pub const _XOPEN_REALTIME = -@as(c_int, 1);
pub const _XOPEN_REALTIME_THREADS = -@as(c_int, 1);
pub const _XOPEN_SHM = @as(c_int, 1);
pub const _XOPEN_STREAMS = -@as(c_int, 1);
pub const _XOPEN_UNIX = @as(c_int, 1);
pub const _SC_ARG_MAX = @as(c_int, 1);
pub const _SC_CHILD_MAX = @as(c_int, 2);
pub const _SC_CLK_TCK = @as(c_int, 3);
pub const _SC_NGROUPS_MAX = @as(c_int, 4);
pub const _SC_OPEN_MAX = @as(c_int, 5);
pub const _SC_JOB_CONTROL = @as(c_int, 6);
pub const _SC_SAVED_IDS = @as(c_int, 7);
pub const _SC_VERSION = @as(c_int, 8);
pub const _SC_BC_BASE_MAX = @as(c_int, 9);
pub const _SC_BC_DIM_MAX = @as(c_int, 10);
pub const _SC_BC_SCALE_MAX = @as(c_int, 11);
pub const _SC_BC_STRING_MAX = @as(c_int, 12);
pub const _SC_COLL_WEIGHTS_MAX = @as(c_int, 13);
pub const _SC_EXPR_NEST_MAX = @as(c_int, 14);
pub const _SC_LINE_MAX = @as(c_int, 15);
pub const _SC_RE_DUP_MAX = @as(c_int, 16);
pub const _SC_2_VERSION = @as(c_int, 17);
pub const _SC_2_C_BIND = @as(c_int, 18);
pub const _SC_2_C_DEV = @as(c_int, 19);
pub const _SC_2_CHAR_TERM = @as(c_int, 20);
pub const _SC_2_FORT_DEV = @as(c_int, 21);
pub const _SC_2_FORT_RUN = @as(c_int, 22);
pub const _SC_2_LOCALEDEF = @as(c_int, 23);
pub const _SC_2_SW_DEV = @as(c_int, 24);
pub const _SC_2_UPE = @as(c_int, 25);
pub const _SC_STREAM_MAX = @as(c_int, 26);
pub const _SC_TZNAME_MAX = @as(c_int, 27);
pub const _SC_ASYNCHRONOUS_IO = @as(c_int, 28);
pub const _SC_PAGESIZE = @as(c_int, 29);
pub const _SC_MEMLOCK = @as(c_int, 30);
pub const _SC_MEMLOCK_RANGE = @as(c_int, 31);
pub const _SC_MEMORY_PROTECTION = @as(c_int, 32);
pub const _SC_MESSAGE_PASSING = @as(c_int, 33);
pub const _SC_PRIORITIZED_IO = @as(c_int, 34);
pub const _SC_PRIORITY_SCHEDULING = @as(c_int, 35);
pub const _SC_REALTIME_SIGNALS = @as(c_int, 36);
pub const _SC_SEMAPHORES = @as(c_int, 37);
pub const _SC_FSYNC = @as(c_int, 38);
pub const _SC_SHARED_MEMORY_OBJECTS = @as(c_int, 39);
pub const _SC_SYNCHRONIZED_IO = @as(c_int, 40);
pub const _SC_TIMERS = @as(c_int, 41);
pub const _SC_AIO_LISTIO_MAX = @as(c_int, 42);
pub const _SC_AIO_MAX = @as(c_int, 43);
pub const _SC_AIO_PRIO_DELTA_MAX = @as(c_int, 44);
pub const _SC_DELAYTIMER_MAX = @as(c_int, 45);
pub const _SC_MQ_OPEN_MAX = @as(c_int, 46);
pub const _SC_MAPPED_FILES = @as(c_int, 47);
pub const _SC_RTSIG_MAX = @as(c_int, 48);
pub const _SC_SEM_NSEMS_MAX = @as(c_int, 49);
pub const _SC_SEM_VALUE_MAX = @as(c_int, 50);
pub const _SC_SIGQUEUE_MAX = @as(c_int, 51);
pub const _SC_TIMER_MAX = @as(c_int, 52);
pub const _SC_NPROCESSORS_CONF = @as(c_int, 57);
pub const _SC_NPROCESSORS_ONLN = @as(c_int, 58);
pub const _SC_2_PBS = @as(c_int, 59);
pub const _SC_2_PBS_ACCOUNTING = @as(c_int, 60);
pub const _SC_2_PBS_CHECKPOINT = @as(c_int, 61);
pub const _SC_2_PBS_LOCATE = @as(c_int, 62);
pub const _SC_2_PBS_MESSAGE = @as(c_int, 63);
pub const _SC_2_PBS_TRACK = @as(c_int, 64);
pub const _SC_ADVISORY_INFO = @as(c_int, 65);
pub const _SC_BARRIERS = @as(c_int, 66);
pub const _SC_CLOCK_SELECTION = @as(c_int, 67);
pub const _SC_CPUTIME = @as(c_int, 68);
pub const _SC_FILE_LOCKING = @as(c_int, 69);
pub const _SC_GETGR_R_SIZE_MAX = @as(c_int, 70);
pub const _SC_GETPW_R_SIZE_MAX = @as(c_int, 71);
pub const _SC_HOST_NAME_MAX = @as(c_int, 72);
pub const _SC_LOGIN_NAME_MAX = @as(c_int, 73);
pub const _SC_MONOTONIC_CLOCK = @as(c_int, 74);
pub const _SC_MQ_PRIO_MAX = @as(c_int, 75);
pub const _SC_READER_WRITER_LOCKS = @as(c_int, 76);
pub const _SC_REGEXP = @as(c_int, 77);
pub const _SC_SHELL = @as(c_int, 78);
pub const _SC_SPAWN = @as(c_int, 79);
pub const _SC_SPIN_LOCKS = @as(c_int, 80);
pub const _SC_SPORADIC_SERVER = @as(c_int, 81);
pub const _SC_THREAD_ATTR_STACKADDR = @as(c_int, 82);
pub const _SC_THREAD_ATTR_STACKSIZE = @as(c_int, 83);
pub const _SC_THREAD_CPUTIME = @as(c_int, 84);
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 85);
pub const _SC_THREAD_KEYS_MAX = @as(c_int, 86);
pub const _SC_THREAD_PRIO_INHERIT = @as(c_int, 87);
pub const _SC_THREAD_PRIO_PROTECT = @as(c_int, 88);
pub const _SC_THREAD_PRIORITY_SCHEDULING = @as(c_int, 89);
pub const _SC_THREAD_PROCESS_SHARED = @as(c_int, 90);
pub const _SC_THREAD_SAFE_FUNCTIONS = @as(c_int, 91);
pub const _SC_THREAD_SPORADIC_SERVER = @as(c_int, 92);
pub const _SC_THREAD_STACK_MIN = @as(c_int, 93);
pub const _SC_THREAD_THREADS_MAX = @as(c_int, 94);
pub const _SC_TIMEOUTS = @as(c_int, 95);
pub const _SC_THREADS = @as(c_int, 96);
pub const _SC_TRACE = @as(c_int, 97);
pub const _SC_TRACE_EVENT_FILTER = @as(c_int, 98);
pub const _SC_TRACE_INHERIT = @as(c_int, 99);
pub const _SC_TRACE_LOG = @as(c_int, 100);
pub const _SC_TTY_NAME_MAX = @as(c_int, 101);
pub const _SC_TYPED_MEMORY_OBJECTS = @as(c_int, 102);
pub const _SC_V6_ILP32_OFF32 = @as(c_int, 103);
pub const _SC_V6_ILP32_OFFBIG = @as(c_int, 104);
pub const _SC_V6_LP64_OFF64 = @as(c_int, 105);
pub const _SC_V6_LPBIG_OFFBIG = @as(c_int, 106);
pub const _SC_IPV6 = @as(c_int, 118);
pub const _SC_RAW_SOCKETS = @as(c_int, 119);
pub const _SC_SYMLOOP_MAX = @as(c_int, 120);
pub const _SC_ATEXIT_MAX = @as(c_int, 107);
pub const _SC_IOV_MAX = @as(c_int, 56);
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _SC_XOPEN_CRYPT = @as(c_int, 108);
pub const _SC_XOPEN_ENH_I18N = @as(c_int, 109);
pub const _SC_XOPEN_LEGACY = @as(c_int, 110);
pub const _SC_XOPEN_REALTIME = @as(c_int, 111);
pub const _SC_XOPEN_REALTIME_THREADS = @as(c_int, 112);
pub const _SC_XOPEN_SHM = @as(c_int, 113);
pub const _SC_XOPEN_STREAMS = @as(c_int, 114);
pub const _SC_XOPEN_UNIX = @as(c_int, 115);
pub const _SC_XOPEN_VERSION = @as(c_int, 116);
pub const _SC_XOPEN_XCU_VERSION = @as(c_int, 121);
pub const _SC_XBS5_ILP32_OFF32 = @as(c_int, 122);
pub const _SC_XBS5_ILP32_OFFBIG = @as(c_int, 123);
pub const _SC_XBS5_LP64_OFF64 = @as(c_int, 124);
pub const _SC_XBS5_LPBIG_OFFBIG = @as(c_int, 125);
pub const _SC_SS_REPL_MAX = @as(c_int, 126);
pub const _SC_TRACE_EVENT_NAME_MAX = @as(c_int, 127);
pub const _SC_TRACE_NAME_MAX = @as(c_int, 128);
pub const _SC_TRACE_SYS_MAX = @as(c_int, 129);
pub const _SC_TRACE_USER_EVENT_MAX = @as(c_int, 130);
pub const _SC_PASS_MAX = @as(c_int, 131);
pub const _SC_PHYS_PAGES = @as(c_int, 200);
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS = @as(c_int, 2);
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = @as(c_int, 3);
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS = @as(c_int, 4);
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = @as(c_int, 5);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = @as(c_int, 6);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS = @as(c_int, 7);
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS = @as(c_int, 8);
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS = @as(c_int, 9);
pub const _CS_POSIX_V6_LP64_OFF64_LIBS = @as(c_int, 10);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = @as(c_int, 11);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 12);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = @as(c_int, 13);
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = @as(c_int, 14);
pub const _CS_XBS5_ILP32_OFF32_CFLAGS = @as(c_int, 20);
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS = @as(c_int, 21);
pub const _CS_XBS5_ILP32_OFF32_LIBS = @as(c_int, 22);
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS = @as(c_int, 23);
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS = @as(c_int, 24);
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS = @as(c_int, 25);
pub const _CS_XBS5_ILP32_OFFBIG_LIBS = @as(c_int, 26);
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = @as(c_int, 27);
pub const _CS_XBS5_LP64_OFF64_CFLAGS = @as(c_int, 28);
pub const _CS_XBS5_LP64_OFF64_LDFLAGS = @as(c_int, 29);
pub const _CS_XBS5_LP64_OFF64_LIBS = @as(c_int, 30);
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS = @as(c_int, 31);
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS = @as(c_int, 32);
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 33);
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS = @as(c_int, 34);
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = @as(c_int, 35);
pub const _CS_DARWIN_USER_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const _CS_DARWIN_USER_TEMP_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65537, .decimal);
pub const _CS_DARWIN_USER_CACHE_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65538, .decimal);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const _SYS_SELECT_H_ = "";
pub const _SYS__SELECT_H_ = "";
pub const _UUID_T = "";
pub const __GETHOSTUUID_H = "";
pub const SYNC_VOLUME_FULLSYNC = @as(c_int, 0x01);
pub const SYNC_VOLUME_WAIT = @as(c_int, 0x02);
pub const _SYS_FCNTL_H_ = "";
pub const O_RDONLY = @as(c_int, 0x0000);
pub const O_WRONLY = @as(c_int, 0x0001);
pub const O_RDWR = @as(c_int, 0x0002);
pub const O_ACCMODE = @as(c_int, 0x0003);
pub const FREAD = @as(c_int, 0x00000001);
pub const FWRITE = @as(c_int, 0x00000002);
pub const O_NONBLOCK = @as(c_int, 0x00000004);
pub const O_APPEND = @as(c_int, 0x00000008);
pub const O_SYNC = @as(c_int, 0x0080);
pub const O_SHLOCK = @as(c_int, 0x00000010);
pub const O_EXLOCK = @as(c_int, 0x00000020);
pub const O_ASYNC = @as(c_int, 0x00000040);
pub const O_FSYNC = O_SYNC;
pub const O_NOFOLLOW = @as(c_int, 0x00000100);
pub const O_CREAT = @as(c_int, 0x00000200);
pub const O_TRUNC = @as(c_int, 0x00000400);
pub const O_EXCL = @as(c_int, 0x00000800);
pub const O_RESOLVE_BENEATH = @as(c_int, 0x00001000);
pub const O_EVTONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const O_NOCTTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const O_DIRECTORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const O_SYMLINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const O_DSYNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hex);
pub const O_CLOEXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const O_NOFOLLOW_ANY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const O_EXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const O_SEARCH = O_EXEC | O_DIRECTORY;
pub const AT_FDCWD = -@as(c_int, 2);
pub const AT_EACCESS = @as(c_int, 0x0010);
pub const AT_SYMLINK_NOFOLLOW = @as(c_int, 0x0020);
pub const AT_SYMLINK_FOLLOW = @as(c_int, 0x0040);
pub const AT_REMOVEDIR = @as(c_int, 0x0080);
pub const AT_REALDEV = @as(c_int, 0x0200);
pub const AT_FDONLY = @as(c_int, 0x0400);
pub const AT_SYMLINK_NOFOLLOW_ANY = @as(c_int, 0x0800);
pub const O_DP_GETRAWENCRYPTED = @as(c_int, 0x0001);
pub const O_DP_GETRAWUNENCRYPTED = @as(c_int, 0x0002);
pub const O_DP_AUTHENTICATE = @as(c_int, 0x0004);
pub const AUTH_OPEN_NOAUTHFD = -@as(c_int, 1);
pub const FAPPEND = O_APPEND;
pub const FASYNC = O_ASYNC;
pub const FFSYNC = O_FSYNC;
pub const FFDSYNC = O_DSYNC;
pub const FNONBLOCK = O_NONBLOCK;
pub const FNDELAY = O_NONBLOCK;
pub const O_NDELAY = O_NONBLOCK;
pub const CPF_OVERWRITE = @as(c_int, 0x0001);
pub const CPF_IGNORE_MODE = @as(c_int, 0x0002);
pub const CPF_MASK = CPF_OVERWRITE | CPF_IGNORE_MODE;
pub const F_DUPFD = @as(c_int, 0);
pub const F_GETFD = @as(c_int, 1);
pub const F_SETFD = @as(c_int, 2);
pub const F_GETFL = @as(c_int, 3);
pub const F_SETFL = @as(c_int, 4);
pub const F_GETOWN = @as(c_int, 5);
pub const F_SETOWN = @as(c_int, 6);
pub const F_GETLK = @as(c_int, 7);
pub const F_SETLK = @as(c_int, 8);
pub const F_SETLKW = @as(c_int, 9);
pub const F_SETLKWTIMEOUT = @as(c_int, 10);
pub const F_FLUSH_DATA = @as(c_int, 40);
pub const F_CHKCLEAN = @as(c_int, 41);
pub const F_PREALLOCATE = @as(c_int, 42);
pub const F_SETSIZE = @as(c_int, 43);
pub const F_RDADVISE = @as(c_int, 44);
pub const F_RDAHEAD = @as(c_int, 45);
pub const F_NOCACHE = @as(c_int, 48);
pub const F_LOG2PHYS = @as(c_int, 49);
pub const F_GETPATH = @as(c_int, 50);
pub const F_FULLFSYNC = @as(c_int, 51);
pub const F_PATHPKG_CHECK = @as(c_int, 52);
pub const F_FREEZE_FS = @as(c_int, 53);
pub const F_THAW_FS = @as(c_int, 54);
pub const F_GLOBAL_NOCACHE = @as(c_int, 55);
pub const F_ADDSIGS = @as(c_int, 59);
pub const F_ADDFILESIGS = @as(c_int, 61);
pub const F_NODIRECT = @as(c_int, 62);
pub const F_GETPROTECTIONCLASS = @as(c_int, 63);
pub const F_SETPROTECTIONCLASS = @as(c_int, 64);
pub const F_LOG2PHYS_EXT = @as(c_int, 65);
pub const F_GETLKPID = @as(c_int, 66);
pub const F_SETBACKINGSTORE = @as(c_int, 70);
pub const F_GETPATH_MTMINFO = @as(c_int, 71);
pub const F_GETCODEDIR = @as(c_int, 72);
pub const F_SETNOSIGPIPE = @as(c_int, 73);
pub const F_GETNOSIGPIPE = @as(c_int, 74);
pub const F_TRANSCODEKEY = @as(c_int, 75);
pub const F_SINGLE_WRITER = @as(c_int, 76);
pub const F_GETPROTECTIONLEVEL = @as(c_int, 77);
pub const F_FINDSIGS = @as(c_int, 78);
pub const F_ADDFILESIGS_FOR_DYLD_SIM = @as(c_int, 83);
pub const F_BARRIERFSYNC = @as(c_int, 85);
pub const F_OFD_SETLK = @as(c_int, 90);
pub const F_OFD_SETLKW = @as(c_int, 91);
pub const F_OFD_GETLK = @as(c_int, 92);
pub const F_OFD_SETLKWTIMEOUT = @as(c_int, 93);
pub const F_ADDFILESIGS_RETURN = @as(c_int, 97);
pub const F_CHECK_LV = @as(c_int, 98);
pub const F_PUNCHHOLE = @as(c_int, 99);
pub const F_TRIM_ACTIVE_FILE = @as(c_int, 100);
pub const F_SPECULATIVE_READ = @as(c_int, 101);
pub const F_GETPATH_NOFIRMLINK = @as(c_int, 102);
pub const F_ADDFILESIGS_INFO = @as(c_int, 103);
pub const F_ADDFILESUPPL = @as(c_int, 104);
pub const F_GETSIGSINFO = @as(c_int, 105);
pub const F_SETLEASE = @as(c_int, 106);
pub const F_GETLEASE = @as(c_int, 107);
pub inline fn F_SETLEASE_ARG(t: anytype, oc: anytype) @TypeOf(t | (oc << @as(c_int, 2))) {
    _ = &t;
    _ = &oc;
    return t | (oc << @as(c_int, 2));
}
pub const F_TRANSFEREXTENTS = @as(c_int, 110);
pub const F_ATTRIBUTION_TAG = @as(c_int, 111);
pub const F_ADDSIGS_MAIN_BINARY = @as(c_int, 113);
pub const FCNTL_FS_SPECIFIC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const F_DUPFD_CLOEXEC = @as(c_int, 67);
pub const FD_CLOEXEC = @as(c_int, 1);
pub const F_RDLCK = @as(c_int, 1);
pub const F_UNLCK = @as(c_int, 2);
pub const F_WRLCK = @as(c_int, 3);
pub const S_IFMT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal);
pub const S_IFIFO = @as(c_int, 0o010000);
pub const S_IFCHR = @as(c_int, 0o020000);
pub const S_IFDIR = @as(c_int, 0o040000);
pub const S_IFBLK = @as(c_int, 0o060000);
pub const S_IFREG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o100000, .octal);
pub const S_IFLNK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o120000, .octal);
pub const S_IFSOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o140000, .octal);
pub const S_IFWHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o160000, .octal);
pub const S_IRWXU = @as(c_int, 0o000700);
pub const S_IRUSR = @as(c_int, 0o000400);
pub const S_IWUSR = @as(c_int, 0o000200);
pub const S_IXUSR = @as(c_int, 0o000100);
pub const S_IRWXG = @as(c_int, 0o000070);
pub const S_IRGRP = @as(c_int, 0o000040);
pub const S_IWGRP = @as(c_int, 0o000020);
pub const S_IXGRP = @as(c_int, 0o000010);
pub const S_IRWXO = @as(c_int, 0o000007);
pub const S_IROTH = @as(c_int, 0o000004);
pub const S_IWOTH = @as(c_int, 0o000002);
pub const S_IXOTH = @as(c_int, 0o000001);
pub const S_ISUID = @as(c_int, 0o004000);
pub const S_ISGID = @as(c_int, 0o002000);
pub const S_ISVTX = @as(c_int, 0o001000);
pub const S_ISTXT = S_ISVTX;
pub const S_IREAD = S_IRUSR;
pub const S_IWRITE = S_IWUSR;
pub const S_IEXEC = S_IXUSR;
pub const F_ALLOCATECONTIG = @as(c_int, 0x00000002);
pub const F_ALLOCATEALL = @as(c_int, 0x00000004);
pub const F_ALLOCATEPERSIST = @as(c_int, 0x00000008);
pub const F_PEOFPOSMODE = @as(c_int, 3);
pub const F_VOLPOSMODE = @as(c_int, 4);
pub const USER_FSIGNATURES_CDHASH_LEN = @as(c_int, 20);
pub const GETSIGSINFO_PLATFORM_BINARY = @as(c_int, 1);
pub const LOCK_SH = @as(c_int, 0x01);
pub const LOCK_EX = @as(c_int, 0x02);
pub const LOCK_NB = @as(c_int, 0x04);
pub const LOCK_UN = @as(c_int, 0x08);
pub const ATTRIBUTION_NAME_MAX = @as(c_int, 255);
pub const F_CREATE_TAG = @as(c_int, 0x00000001);
pub const F_DELETE_TAG = @as(c_int, 0x00000002);
pub const F_QUERY_TAG = @as(c_int, 0x00000004);
pub const O_POPUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const O_ALERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const _FILESEC_T = "";
pub const FILESEC_GUID = FILESEC_UUID;
pub const _FILESEC_UNSET_PROPERTY = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _FILESEC_REMOVE_ACL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 1));
pub const DISPATCH_API_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20181008, .decimal);
pub const __DISPATCH_INDIRECT__ = "";
pub const __OS_OBJECT__ = "";
pub const OS_OBJECT_ASSUME_ABI_SINGLE_BEGIN = OS_ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_OBJECT_ASSUME_ABI_SINGLE_END = OS_ASSUME_PTR_ABI_SINGLE_END;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT = @as(c_int, 0);
pub const OS_OBJECT_USE_OBJC = @as(c_int, 0);
pub const OS_OBJECT_SWIFT3 = @as(c_int, 0);
pub const OS_OBJECT_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:105:9
pub const OS_OBJECT_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:106:9
pub const OS_OBJECT_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:111:9
pub const OS_OBJECT_RETURNS_RETAINED = "";
pub const OS_OBJECT_CONSUMED = "";
pub const OS_OBJECT_BRIDGE = "";
pub const OS_WARN_RESULT_NEEDS_RELEASE = OS_WARN_RESULT;
pub const OS_OBJECT_OBJC_RUNTIME_VISIBLE = "";
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE = @as(c_int, 0);
pub const OS_OBJECT_DECL_CLASS = @compileError("unable to translate macro: untranslatable usage of arg `name`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:248:9
pub const OS_OBJECT_DECL_SENDABLE_CLASS = @compileError("unable to translate macro: untranslatable usage of arg `name`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:250:9
pub const OS_OBJECT_DECL_PROTOCOL = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:268:9
pub const OS_OBJECT_SHOW_CLASS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:269:9
pub const OS_OBJECT_SHOW_SUBCLASS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:271:9
pub const OS_OBJECT_GLOBAL_OBJECT = @compileError("unable to translate C expr: unexpected token ')'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/object.h:275:9
pub const __OS_WORKGROUP__ = "";
pub const __OS_WORKGROUP_INDIRECT__ = "";
pub const __OS_WORKGROUP_BASE__ = "";
pub const __OS_CLOCK__ = "";
pub const OS_WORKGROUP_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:23:9
pub const OS_WORKGROUP_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:24:9
pub const OS_WORKGROUP_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:29:9
pub const OS_WORKGROUP_EXPORT = OS_EXPORT;
pub const OS_WORKGROUP_RETURNS_RETAINED = "";
pub const OS_WORKGROUP_ASSUME_ABI_SINGLE_BEGIN = OS_ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_WORKGROUP_ASSUME_ABI_SINGLE_END = OS_ASSUME_PTR_ABI_SINGLE_END;
pub const OS_WORKGROUP_UNSAFE_INDEXABLE = "";
pub const OS_WORKGROUP_DECL = @compileError("unable to translate macro: undefined identifier `OS_OBJECT_CLASS`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:36:9
pub const OS_WORKGROUP_SUBCLASS_DECL_PROTO = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:45:9
pub const OS_WORKGROUP_SUBCLASS_DECL = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_base.h:48:9
pub const __OS_WORKGROUP_ATTR_SIZE__ = @as(c_int, 60);
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = @as(c_int, 56);
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = @as(c_int, 36);
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863B4, .hex);
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863C4, .hex);
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x52A74C4D, .hex);
pub const __OS_WORKGROUP_OBJECT__ = "";
pub const OS_WORKGROUP_ATTR_INITIALIZER_DEFAULT = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_object.h:66:9
pub const __OS_WORKGROUP_INTERVAL__ = "";
pub const OS_WORKGROUP_INTERVAL_DATA_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/os/workgroup_interval.h:58:9
pub const __OS_WORKGROUP_PARALLEL__ = "";
pub const __DISPATCH_BASE__ = "";
pub const DISPATCH_NORETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:45:9
pub const DISPATCH_NOTHROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:46:9
pub const DISPATCH_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:47:9
pub const DISPATCH_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:48:9
pub const DISPATCH_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:49:9
pub const DISPATCH_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:50:9
pub const DISPATCH_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:51:9
pub const DISPATCH_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:52:9
pub const DISPATCH_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:53:9
pub const DISPATCH_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:58:9
pub const DISPATCH_SENTINEL = @compileError("unable to translate macro: undefined identifier `__sentinel__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:60:9
pub const DISPATCH_PURE = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:61:9
pub const DISPATCH_CONST = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:62:9
pub const DISPATCH_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:63:9
pub const DISPATCH_MALLOC = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:64:9
pub const DISPATCH_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:65:9
pub const DISPATCH_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__unavailable__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:66:9
pub const DISPATCH_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `__unavailable__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:67:9
pub const DISPATCH_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:148:11
pub const DISPATCH_LINUX_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:157:9
pub const DISPATCH_FREEBSD_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:164:9
pub const DISPATCH_ALIAS_V2 = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:169:9
pub const DISPATCH_EXPORT = @compileError("unable to translate macro: undefined identifier `visibility`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:182:9
pub const DISPATCH_INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:188:9
pub inline fn DISPATCH_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    _ = &x;
    _ = &v;
    return __builtin_expect(x, v);
}
pub const dispatch_compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:195:9
pub const DISPATCH_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:202:9
pub inline fn DISPATCH_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    _ = &expr;
    return __builtin_assume(expr);
}
pub const DISPATCH_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__noescape__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:214:9
pub const DISPATCH_COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:220:9
pub const DISPATCH_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:226:9
pub const DISPATCH_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:227:9
pub const DISPATCH_ASSUME_ABI_SINGLE_BEGIN = "";
pub const DISPATCH_ASSUME_ABI_SINGLE_END = "";
pub const DISPATCH_UNSAFE_INDEXABLE = "";
pub const DISPATCH_COUNTED_BY = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:243:9
pub const DISPATCH_SIZED_BY = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:244:9
pub const DISPATCH_OSX_SUPPORTS_AT_LEAST = @compileError("unable to translate macro: undefined identifier `__IPHONE_OS_VERSION_MIN_REQUIRED`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:247:9
pub const DISPATCH_RETURNS_RETAINED_BLOCK = @compileError("unable to translate macro: undefined identifier `__ns_returns_retained__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:270:9
pub const __DISPATCH_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:277:9
pub const __DISPATCH_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:278:9
pub const __DISPATCH_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `__flag_enum__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:285:9
pub const DISPATCH_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:293:9
pub const DISPATCH_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:295:9
pub const DISPATCH_ENUM_API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:307:9
pub const DISPATCH_ENUM_API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:308:9
pub const DISPATCH_ENUM_API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:309:9
pub const DISPATCH_SWIFT3_OVERLAY = @as(c_int, 0);
pub const DISPATCH_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__availability__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:324:9
pub const DISPATCH_SWIFT3_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:333:9
pub const DISPATCH_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__swift_private__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:337:9
pub const DISPATCH_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__swift_name__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:343:9
pub const DISPATCH_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__transparent_union__`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/base.h:349:9
pub const __DISPATCH_TIME__ = "";
pub const _MACH_CLOCK_TYPES_H_ = "";
pub const _MACH_TIME_VALUE_H_ = "";
pub const TIME_MICROS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const time_value_add_usec = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/time_value.h:79:9
pub const time_value_add = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/time_value.h:87:9
pub const SYSTEM_CLOCK = @as(c_int, 0);
pub const CALENDAR_CLOCK = @as(c_int, 1);
pub const REALTIME_CLOCK = @as(c_int, 0);
pub const CLOCK_GET_TIME_RES = @as(c_int, 1);
pub const CLOCK_ALARM_CURRES = @as(c_int, 3);
pub const CLOCK_ALARM_MINRES = @as(c_int, 4);
pub const CLOCK_ALARM_MAXRES = @as(c_int, 5);
pub const NSEC_PER_USEC = @as(c_ulonglong, 1000);
pub const USEC_PER_SEC = @as(c_ulonglong, 1000000);
pub const NSEC_PER_SEC = @as(c_ulonglong, 1000000000);
pub const NSEC_PER_MSEC = @as(c_ulonglong, 1000000);
pub inline fn BAD_MACH_TIMESPEC(t: anytype) @TypeOf((t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC))) {
    _ = &t;
    return (t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC));
}
pub inline fn CMP_MACH_TIMESPEC(t1: anytype, t2: anytype) @TypeOf(if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec) {
    _ = &t1;
    _ = &t2;
    return if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec;
}
pub const ADD_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/clock_types.h:99:9
pub const SUB_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/clock_types.h:109:9
pub const ALRMTYPE = @as(c_int, 0xff);
pub const TIME_ABSOLUTE = @as(c_int, 0x00);
pub const TIME_RELATIVE = @as(c_int, 0x01);
pub inline fn BAD_ALRMTYPE(t: anytype) @TypeOf((t & ~TIME_RELATIVE) != @as(c_int, 0)) {
    _ = &t;
    return (t & ~TIME_RELATIVE) != @as(c_int, 0);
}
pub const MSEC_PER_SEC = @as(c_ulonglong, 1000);
pub const DISPATCH_TIME_NOW = @as(c_ulonglong, 0);
pub const DISPATCH_TIME_FOREVER = ~@as(c_ulonglong, 0);
pub const __DISPATCH_OBJECT__ = "";
pub const _SYS_QOS_H = "";
pub const __QOS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/qos.h:114:9
pub const __QOS_CLASS_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/qos.h:115:9
pub const QOS_MIN_RELATIVE_PRIORITY = -@as(c_int, 15);
pub const DISPATCH_DECL = @compileError("unable to translate macro: untranslatable usage of arg `name`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:140:9
pub const DISPATCH_DECL_SUBCLASS = @compileError("unable to translate macro: undefined identifier `_t`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:141:9
pub inline fn DISPATCH_DECL_FACTORY_CLASS_SWIFT(name: anytype, swift_name: anytype) @TypeOf(DISPATCH_DECL_SWIFT(name, swift_name)) {
    _ = &name;
    _ = &swift_name;
    return DISPATCH_DECL_SWIFT(name, swift_name);
}
pub inline fn DISPATCH_DECL_SWIFT(name: anytype, swift_name: anytype) @TypeOf(DISPATCH_DECL(name)) {
    _ = &name;
    _ = &swift_name;
    return DISPATCH_DECL(name);
}
pub inline fn DISPATCH_DECL_SUBCLASS_SWIFT(name: anytype, base: anytype, swift_name: anytype) @TypeOf(DISPATCH_DECL_SUBCLASS(name, base)) {
    _ = &name;
    _ = &base;
    _ = &swift_name;
    return DISPATCH_DECL_SUBCLASS(name, base);
}
pub const DISPATCH_DECL_SERIAL_EXECUTOR_SWIFT = @compileError("unable to translate macro: undefined identifier `dispatch_queue`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:145:9
pub inline fn DISPATCH_GLOBAL_OBJECT(@"type": anytype, object: anytype) @TypeOf(@"type" & object) {
    _ = &@"type";
    _ = &object;
    return @"type" & object;
}
pub const DISPATCH_RETURNS_RETAINED = "";
pub const DISPATCH_SOURCE_DECL = @compileError("unable to translate C expr: unexpected token ';'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:183:9
pub inline fn DISPATCH_SOURCE_DECL_SWIFT(name: anytype, swift_name: anytype, protocol_name: anytype) @TypeOf(DISPATCH_SOURCE_DECL(name)) {
    _ = &name;
    _ = &swift_name;
    _ = &protocol_name;
    return DISPATCH_SOURCE_DECL(name);
}
pub inline fn DISPATCH_DATA_DECL(name: anytype) @TypeOf(DISPATCH_DECL(name)) {
    _ = &name;
    return DISPATCH_DECL(name);
}
pub inline fn DISPATCH_DATA_DECL_SWIFT(name: anytype, swift_name: anytype) @TypeOf(DISPATCH_DATA_DECL(name)) {
    _ = &name;
    _ = &swift_name;
    return DISPATCH_DATA_DECL(name);
}
pub const DISPATCH_SOURCE_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_source_type_`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/object.h:188:9
pub inline fn DISPATCH_SOURCE_TYPE_DECL_SWIFT(name: anytype, swift_name: anytype) @TypeOf(DISPATCH_SOURCE_TYPE_DECL(name)) {
    _ = &name;
    _ = &swift_name;
    return DISPATCH_SOURCE_TYPE_DECL(name);
}
pub const __DISPATCH_QUEUE__ = "";
pub const DISPATCH_APPLY_AUTO_AVAILABLE = @as(c_int, 1);
pub const DISPATCH_APPLY_QUEUE_ARG_NULLABILITY = @compileError("unable to translate macro: undefined identifier `_Nullable`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/queue.h:454:9
pub const DISPATCH_APPLY_AUTO = @compileError("unable to translate macro: undefined identifier `_Nonnull`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/queue.h:477:9
pub const DISPATCH_QUEUE_PRIORITY_HIGH = @as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT = @as(c_int, 0);
pub const DISPATCH_QUEUE_PRIORITY_LOW = -@as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND = INT16_MIN;
pub const DISPATCH_QUEUE_SERIAL = NULL;
pub const DISPATCH_QUEUE_SERIAL_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_SERIAL);
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/queue.h:745:9: warning: macro 'DISPATCH_QUEUE_CONCURRENT' contains a runtime value, translated to function
pub inline fn DISPATCH_QUEUE_CONCURRENT() @TypeOf(DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, _dispatch_queue_attr_concurrent)) {
    return DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, _dispatch_queue_attr_concurrent);
}
pub const DISPATCH_QUEUE_CONCURRENT_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_CONCURRENT);
pub const DISPATCH_QUEUE_SERIAL_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_QUEUE_CONCURRENT_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_CONCURRENT, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_TARGET_QUEUE_DEFAULT = NULL;
pub const DISPATCH_CURRENT_QUEUE_LABEL = NULL;
pub inline fn dispatch_assert_queue_debug(q: anytype) @TypeOf(dispatch_assert_queue(q)) {
    _ = &q;
    return dispatch_assert_queue(q);
}
pub inline fn dispatch_assert_queue_barrier_debug(q: anytype) @TypeOf(dispatch_assert_queue_barrier(q)) {
    _ = &q;
    return dispatch_assert_queue_barrier(q);
}
pub inline fn dispatch_assert_queue_not_debug(q: anytype) @TypeOf(dispatch_assert_queue_not(q)) {
    _ = &q;
    return dispatch_assert_queue_not(q);
}
pub const __DISPATCH_BLOCK__ = "";
pub const __DISPATCH_SOURCE__ = "";
pub const _MACH_MESSAGE_H_ = "";
pub const _MACH_KERN_RETURN_H_ = "";
pub const _MACH_MACHINE_KERN_RETURN_H_ = "";
pub const _MACH_ARM_KERN_RETURN_H_ = "";
pub const KERN_SUCCESS = @as(c_int, 0);
pub const KERN_INVALID_ADDRESS = @as(c_int, 1);
pub const KERN_PROTECTION_FAILURE = @as(c_int, 2);
pub const KERN_NO_SPACE = @as(c_int, 3);
pub const KERN_INVALID_ARGUMENT = @as(c_int, 4);
pub const KERN_FAILURE = @as(c_int, 5);
pub const KERN_RESOURCE_SHORTAGE = @as(c_int, 6);
pub const KERN_NOT_RECEIVER = @as(c_int, 7);
pub const KERN_NO_ACCESS = @as(c_int, 8);
pub const KERN_MEMORY_FAILURE = @as(c_int, 9);
pub const KERN_MEMORY_ERROR = @as(c_int, 10);
pub const KERN_ALREADY_IN_SET = @as(c_int, 11);
pub const KERN_NOT_IN_SET = @as(c_int, 12);
pub const KERN_NAME_EXISTS = @as(c_int, 13);
pub const KERN_ABORTED = @as(c_int, 14);
pub const KERN_INVALID_NAME = @as(c_int, 15);
pub const KERN_INVALID_TASK = @as(c_int, 16);
pub const KERN_INVALID_RIGHT = @as(c_int, 17);
pub const KERN_INVALID_VALUE = @as(c_int, 18);
pub const KERN_UREFS_OVERFLOW = @as(c_int, 19);
pub const KERN_INVALID_CAPABILITY = @as(c_int, 20);
pub const KERN_RIGHT_EXISTS = @as(c_int, 21);
pub const KERN_INVALID_HOST = @as(c_int, 22);
pub const KERN_MEMORY_PRESENT = @as(c_int, 23);
pub const KERN_MEMORY_DATA_MOVED = @as(c_int, 24);
pub const KERN_MEMORY_RESTART_COPY = @as(c_int, 25);
pub const KERN_INVALID_PROCESSOR_SET = @as(c_int, 26);
pub const KERN_POLICY_LIMIT = @as(c_int, 27);
pub const KERN_INVALID_POLICY = @as(c_int, 28);
pub const KERN_INVALID_OBJECT = @as(c_int, 29);
pub const KERN_ALREADY_WAITING = @as(c_int, 30);
pub const KERN_DEFAULT_SET = @as(c_int, 31);
pub const KERN_EXCEPTION_PROTECTED = @as(c_int, 32);
pub const KERN_INVALID_LEDGER = @as(c_int, 33);
pub const KERN_INVALID_MEMORY_CONTROL = @as(c_int, 34);
pub const KERN_INVALID_SECURITY = @as(c_int, 35);
pub const KERN_NOT_DEPRESSED = @as(c_int, 36);
pub const KERN_TERMINATED = @as(c_int, 37);
pub const KERN_LOCK_SET_DESTROYED = @as(c_int, 38);
pub const KERN_LOCK_UNSTABLE = @as(c_int, 39);
pub const KERN_LOCK_OWNED = @as(c_int, 40);
pub const KERN_LOCK_OWNED_SELF = @as(c_int, 41);
pub const KERN_SEMAPHORE_DESTROYED = @as(c_int, 42);
pub const KERN_RPC_SERVER_TERMINATED = @as(c_int, 43);
pub const KERN_RPC_TERMINATE_ORPHAN = @as(c_int, 44);
pub const KERN_RPC_CONTINUE_ORPHAN = @as(c_int, 45);
pub const KERN_NOT_SUPPORTED = @as(c_int, 46);
pub const KERN_NODE_DOWN = @as(c_int, 47);
pub const KERN_NOT_WAITING = @as(c_int, 48);
pub const KERN_OPERATION_TIMED_OUT = @as(c_int, 49);
pub const KERN_CODESIGN_ERROR = @as(c_int, 50);
pub const KERN_POLICY_STATIC = @as(c_int, 51);
pub const KERN_INSUFFICIENT_BUFFER_SIZE = @as(c_int, 52);
pub const KERN_DENIED = @as(c_int, 53);
pub const KERN_MISSING_KC = @as(c_int, 54);
pub const KERN_INVALID_KC = @as(c_int, 55);
pub const KERN_NOT_FOUND = @as(c_int, 56);
pub const KERN_RETURN_MAX = @as(c_int, 0x100);
pub const MACH_MSG_TIMEOUT_NONE = @import("std").zig.c_translation.cast(mach_msg_timeout_t, @as(c_int, 0));
pub const MACH_MSGH_BITS_ZERO = @as(c_int, 0x00000000);
pub const MACH_MSGH_BITS_REMOTE_MASK = @as(c_int, 0x0000001f);
pub const MACH_MSGH_BITS_LOCAL_MASK = @as(c_int, 0x00001f00);
pub const MACH_MSGH_BITS_VOUCHER_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001f0000, .hex);
pub const MACH_MSGH_BITS_PORTS_MASK = (MACH_MSGH_BITS_REMOTE_MASK | MACH_MSGH_BITS_LOCAL_MASK) | MACH_MSGH_BITS_VOUCHER_MASK;
pub const MACH_MSGH_BITS_COMPLEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const MACH_MSGH_BITS_USER = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x801f1f1f, .hex);
pub const MACH_MSGH_BITS_RAISEIMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const MACH_MSGH_BITS_DENAP = MACH_MSGH_BITS_RAISEIMP;
pub const MACH_MSGH_BITS_IMPHOLDASRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const MACH_MSGH_BITS_DENAPHOLDASRT = MACH_MSGH_BITS_IMPHOLDASRT;
pub const MACH_MSGH_BITS_CIRCULAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const MACH_MSGH_BITS_USED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xb01f1f1f, .hex);
pub inline fn MACH_MSGH_BITS(remote: anytype, local: anytype) @TypeOf(remote | (local << @as(c_int, 8))) {
    _ = &remote;
    _ = &local;
    return remote | (local << @as(c_int, 8));
}
pub inline fn MACH_MSGH_BITS_SET_PORTS(remote: anytype, local: anytype, voucher: anytype) @TypeOf(((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK)) {
    _ = &remote;
    _ = &local;
    _ = &voucher;
    return ((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK);
}
pub inline fn MACH_MSGH_BITS_SET(remote: anytype, local: anytype, voucher: anytype, other: anytype) @TypeOf(MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK)) {
    _ = &remote;
    _ = &local;
    _ = &voucher;
    _ = &other;
    return MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK);
}
pub inline fn MACH_MSGH_BITS_REMOTE(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_REMOTE_MASK) {
    _ = &bits;
    return bits & MACH_MSGH_BITS_REMOTE_MASK;
}
pub inline fn MACH_MSGH_BITS_LOCAL(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8)) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8);
}
pub inline fn MACH_MSGH_BITS_VOUCHER(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16)) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16);
}
pub inline fn MACH_MSGH_BITS_PORTS(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_PORTS_MASK) {
    _ = &bits;
    return bits & MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_OTHER(bits: anytype) @TypeOf(bits & ~MACH_MSGH_BITS_PORTS_MASK) {
    _ = &bits;
    return bits & ~MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_HAS_REMOTE(bits: anytype) @TypeOf(MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_LOCAL(bits: anytype) @TypeOf(MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_VOUCHER(bits: anytype) @TypeOf(MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_IS_COMPLEX(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_RAISED_IMPORTANCE(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HOLDS_IMPORTANCE_ASSERTION(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO;
}
pub const MACH_MSG_SIZE_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_size_t, @as(c_int, 0));
pub const MACH_MSG_PRIORITY_UNSPECIFIED = @import("std").zig.c_translation.cast(mach_msg_priority_t, @as(c_int, 0));
pub const MACH_MSG_TYPE_MOVE_RECEIVE = @as(c_int, 16);
pub const MACH_MSG_TYPE_MOVE_SEND = @as(c_int, 17);
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE = @as(c_int, 18);
pub const MACH_MSG_TYPE_COPY_SEND = @as(c_int, 19);
pub const MACH_MSG_TYPE_MAKE_SEND = @as(c_int, 20);
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE = @as(c_int, 21);
pub const MACH_MSG_TYPE_COPY_RECEIVE = @as(c_int, 22);
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE = @as(c_int, 24);
pub const MACH_MSG_TYPE_DISPOSE_SEND = @as(c_int, 25);
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE = @as(c_int, 26);
pub const MACH_MSG_PHYSICAL_COPY = @as(c_int, 0);
pub const MACH_MSG_VIRTUAL_COPY = @as(c_int, 1);
pub const MACH_MSG_ALLOCATE = @as(c_int, 2);
pub const MACH_MSG_OVERWRITE = @as(c_int, 3);
pub const MACH_MSG_GUARD_FLAGS_NONE = @as(c_int, 0x0000);
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = @as(c_int, 0x0001);
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = @as(c_int, 0x0002);
pub const MACH_MSG_GUARD_FLAGS_MASK = @as(c_int, 0x0003);
pub const MACH_MSG_PORT_DESCRIPTOR = @as(c_int, 0);
pub const MACH_MSG_OOL_DESCRIPTOR = @as(c_int, 1);
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR = @as(c_int, 2);
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR = @as(c_int, 3);
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR = @as(c_int, 4);
pub const MACH_MSG_DESCRIPTOR_MAX = MACH_MSG_GUARDED_PORT_DESCRIPTOR;
pub const __ipc_desc_sign = @compileError("unable to translate C expr: unexpected token ''");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:289:9
pub const MACH_MSG_BODY_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_body_t, @as(c_int, 0));
pub const MACH_MSG_DESCRIPTOR_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_descriptor_t, @as(c_int, 0));
pub const msgh_reserved = @compileError("unable to translate macro: undefined identifier `msgh_voucher_port`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:432:9
pub const MACH_MSG_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_header_t, @as(c_int, 0));
pub const MACH_MSG_TRAILER_FORMAT_0 = @as(c_int, 0);
pub const INVALID_AUDIT_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:504:9
pub const MACH_MSG_FILTER_POLICY_ALLOW = @import("std").zig.c_translation.cast(mach_msg_filter_id, @as(c_int, 0));
pub const MACH_MSG_TRAILER_MINIMUM_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_trailer_t);
pub const MAX_TRAILER_SIZE = @import("std").zig.c_translation.cast(mach_msg_size_t, @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
pub const MACH_MSG_TRAILER_FORMAT_0_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_format_0_trailer_t);
pub const KERNEL_SECURITY_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:580:11
pub const KERNEL_AUDIT_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:583:11
pub const MACH_MSG_HEADER_EMPTY = @compileError("unable to translate C expr: unexpected token '}'");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:588:9
pub inline fn round_msg(x: anytype) @TypeOf(((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1))) {
    _ = &x;
    return ((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1));
}
pub const MACH_MSG_SIZE_MAX = @import("std").zig.c_translation.cast(mach_msg_size_t, ~@as(c_int, 0));
pub const MACH_MSG_SIZE_RELIABLE = @import("std").zig.c_translation.cast(mach_msg_size_t, @as(c_int, 256)) * @as(c_int, 1024);
pub const MACH_MSGH_KIND_NORMAL = @as(c_int, 0x00000000);
pub const MACH_MSGH_KIND_NOTIFICATION = @as(c_int, 0x00000001);
pub const msgh_kind = @compileError("unable to translate macro: undefined identifier `msgh_seqno`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/mach/message.h:633:9
pub const mach_msg_kind_t = mach_port_seqno_t;
pub const MACH_MSG_TYPE_PORT_NONE = @as(c_int, 0);
pub const MACH_MSG_TYPE_PORT_NAME = @as(c_int, 15);
pub const MACH_MSG_TYPE_PORT_RECEIVE = MACH_MSG_TYPE_MOVE_RECEIVE;
pub const MACH_MSG_TYPE_PORT_SEND = MACH_MSG_TYPE_MOVE_SEND;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE = MACH_MSG_TYPE_MOVE_SEND_ONCE;
pub const MACH_MSG_TYPE_LAST = @as(c_int, 22);
pub const MACH_MSG_TYPE_POLYMORPHIC = @import("std").zig.c_translation.cast(mach_msg_type_name_t, -@as(c_int, 1));
pub inline fn MACH_MSG_TYPE_PORT_ANY(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_SEND(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_SEND_ONCE(x: anytype) @TypeOf((x == MACH_MSG_TYPE_MOVE_SEND_ONCE) or (x == MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    _ = &x;
    return (x == MACH_MSG_TYPE_MOVE_SEND_ONCE) or (x == MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_RIGHT(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE);
}
pub const MACH_MSG_OPTION_NONE = @as(c_int, 0x00000000);
pub const MACH_SEND_MSG = @as(c_int, 0x00000001);
pub const MACH_RCV_MSG = @as(c_int, 0x00000002);
pub const MACH_RCV_LARGE = @as(c_int, 0x00000004);
pub const MACH_RCV_LARGE_IDENTITY = @as(c_int, 0x00000008);
pub const MACH_SEND_TIMEOUT = @as(c_int, 0x00000010);
pub const MACH_SEND_OVERRIDE = @as(c_int, 0x00000020);
pub const MACH_SEND_INTERRUPT = @as(c_int, 0x00000040);
pub const MACH_SEND_NOTIFY = @as(c_int, 0x00000080);
pub const MACH_SEND_ALWAYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const MACH_SEND_FILTER_NONFATAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const MACH_SEND_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const MACH_SEND_NOIMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const MACH_SEND_NODENAP = MACH_SEND_NOIMPORTANCE;
pub const MACH_SEND_IMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const MACH_SEND_SYNC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const MACH_SEND_PROPAGATE_QOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const MACH_SEND_SYNC_USE_THRPRI = MACH_SEND_PROPAGATE_QOS;
pub const MACH_SEND_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const MACH_RCV_TIMEOUT = @as(c_int, 0x00000100);
pub const MACH_RCV_NOTIFY = @as(c_int, 0x00000000);
pub const MACH_RCV_INTERRUPT = @as(c_int, 0x00000400);
pub const MACH_RCV_VOUCHER = @as(c_int, 0x00000800);
pub const MACH_RCV_OVERWRITE = @as(c_int, 0x00000000);
pub const MACH_RCV_GUARDED_DESC = @as(c_int, 0x00001000);
pub const MACH_RCV_SYNC_WAIT = @as(c_int, 0x00004000);
pub const MACH_RCV_SYNC_PEEK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const MACH_MSG_STRICT_REPLY = @as(c_int, 0x00000200);
pub const MACH_RCV_TRAILER_NULL = @as(c_int, 0);
pub const MACH_RCV_TRAILER_SEQNO = @as(c_int, 1);
pub const MACH_RCV_TRAILER_SENDER = @as(c_int, 2);
pub const MACH_RCV_TRAILER_AUDIT = @as(c_int, 3);
pub const MACH_RCV_TRAILER_CTX = @as(c_int, 4);
pub const MACH_RCV_TRAILER_AV = @as(c_int, 7);
pub const MACH_RCV_TRAILER_LABELS = @as(c_int, 8);
pub inline fn MACH_RCV_TRAILER_TYPE(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 28)) {
    _ = &x;
    return (x & @as(c_int, 0xf)) << @as(c_int, 28);
}
pub inline fn MACH_RCV_TRAILER_ELEMENTS(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 24)) {
    _ = &x;
    return (x & @as(c_int, 0xf)) << @as(c_int, 24);
}
pub const MACH_RCV_TRAILER_MASK = @as(c_int, 0xf) << @as(c_int, 24);
pub inline fn GET_RCV_ELEMENTS(y: anytype) @TypeOf((y >> @as(c_int, 24)) & @as(c_int, 0xf)) {
    _ = &y;
    return (y >> @as(c_int, 24)) & @as(c_int, 0xf);
}
pub inline fn REQUESTED_TRAILER_SIZE_NATIVE(y: anytype) mach_msg_trailer_size_t {
    _ = &y;
    return @import("std").zig.c_translation.cast(mach_msg_trailer_size_t, if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) @import("std").zig.c_translation.sizeof(mach_msg_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) @import("std").zig.c_translation.sizeof(mach_msg_seqno_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) @import("std").zig.c_translation.sizeof(mach_msg_security_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) @import("std").zig.c_translation.sizeof(mach_msg_audit_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_CTX) @import("std").zig.c_translation.sizeof(mach_msg_context_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AV) @import("std").zig.c_translation.sizeof(mach_msg_mac_trailer_t) else @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
}
pub inline fn REQUESTED_TRAILER_SIZE(y: anytype) @TypeOf(REQUESTED_TRAILER_SIZE_NATIVE(y)) {
    _ = &y;
    return REQUESTED_TRAILER_SIZE_NATIVE(y);
}
pub const MACH_MSG_SUCCESS = @as(c_int, 0x00000000);
pub const MACH_MSG_MASK = @as(c_int, 0x00003e00);
pub const MACH_MSG_IPC_SPACE = @as(c_int, 0x00002000);
pub const MACH_MSG_VM_SPACE = @as(c_int, 0x00001000);
pub const MACH_MSG_IPC_KERNEL = @as(c_int, 0x00000800);
pub const MACH_MSG_VM_KERNEL = @as(c_int, 0x00000400);
pub const MACH_SEND_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000001, .hex);
pub const MACH_SEND_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000002, .hex);
pub const MACH_SEND_INVALID_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000003, .hex);
pub const MACH_SEND_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000004, .hex);
pub const MACH_SEND_INVALID_VOUCHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000005, .hex);
pub const MACH_SEND_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000007, .hex);
pub const MACH_SEND_MSG_TOO_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000008, .hex);
pub const MACH_SEND_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000009, .hex);
pub const MACH_SEND_INVALID_RIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000a, .hex);
pub const MACH_SEND_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000b, .hex);
pub const MACH_SEND_INVALID_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000c, .hex);
pub const MACH_SEND_NO_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000d, .hex);
pub const MACH_SEND_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000e, .hex);
pub const MACH_SEND_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000f, .hex);
pub const MACH_SEND_INVALID_HEADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000010, .hex);
pub const MACH_SEND_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000011, .hex);
pub const MACH_SEND_INVALID_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000012, .hex);
pub const MACH_SEND_INVALID_OPTIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000013, .hex);
pub const MACH_SEND_INVALID_RT_OOL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000015, .hex);
pub const MACH_SEND_NO_GRANT_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000016, .hex);
pub const MACH_SEND_MSG_FILTERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000017, .hex);
pub const MACH_SEND_AUX_TOO_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000018, .hex);
pub const MACH_SEND_AUX_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000019, .hex);
pub const MACH_RCV_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004001, .hex);
pub const MACH_RCV_INVALID_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004002, .hex);
pub const MACH_RCV_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004003, .hex);
pub const MACH_RCV_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004004, .hex);
pub const MACH_RCV_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004005, .hex);
pub const MACH_RCV_PORT_CHANGED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004006, .hex);
pub const MACH_RCV_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004007, .hex);
pub const MACH_RCV_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004008, .hex);
pub const MACH_RCV_PORT_DIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004009, .hex);
pub const MACH_RCV_IN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400a, .hex);
pub const MACH_RCV_HEADER_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400b, .hex);
pub const MACH_RCV_BODY_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400c, .hex);
pub const MACH_RCV_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400d, .hex);
pub const MACH_RCV_SCATTER_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400e, .hex);
pub const MACH_RCV_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400f, .hex);
pub const MACH_RCV_IN_PROGRESS_TIMED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004011, .hex);
pub const MACH_RCV_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004012, .hex);
pub const MACH_RCV_INVALID_ARGUMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004013, .hex);
pub const DISPATCH_SOURCE_TYPE_DATA_ADD = &_dispatch_source_type_data_add;
pub const DISPATCH_SOURCE_TYPE_DATA_OR = &_dispatch_source_type_data_or;
pub const DISPATCH_SOURCE_TYPE_DATA_REPLACE = &_dispatch_source_type_data_replace;
pub const DISPATCH_SOURCE_TYPE_MACH_SEND = &_dispatch_source_type_mach_send;
pub const DISPATCH_SOURCE_TYPE_MACH_RECV = &_dispatch_source_type_mach_recv;
pub const DISPATCH_SOURCE_TYPE_MEMORYPRESSURE = &_dispatch_source_type_memorypressure;
pub const DISPATCH_SOURCE_TYPE_PROC = &_dispatch_source_type_proc;
pub const DISPATCH_SOURCE_TYPE_READ = &_dispatch_source_type_read;
pub const DISPATCH_SOURCE_TYPE_SIGNAL = &_dispatch_source_type_signal;
pub const DISPATCH_SOURCE_TYPE_TIMER = &_dispatch_source_type_timer;
pub const DISPATCH_SOURCE_TYPE_VNODE = &_dispatch_source_type_vnode;
pub const DISPATCH_SOURCE_TYPE_WRITE = &_dispatch_source_type_write;
pub const DISPATCH_MACH_SEND_DEAD = @as(c_int, 0x1);
pub const DISPATCH_MEMORYPRESSURE_NORMAL = @as(c_int, 0x01);
pub const DISPATCH_MEMORYPRESSURE_WARN = @as(c_int, 0x02);
pub const DISPATCH_MEMORYPRESSURE_CRITICAL = @as(c_int, 0x04);
pub const DISPATCH_PROC_EXIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const DISPATCH_PROC_FORK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const DISPATCH_PROC_EXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const DISPATCH_PROC_SIGNAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const DISPATCH_VNODE_DELETE = @as(c_int, 0x1);
pub const DISPATCH_VNODE_WRITE = @as(c_int, 0x2);
pub const DISPATCH_VNODE_EXTEND = @as(c_int, 0x4);
pub const DISPATCH_VNODE_ATTRIB = @as(c_int, 0x8);
pub const DISPATCH_VNODE_LINK = @as(c_int, 0x10);
pub const DISPATCH_VNODE_RENAME = @as(c_int, 0x20);
pub const DISPATCH_VNODE_REVOKE = @as(c_int, 0x40);
pub const DISPATCH_VNODE_FUNLOCK = @as(c_int, 0x100);
pub const DISPATCH_TIMER_STRICT = @as(c_int, 0x1);
pub const __DISPATCH_GROUP__ = "";
pub const __DISPATCH_SEMAPHORE__ = "";
pub const __DISPATCH_ONCE__ = "";
pub const DISPATCH_ONCE_INLINE_FASTPATH = @as(c_int, 1);
pub const __DISPATCH_DATA__ = "";
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/data.h:52:9: warning: macro 'dispatch_data_empty' contains a runtime value, translated to function
pub inline fn dispatch_data_empty() @TypeOf(DISPATCH_GLOBAL_OBJECT(dispatch_data_t, _dispatch_data_empty)) {
    return DISPATCH_GLOBAL_OBJECT(dispatch_data_t, _dispatch_data_empty);
}
pub const DISPATCH_DATA_DESTRUCTOR_DEFAULT = NULL;
pub const DISPATCH_DATA_DESTRUCTOR_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_data_destructor_`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/dispatch/data.h:67:9
pub const DISPATCH_DATA_DESTRUCTOR_FREE = _dispatch_data_destructor_free;
pub const DISPATCH_DATA_DESTRUCTOR_MUNMAP = _dispatch_data_destructor_munmap;
pub const __DISPATCH_IO__ = "";
pub const DISPATCH_IO_STREAM = @as(c_int, 0);
pub const DISPATCH_IO_RANDOM = @as(c_int, 1);
pub const DISPATCH_IO_STOP = @as(c_int, 0x1);
pub const DISPATCH_IO_STRICT_INTERVAL = @as(c_int, 0x1);
pub const __DISPATCH_WORKLOOP__ = "";
pub const _DISPATCH_SWIFT_SHIMS_ = "";
pub const __COREFOUNDATION_CFSET__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFTREE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLACCESS__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUUID__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUTILITIES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBUNDLE__ = @as(c_int, 1);
pub const _MACH_MACHINE_H_ = "";
pub const CPU_STATE_MAX = @as(c_int, 4);
pub const CPU_STATE_USER = @as(c_int, 0);
pub const CPU_STATE_SYSTEM = @as(c_int, 1);
pub const CPU_STATE_IDLE = @as(c_int, 2);
pub const CPU_STATE_NICE = @as(c_int, 3);
pub const CPU_ARCH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex);
pub const CPU_ARCH_ABI64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const CPU_ARCH_ABI64_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const CPU_TYPE_ANY = @import("std").zig.c_translation.cast(cpu_type_t, -@as(c_int, 1));
pub const CPU_TYPE_VAX = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 1));
pub const CPU_TYPE_MC680x0 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 6));
pub const CPU_TYPE_X86 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 7));
pub const CPU_TYPE_I386 = CPU_TYPE_X86;
pub const CPU_TYPE_X86_64 = CPU_TYPE_X86 | CPU_ARCH_ABI64;
pub const CPU_TYPE_MC98000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 10));
pub const CPU_TYPE_HPPA = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 11));
pub const CPU_TYPE_ARM = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 12));
pub const CPU_TYPE_ARM64 = CPU_TYPE_ARM | CPU_ARCH_ABI64;
pub const CPU_TYPE_ARM64_32 = CPU_TYPE_ARM | CPU_ARCH_ABI64_32;
pub const CPU_TYPE_MC88000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 13));
pub const CPU_TYPE_SPARC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 14));
pub const CPU_TYPE_I860 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 15));
pub const CPU_TYPE_POWERPC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 18));
pub const CPU_TYPE_POWERPC64 = CPU_TYPE_POWERPC | CPU_ARCH_ABI64;
pub const CPU_SUBTYPE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex);
pub const CPU_SUBTYPE_LIB64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const CPU_SUBTYPE_PTRAUTH_ABI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const CPU_SUBTYPE_ANY = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_MULTIPLE = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_LITTLE_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_BIG_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_THREADTYPE_NONE = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX780 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_VAX785 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_VAX750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_VAX730 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_UVAXI = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_UVAXII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_VAX8200 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_VAX8500 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_VAX8600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_VAX8650 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_VAX8800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_UVAXIII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_MC680x0_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68030 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68040 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MC68030_ONLY = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub inline fn CPU_SUBTYPE_INTEL(f: anytype, m: anytype) @TypeOf(@import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4))) {
    _ = &f;
    _ = &m;
    return @import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4));
}
pub const CPU_SUBTYPE_I386_ALL = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_386 = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_486 = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 0));
pub const CPU_SUBTYPE_486SX = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 8));
pub const CPU_SUBTYPE_586 = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENT = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTPRO = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTII_M3 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 3));
pub const CPU_SUBTYPE_PENTII_M5 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 5));
pub const CPU_SUBTYPE_CELERON = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 6));
pub const CPU_SUBTYPE_CELERON_MOBILE = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 7));
pub const CPU_SUBTYPE_PENTIUM_3 = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_3_M = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTIUM_3_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 2));
pub const CPU_SUBTYPE_PENTIUM_M = CPU_SUBTYPE_INTEL(@as(c_int, 9), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4 = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4_M = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 1));
pub const CPU_SUBTYPE_ITANIUM = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 0));
pub const CPU_SUBTYPE_ITANIUM_2 = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 1));
pub const CPU_SUBTYPE_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 0));
pub const CPU_SUBTYPE_XEON_MP = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 1));
pub inline fn CPU_SUBTYPE_INTEL_FAMILY(x: anytype) @TypeOf(x & @as(c_int, 15)) {
    _ = &x;
    return x & @as(c_int, 15);
}
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX = @as(c_int, 15);
pub inline fn CPU_SUBTYPE_INTEL_MODEL(x: anytype) @TypeOf(x >> @as(c_int, 4)) {
    _ = &x;
    return x >> @as(c_int, 4);
}
pub const CPU_SUBTYPE_INTEL_MODEL_ALL = @as(c_int, 0);
pub const CPU_SUBTYPE_X86_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_ARCH1 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_X86_64_H = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_THREADTYPE_INTEL_HTT = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MIPS_R2300 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_R2600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MIPS_R2800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_MIPS_R2000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_MIPS_R2000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_MIPS_R3000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_MIPS_R3000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_MC98000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC98601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_HPPA_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100LC = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC88100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88110 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_SPARC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_860 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_POWERPC_601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_602 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_POWERPC_603 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_POWERPC_603e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_POWERPC_603ev = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_POWERPC_604 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_POWERPC_604e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_POWERPC_620 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_POWERPC_750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_POWERPC_7400 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_POWERPC_7450 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_POWERPC_970 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 100));
pub const CPU_SUBTYPE_ARM_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM_V4T = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_ARM_V6 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_ARM_V5TEJ = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_ARM_XSCALE = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_ARM_V7 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_ARM_V7F = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_ARM_V7S = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_ARM_V7K = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_ARM_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 13));
pub const CPU_SUBTYPE_ARM_V6M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 14));
pub const CPU_SUBTYPE_ARM_V7M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 15));
pub const CPU_SUBTYPE_ARM_V7EM = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 16));
pub const CPU_SUBTYPE_ARM_V8M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 17));
pub const CPU_SUBTYPE_ARM64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_ARM64E = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex);
pub inline fn CPU_SUBTYPE_ARM64_PTR_AUTH_VERSION(x: anytype) @TypeOf((x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24)) {
    _ = &x;
    return (x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24);
}
pub const CPU_SUBTYPE_ARM64_32_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_32_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPUFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUFAMILY_POWERPC_G3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xcee41549, .hex);
pub const CPUFAMILY_POWERPC_G4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x77c184ae, .hex);
pub const CPUFAMILY_POWERPC_G5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xed76d8aa, .hex);
pub const CPUFAMILY_INTEL_6_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xaa33392b, .hex);
pub const CPUFAMILY_INTEL_PENRYN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x78ea4fbc, .hex);
pub const CPUFAMILY_INTEL_NEHALEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6b5a4cd2, .hex);
pub const CPUFAMILY_INTEL_WESTMERE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x573b5eec, .hex);
pub const CPUFAMILY_INTEL_SANDYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5490b78c, .hex);
pub const CPUFAMILY_INTEL_IVYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f65e835, .hex);
pub const CPUFAMILY_INTEL_HASWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10b282dc, .hex);
pub const CPUFAMILY_INTEL_BROADWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x582ed09c, .hex);
pub const CPUFAMILY_INTEL_SKYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37fc219f, .hex);
pub const CPUFAMILY_INTEL_KABYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f817246, .hex);
pub const CPUFAMILY_INTEL_ICELAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x38435547, .hex);
pub const CPUFAMILY_INTEL_COMETLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1cf8a03e, .hex);
pub const CPUFAMILY_ARM_9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe73283ae, .hex);
pub const CPUFAMILY_ARM_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ff620d8, .hex);
pub const CPUFAMILY_ARM_XSCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x53b005f5, .hex);
pub const CPUFAMILY_ARM_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xbd1b0ae9, .hex);
pub const CPUFAMILY_ARM_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0cc90e64, .hex);
pub const CPUFAMILY_ARM_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96077ef1, .hex);
pub const CPUFAMILY_ARM_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xa8511bca, .hex);
pub const CPUFAMILY_ARM_SWIFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1e2d6381, .hex);
pub const CPUFAMILY_ARM_CYCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37a09642, .hex);
pub const CPUFAMILY_ARM_TYPHOON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2c91a47e, .hex);
pub const CPUFAMILY_ARM_TWISTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92fb37c8, .hex);
pub const CPUFAMILY_ARM_HURRICANE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x67ceee93, .hex);
pub const CPUFAMILY_ARM_MONSOON_MISTRAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe81e7ef6, .hex);
pub const CPUFAMILY_ARM_VORTEX_TEMPEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07d34b9f, .hex);
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x462504d2, .hex);
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1b588bb3, .hex);
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xda33d83d, .hex);
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765edea, .hex);
pub const CPUFAMILY_ARM_IBIZA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfa33415e, .hex);
pub const CPUFAMILY_ARM_PALMA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x72015832, .hex);
pub const CPUFAMILY_ARM_COLL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2876f5b5, .hex);
pub const CPUFAMILY_ARM_LOBOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5f4dea93, .hex);
pub const CPUFAMILY_ARM_DONAN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6f5129ac, .hex);
pub const CPUFAMILY_ARM_BRAVA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x17d5b93a, .hex);
pub const CPUFAMILY_ARM_TAHITI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x75d4acb9, .hex);
pub const CPUFAMILY_ARM_TUPAI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x204526d0, .hex);
pub const CPUSUBFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUSUBFAMILY_ARM_HP = @as(c_int, 1);
pub const CPUSUBFAMILY_ARM_HG = @as(c_int, 2);
pub const CPUSUBFAMILY_ARM_M = @as(c_int, 3);
pub const CPUSUBFAMILY_ARM_HS = @as(c_int, 4);
pub const CPUSUBFAMILY_ARM_HC_HD = @as(c_int, 5);
pub const CPUSUBFAMILY_ARM_HA = @as(c_int, 6);
pub const CPUFAMILY_INTEL_6_23 = CPUFAMILY_INTEL_PENRYN;
pub const CPUFAMILY_INTEL_6_26 = CPUFAMILY_INTEL_NEHALEM;
pub inline fn CFCopyLocalizedString(key: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL)) {
    _ = &key;
    _ = &comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL);
}
pub inline fn CFCopyLocalizedStringFromTable(key: anytype, tbl: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl);
}
pub inline fn CFCopyLocalizedStringFromTableInBundle(key: anytype, tbl: anytype, bundle: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, key, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &bundle;
    _ = &comment;
    return CFBundleCopyLocalizedString(bundle, key, key, tbl);
}
pub inline fn CFCopyLocalizedStringWithDefaultValue(key: anytype, tbl: anytype, bundle: anytype, value: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, value, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &bundle;
    _ = &value;
    _ = &comment;
    return CFBundleCopyLocalizedString(bundle, key, value, tbl);
}
pub const __COREFOUNDATION_CFMESSAGEPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPLUGIN__ = @as(c_int, 1);
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE = @as(c_int, 1);
pub const __COREFOUNDATION_CFMACHPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLENUMERATOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILESECURITY__ = @as(c_int, 1);
pub const _SYS_ACL_H = "";
pub const _SYS_KAUTH_H = "";
pub const _KAUTH_GUID = "";
pub const KAUTH_GUID_SIZE = @as(c_int, 16);
pub const _GUID_T = "";
pub const KAUTH_UID_NONE = ~@import("std").zig.c_translation.cast(uid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const KAUTH_GID_NONE = ~@import("std").zig.c_translation.cast(gid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const KAUTH_NTSID_MAX_AUTHORITIES = @as(c_int, 16);
pub const _NTSID_T = "";
pub const KAUTH_NTSID_HDRSIZE = @as(c_int, 8);
pub inline fn KAUTH_NTSID_SIZE(_s: anytype) @TypeOf(KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t))) {
    _ = &_s;
    return KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t));
}
pub const KAUTH_EXTLOOKUP_SUCCESS = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_BADRQ = @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_FAILURE = @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_FATAL = @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_INPROG = @as(c_int, 100);
pub const KAUTH_EXTLOOKUP_VALID_UID = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_VALID_UGUID = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_VALID_USID = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_VALID_GID = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_VALID_GGUID = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_EXTLOOKUP_VALID_GSID = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_EXTLOOKUP_WANT_UID = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_EXTLOOKUP_WANT_UGUID = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_EXTLOOKUP_WANT_USID = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_EXTLOOKUP_WANT_GID = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_EXTLOOKUP_WANT_GGUID = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_EXTLOOKUP_WANT_GSID = @as(c_int, 1) << @as(c_int, 11);
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 12);
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 13);
pub const KAUTH_EXTLOOKUP_ISMEMBER = @as(c_int, 1) << @as(c_int, 14);
pub const KAUTH_EXTLOOKUP_VALID_PWNAM = @as(c_int, 1) << @as(c_int, 15);
pub const KAUTH_EXTLOOKUP_WANT_PWNAM = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_EXTLOOKUP_VALID_GRNAM = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_EXTLOOKUP_WANT_GRNAM = @as(c_int, 1) << @as(c_int, 18);
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS = @as(c_int, 1) << @as(c_int, 19);
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS = @as(c_int, 1) << @as(c_int, 20);
pub const KAUTH_EXTLOOKUP_REGISTER = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_RESULT = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_WORKER = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_DEREGISTER = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_GET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_SET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_CLEAR_CACHES = @as(c_int, 1) << @as(c_int, 5);
pub const IDENTITYSVC_ENTITLEMENT = "com.apple.private.identitysvc";
pub const KAUTH_ACE_KINDMASK = @as(c_int, 0xf);
pub const KAUTH_ACE_PERMIT = @as(c_int, 1);
pub const KAUTH_ACE_DENY = @as(c_int, 2);
pub const KAUTH_ACE_AUDIT = @as(c_int, 3);
pub const KAUTH_ACE_ALARM = @as(c_int, 4);
pub const KAUTH_ACE_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_ACE_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_ACE_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_ACE_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_ACE_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_ACE_SUCCESS = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_ACE_FAILURE = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS = ((KAUTH_ACE_FILE_INHERIT | KAUTH_ACE_DIRECTORY_INHERIT) | KAUTH_ACE_LIMIT_INHERIT) | KAUTH_ACE_ONLY_INHERIT;
pub const KAUTH_ACE_GENERIC_ALL = @as(c_int, 1) << @as(c_int, 21);
pub const KAUTH_ACE_GENERIC_EXECUTE = @as(c_int, 1) << @as(c_int, 22);
pub const KAUTH_ACE_GENERIC_WRITE = @as(c_int, 1) << @as(c_int, 23);
pub const KAUTH_ACE_GENERIC_READ = @as(c_int, 1) << @as(c_int, 24);
pub const _KAUTH_ACE = "";
pub const KAUTH_ACL_MAX_ENTRIES = @as(c_int, 128);
pub const KAUTH_ACL_FLAGS_PRIVATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
pub const KAUTH_ACL_DEFER_INHERIT = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_ACL_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_FILESEC_NOACL = @import("std").zig.c_translation.cast(u_int32_t, -@as(c_int, 1));
pub const KAUTH_ACL_SIZE = @compileError("unable to translate macro: undefined identifier `acl_ace`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:229:9
pub inline fn KAUTH_ACL_COPYSIZE(p: anytype) @TypeOf(KAUTH_ACL_SIZE(p.*.acl_entrycount)) {
    _ = &p;
    return KAUTH_ACL_SIZE(p.*.acl_entrycount);
}
pub const _KAUTH_ACL = "";
pub const KAUTH_FILESEC_MAGIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x012cc16d, .hex);
pub const fsec_entrycount = @compileError("unable to translate macro: undefined identifier `fsec_acl`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:255:9
pub const fsec_flags = @compileError("unable to translate macro: undefined identifier `fsec_acl`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:256:9
pub const fsec_ace = @compileError("unable to translate macro: undefined identifier `fsec_acl`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:257:9
pub const KAUTH_FILESEC_FLAGS_PRIVATE = KAUTH_ACL_FLAGS_PRIVATE;
pub const KAUTH_FILESEC_DEFER_INHERIT = KAUTH_ACL_DEFER_INHERIT;
pub const KAUTH_FILESEC_NO_INHERIT = KAUTH_ACL_NO_INHERIT;
pub const KAUTH_FILESEC_NONE = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 0));
pub const KAUTH_FILESEC_WANTED = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 1));
pub const _KAUTH_FILESEC = "";
pub const KAUTH_FILESEC_SIZE = @compileError("unable to translate macro: undefined identifier `fsec_acl`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:269:9
pub inline fn KAUTH_FILESEC_COPYSIZE(p: anytype) @TypeOf(KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount)) {
    _ = &p;
    return KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount);
}
pub inline fn KAUTH_FILESEC_COUNT(s: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace))) {
    _ = &s;
    return @import("std").zig.c_translation.MacroArithmetic.div(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace));
}
pub inline fn KAUTH_FILESEC_VALID(s: anytype) @TypeOf((s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (@import("std").zig.c_translation.MacroArithmetic.rem(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0))) {
    _ = &s;
    return (s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (@import("std").zig.c_translation.MacroArithmetic.rem(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0));
}
pub const KAUTH_FILESEC_XATTR = "com.apple.system.Security";
pub const KAUTH_ENDIAN_HOST = @as(c_int, 0x00000001);
pub const KAUTH_ENDIAN_DISK = @as(c_int, 0x00000002);
pub const KAUTH_VNODE_READ_DATA = @as(c_uint, 1) << @as(c_int, 1);
pub const KAUTH_VNODE_LIST_DIRECTORY = KAUTH_VNODE_READ_DATA;
pub const KAUTH_VNODE_WRITE_DATA = @as(c_uint, 1) << @as(c_int, 2);
pub const KAUTH_VNODE_ADD_FILE = KAUTH_VNODE_WRITE_DATA;
pub const KAUTH_VNODE_EXECUTE = @as(c_uint, 1) << @as(c_int, 3);
pub const KAUTH_VNODE_SEARCH = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_DELETE = @as(c_uint, 1) << @as(c_int, 4);
pub const KAUTH_VNODE_APPEND_DATA = @as(c_uint, 1) << @as(c_int, 5);
pub const KAUTH_VNODE_ADD_SUBDIRECTORY = KAUTH_VNODE_APPEND_DATA;
pub const KAUTH_VNODE_DELETE_CHILD = @as(c_uint, 1) << @as(c_int, 6);
pub const KAUTH_VNODE_READ_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 7);
pub const KAUTH_VNODE_WRITE_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 8);
pub const KAUTH_VNODE_READ_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 9);
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 10);
pub const KAUTH_VNODE_READ_SECURITY = @as(c_uint, 1) << @as(c_int, 11);
pub const KAUTH_VNODE_WRITE_SECURITY = @as(c_uint, 1) << @as(c_int, 12);
pub const KAUTH_VNODE_TAKE_OWNERSHIP = @as(c_uint, 1) << @as(c_int, 13);
pub const KAUTH_VNODE_CHANGE_OWNER = KAUTH_VNODE_TAKE_OWNERSHIP;
pub const KAUTH_VNODE_SYNCHRONIZE = @as(c_uint, 1) << @as(c_int, 20);
pub const KAUTH_VNODE_LINKTARGET = @as(c_uint, 1) << @as(c_int, 25);
pub const KAUTH_VNODE_CHECKIMMUTABLE = @as(c_uint, 1) << @as(c_int, 26);
pub const KAUTH_VNODE_ACCESS = @as(c_uint, 1) << @as(c_int, 31);
pub const KAUTH_VNODE_NOIMMUTABLE = @as(c_uint, 1) << @as(c_int, 30);
pub const KAUTH_VNODE_SEARCHBYANYONE = @as(c_uint, 1) << @as(c_int, 29);
pub const KAUTH_INVALIDATE_CACHED_RIGHTS = @compileError("unable to translate macro: undefined identifier `kauth_action_t`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/usr/include/sys/kauth.h:361:9
pub const KAUTH_VNODE_GENERIC_READ_BITS = ((KAUTH_VNODE_READ_DATA | KAUTH_VNODE_READ_ATTRIBUTES) | KAUTH_VNODE_READ_EXTATTRIBUTES) | KAUTH_VNODE_READ_SECURITY;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS = (((((KAUTH_VNODE_WRITE_DATA | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_GENERIC_ALL_BITS = (KAUTH_VNODE_GENERIC_READ_BITS | KAUTH_VNODE_GENERIC_WRITE_BITS) | KAUTH_VNODE_GENERIC_EXECUTE_BITS;
pub const KAUTH_VNODE_WRITE_RIGHTS = ((((((((((KAUTH_VNODE_ADD_FILE | KAUTH_VNODE_ADD_SUBDIRECTORY) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_DATA) | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY) | KAUTH_VNODE_TAKE_OWNERSHIP) | KAUTH_VNODE_LINKTARGET) | KAUTH_VNODE_CHECKIMMUTABLE;
pub const __DARWIN_ACL_READ_DATA = @as(c_int, 1) << @as(c_int, 1);
pub const __DARWIN_ACL_LIST_DIRECTORY = __DARWIN_ACL_READ_DATA;
pub const __DARWIN_ACL_WRITE_DATA = @as(c_int, 1) << @as(c_int, 2);
pub const __DARWIN_ACL_ADD_FILE = __DARWIN_ACL_WRITE_DATA;
pub const __DARWIN_ACL_EXECUTE = @as(c_int, 1) << @as(c_int, 3);
pub const __DARWIN_ACL_SEARCH = __DARWIN_ACL_EXECUTE;
pub const __DARWIN_ACL_DELETE = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_APPEND_DATA = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ADD_SUBDIRECTORY = __DARWIN_ACL_APPEND_DATA;
pub const __DARWIN_ACL_DELETE_CHILD = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_READ_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_WRITE_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_READ_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 9);
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 10);
pub const __DARWIN_ACL_READ_SECURITY = @as(c_int, 1) << @as(c_int, 11);
pub const __DARWIN_ACL_WRITE_SECURITY = @as(c_int, 1) << @as(c_int, 12);
pub const __DARWIN_ACL_CHANGE_OWNER = @as(c_int, 1) << @as(c_int, 13);
pub const __DARWIN_ACL_SYNCHRONIZE = @as(c_int, 1) << @as(c_int, 20);
pub const __DARWIN_ACL_EXTENDED_ALLOW = @as(c_int, 1);
pub const __DARWIN_ACL_EXTENDED_DENY = @as(c_int, 2);
pub const __DARWIN_ACL_ENTRY_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_FLAG_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const ACL_MAX_ENTRIES = @as(c_int, 128);
pub const ACL_UNDEFINED_ID = NULL;
pub const kCFFileSecurityRemoveACL = @import("std").zig.c_translation.cast(acl_t, _FILESEC_REMOVE_ACL);
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUSERNOTIFICATION__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFXMLNODE__ = @as(c_int, 1);
pub const __CFXMLNode_DEPRECATION_MSG = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const __COREFOUNDATION_CFXMLPARSER__ = @as(c_int, 1);
pub const __CFXMLParser_DEPRECATION_MSG = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const kAudioComponentConfigurationInfo_ValidationResult = "ValidationResult";
pub const kAudioComponentValidationParameter_TimeOut = "TimeOut";
pub const kAudioComponentValidationParameter_ForceValidation = "ForceValidation";
pub const kAudioComponentValidationParameter_LoadOutOfProcess = "LoadOutOfProcess";
pub const AU_SUPPORT_INTERAPP_AUDIO = @as(c_int, 1);
pub const INTERAPP_AUDIO_DEPRECATED = @compileError("unable to translate macro: undefined identifier `ios`");
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AUComponent.h:73:9
pub const AudioUnit_AudioCodec_h = "";
pub const kAudioSettings_TopLevelKey = "name";
pub const kAudioSettings_Version = "version";
pub const kAudioSettings_Parameters = "parameters";
pub const kAudioSettings_SettingKey = "key";
pub const kAudioSettings_SettingName = "name";
pub const kAudioSettings_ValueType = "value type";
pub const kAudioSettings_AvailableValues = "available values";
pub const kAudioSettings_LimitedValues = "limited values";
pub const kAudioSettings_CurrentValue = "current value";
pub const kAudioSettings_Summary = "summary";
pub const kAudioSettings_Hint = "hint";
pub const kAudioSettings_Unit = "unit";
pub const AudioUnit_AudioOutputUnit_h = "";
pub const AudioUnit_AudioUnitParameters_h = "";
pub const AudioToolbox_AudioUnitProperties_h = "";
pub const kAUPresetVersionKey = "version";
pub const kAUPresetTypeKey = "type";
pub const kAUPresetSubtypeKey = "subtype";
pub const kAUPresetManufacturerKey = "manufacturer";
pub const kAUPresetDataKey = "data";
pub const kAUPresetNameKey = "name";
pub const kAUPresetNumberKey = "preset-number";
pub const kAUPresetRenderQualityKey = "render-quality";
pub const kAUPresetCPULoadKey = "cpu-load";
pub const kAUPresetElementNameKey = "element-name";
pub const kAUPresetExternalFileRefs = "file-references";
pub const kAUPresetVSTDataKey = "vstdata";
pub const kAUPresetVSTPresetKey = "vstpreset";
pub const kAUPresetMASDataKey = "masdata";
pub const kAUPresetPartKey = "part";
pub inline fn AudioUnitDisplayTypeIsLogarithmic(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayLogarithmic) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayLogarithmic;
}
pub inline fn AudioUnitDisplayTypeIsSquareRoot(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplaySquareRoot) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplaySquareRoot;
}
pub inline fn AudioUnitDisplayTypeIsSquared(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplaySquared) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplaySquared;
}
pub inline fn AudioUnitDisplayTypeIsCubed(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayCubed) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayCubed;
}
pub inline fn AudioUnitDisplayTypeIsCubeRoot(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayCubeRoot) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayCubeRoot;
}
pub inline fn AudioUnitDisplayTypeIsExponential(flags: anytype) @TypeOf(GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayExponential) {
    _ = &flags;
    return GetAudioUnitParameterDisplayType(flags) == kAudioUnitParameterFlag_DisplayExponential;
}
pub const kAudioUnitConfigurationInfo_HasCustomView = "HasCustomView";
pub const kAudioUnitConfigurationInfo_ChannelConfigurations = "ChannelConfigurations";
pub const kAudioUnitConfigurationInfo_InitialInputs = "InitialInputs";
pub const kAudioUnitConfigurationInfo_InitialOutputs = "InitialOutputs";
pub const kAudioUnitConfigurationInfo_IconURL = "IconURL";
pub const kAudioUnitConfigurationInfo_BusCountWritable = "BusCountWritable";
pub const kAudioUnitConfigurationInfo_SupportedChannelLayoutTags = "SupportedChannelLayoutTags";
pub const kAudioUnitConfigurationInfo_MIDIProtocol = "MIDIProtocol";
pub const kAudioUnitConfigurationInfo_MigrateFromPlugin = "MigrateFromPlugin";
pub const kAudioUnitConfigurationInfo_AvailableArchitectures = "AvailableArchitectures";
pub const AudioUnit_MusicDevice_h = "";
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
pub const TimeBaseRecord = struct_TimeBaseRecord;
pub const __CFString = struct___CFString;
pub const __CFNull = struct___CFNull;
pub const __CFAllocator = struct___CFAllocator;
pub const lconv = struct_lconv;
pub const _xlocale = struct__xlocale;
pub const __float2 = struct___float2;
pub const __double2 = struct___double2;
pub const exception = struct_exception;
pub const __darwin_arm_exception_state = struct___darwin_arm_exception_state;
pub const __darwin_arm_exception_state64 = struct___darwin_arm_exception_state64;
pub const __darwin_arm_exception_state64_v2 = struct___darwin_arm_exception_state64_v2;
pub const __darwin_arm_thread_state = struct___darwin_arm_thread_state;
pub const __darwin_arm_thread_state64 = struct___darwin_arm_thread_state64;
pub const __darwin_arm_vfp_state = struct___darwin_arm_vfp_state;
pub const __darwin_arm_neon_state64 = struct___darwin_arm_neon_state64;
pub const __darwin_arm_neon_state = struct___darwin_arm_neon_state;
pub const __arm_pagein_state = struct___arm_pagein_state;
pub const __darwin_arm_sme_state = struct___darwin_arm_sme_state;
pub const __darwin_arm_sve_z_state = struct___darwin_arm_sve_z_state;
pub const __darwin_arm_sve_p_state = struct___darwin_arm_sve_p_state;
pub const __darwin_arm_sme_za_state = struct___darwin_arm_sme_za_state;
pub const __darwin_arm_sme2_state = struct___darwin_arm_sme2_state;
pub const __arm_legacy_debug_state = struct___arm_legacy_debug_state;
pub const __darwin_arm_debug_state32 = struct___darwin_arm_debug_state32;
pub const __darwin_arm_debug_state64 = struct___darwin_arm_debug_state64;
pub const __darwin_arm_cpmu_state64 = struct___darwin_arm_cpmu_state64;
pub const __darwin_mcontext32 = struct___darwin_mcontext32;
pub const __darwin_mcontext64 = struct___darwin_mcontext64;
pub const __darwin_sigaltstack = struct___darwin_sigaltstack;
pub const __darwin_ucontext = struct___darwin_ucontext;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const __siginfo = struct___siginfo;
pub const __sigaction_u = union___sigaction_u;
pub const __sigaction = struct___sigaction;
pub const sigstack = struct_sigstack;
pub const __sbuf = struct___sbuf;
pub const __sFILEX = struct___sFILEX;
pub const __sFILE = struct___sFILE;
pub const timeval = struct_timeval;
pub const rusage = struct_rusage;
pub const rusage_info_v0 = struct_rusage_info_v0;
pub const rusage_info_v1 = struct_rusage_info_v1;
pub const rusage_info_v2 = struct_rusage_info_v2;
pub const rusage_info_v3 = struct_rusage_info_v3;
pub const rusage_info_v4 = struct_rusage_info_v4;
pub const rusage_info_v5 = struct_rusage_info_v5;
pub const rusage_info_v6 = struct_rusage_info_v6;
pub const rlimit = struct_rlimit;
pub const proc_rlimit_control_wakeupmon = struct_proc_rlimit_control_wakeupmon;
pub const _malloc_zone_t = struct__malloc_zone_t;
pub const timespec = struct_timespec;
pub const tm = struct_tm;
pub const __CFArray = struct___CFArray;
pub const __CFBag = struct___CFBag;
pub const __CFBinaryHeap = struct___CFBinaryHeap;
pub const __CFBitVector = struct___CFBitVector;
pub const _OSUnalignedU16 = struct__OSUnalignedU16;
pub const _OSUnalignedU32 = struct__OSUnalignedU32;
pub const _OSUnalignedU64 = struct__OSUnalignedU64;
pub const __CFByteOrder = enum___CFByteOrder;
pub const __CFDictionary = struct___CFDictionary;
pub const __CFNotificationCenter = struct___CFNotificationCenter;
pub const __CFLocale = struct___CFLocale;
pub const __CFDate = struct___CFDate;
pub const __CFTimeZone = struct___CFTimeZone;
pub const __CFData = struct___CFData;
pub const __CFCharacterSet = struct___CFCharacterSet;
pub const __CFError = struct___CFError;
pub const __CFCalendar = struct___CFCalendar;
pub const __CFDateFormatter = struct___CFDateFormatter;
pub const __CFBoolean = struct___CFBoolean;
pub const __CFNumber = struct___CFNumber;
pub const __CFNumberFormatter = struct___CFNumberFormatter;
pub const __CFURL = struct___CFURL;
pub const FSRef = struct_FSRef;
pub const mach_port_status = struct_mach_port_status;
pub const mach_port_limits = struct_mach_port_limits;
pub const mach_port_info_ext = struct_mach_port_info_ext;
pub const mach_port_guard_info = struct_mach_port_guard_info;
pub const mach_port_qos = struct_mach_port_qos;
pub const mach_service_port_info = struct_mach_service_port_info;
pub const mach_port_options = struct_mach_port_options;
pub const mach_port_guard_exception_codes = enum_mach_port_guard_exception_codes;
pub const __CFRunLoop = struct___CFRunLoop;
pub const __CFRunLoopSource = struct___CFRunLoopSource;
pub const __CFRunLoopObserver = struct___CFRunLoopObserver;
pub const __CFRunLoopTimer = struct___CFRunLoopTimer;
pub const __CFSocket = struct___CFSocket;
pub const accessx_descriptor = struct_accessx_descriptor;
pub const fssearchblock = struct_fssearchblock;
pub const searchstate = struct_searchstate;
pub const flocktimeout = struct_flocktimeout;
pub const radvisory = struct_radvisory;
pub const fsignatures = struct_fsignatures;
pub const fsupplement = struct_fsupplement;
pub const fchecklv = struct_fchecklv;
pub const fgetsigsinfo = struct_fgetsigsinfo;
pub const fstore = struct_fstore;
pub const fpunchhole = struct_fpunchhole;
pub const ftrimactivefile = struct_ftrimactivefile;
pub const fspecread = struct_fspecread;
pub const fattributiontag = struct_fattributiontag;
pub const log2phys = struct_log2phys;
pub const _filesec = struct__filesec;
pub const os_workgroup_attr_opaque_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_interval_data_opaque_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_join_token_opaque_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_s = struct_os_workgroup_s;
pub const os_workgroup_max_parallel_threads_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const time_value = struct_time_value;
pub const mach_timespec = struct_mach_timespec;
pub const dispatch_source_type_s = struct_dispatch_source_type_s;
pub const __CFReadStream = struct___CFReadStream;
pub const __CFWriteStream = struct___CFWriteStream;
pub const __CFSet = struct___CFSet;
pub const __CFTree = struct___CFTree;
pub const __CFUUID = struct___CFUUID;
pub const __CFBundle = struct___CFBundle;
pub const __CFMessagePort = struct___CFMessagePort;
pub const __CFPlugInInstance = struct___CFPlugInInstance;
pub const __CFMachPort = struct___CFMachPort;
pub const __CFAttributedString = struct___CFAttributedString;
pub const __CFURLEnumerator = struct___CFURLEnumerator;
pub const kauth_identity_extlookup = struct_kauth_identity_extlookup;
pub const kauth_cache_sizes = struct_kauth_cache_sizes;
pub const kauth_ace = struct_kauth_ace;
pub const kauth_acl = struct_kauth_acl;
pub const kauth_filesec = struct_kauth_filesec;
pub const _acl = struct__acl;
pub const _acl_entry = struct__acl_entry;
pub const _acl_permset = struct__acl_permset;
pub const _acl_flagset = struct__acl_flagset;
pub const __CFFileSecurity = struct___CFFileSecurity;
pub const __CFStringTokenizer = struct___CFStringTokenizer;
pub const __CFFileDescriptor = struct___CFFileDescriptor;
pub const __CFUserNotification = struct___CFUserNotification;
pub const __CFXMLNode = struct___CFXMLNode;
pub const __CFXMLParser = struct___CFXMLParser;
pub const OpaqueAudioComponent = struct_OpaqueAudioComponent;
pub const ComponentInstanceRecord = struct_ComponentInstanceRecord;
pub const MIDIPacketList = struct_MIDIPacketList;
